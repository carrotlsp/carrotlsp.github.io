<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>day11-特征点检测与匹配-图像拼接</title>
    <link href="/2023/12/29/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D-2/"/>
    <url>/2023/12/29/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D-2/</url>
    
    <content type="html"><![CDATA[<h2 id="11-12、图像拼接-概述"><a href="#11-12、图像拼接-概述" class="headerlink" title="11-12、图像拼接 - 概述"></a>11-12、图像拼接 - 概述</h2><ul><li>主要将下面两图，进行拼接成一张图，核心步骤如下</li><li>① 读取文件并重置尺寸</li><li>②根据特征点和计算描述子，得到单应性矩阵</li><li>③图像变换</li><li>④图像拼接并输出图像</li></ul><p><img src="/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/map1.png" alt="map1"></p><p><img src="/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/map2.png" alt="map2"></p><h2 id="11-13、图像拼接-重设图片尺寸"><a href="#11-13、图像拼接-重设图片尺寸" class="headerlink" title="11-13、图像拼接 - 重设图片尺寸"></a>11-13、图像拼接 - 重设图片尺寸</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/map1.png&quot;</span>)<br>img2 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/map2.png&quot;</span>)<br><br><span class="hljs-comment"># 将两张图片进行尺寸统一</span><br>img1 = cv2.resize(img1,(<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))<br>img2 = cv2.resize(img2,(<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))<br><br><span class="hljs-comment"># 借助hstack展示图片</span><br>inputs = np.hstack((img1,img2))<br>cv2.imshow(<span class="hljs-string">&quot;inputs&quot;</span>, inputs)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>将两张图片尺寸统一，并且合并在一张图片</li><li><code>np.hstack((img1,img2))</code> 将两张图片按水平方向（列顺序）堆叠数组构成一个新的数组</li></ul><img src="/2023/12/29/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D-2/image-20231229092526283.png" class="" title="image-20231229092526283"><h2 id="11-14、图像拼接-获取单应性矩阵"><a href="#11-14、图像拼接-获取单应性矩阵" class="headerlink" title="11-14、图像拼接 - 获取单应性矩阵"></a>11-14、图像拼接 - 获取单应性矩阵</h2><ul><li>① 创建特征转换对象</li><li>② 通过特征转换对象获取特征点和描述子</li><li>③ 创建特征匹配器</li><li>④ 进行特征匹配</li><li>⑤ 过滤特征，找出有效的特征匹配点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_homo</span>(<span class="hljs-params">img1, img2</span>):<br>  <span class="hljs-comment"># ①创建特征提取器</span><br>  SIFT = cv2.SIFT_create()<br>  <span class="hljs-comment"># ②用特征提取器计算特征点和描述子</span><br>  kp1, desc1 = SIFT.detectAndCompute(img1,<span class="hljs-literal">None</span>)<br>  kp2, desc2 = SIFT.detectAndCompute(img2,<span class="hljs-literal">None</span>)<br>  <span class="hljs-comment"># ③创建暴力匹配器</span><br>  BF = cv2.BFMatcher()<br>  matches = BF.knnMatch(desc1, desc2,k=<span class="hljs-number">2</span>)<br><br>  <span class="hljs-comment"># ④过滤出优质的匹配点</span><br>  goodMatches = []<br>  <span class="hljs-keyword">for</span> (m,n) <span class="hljs-keyword">in</span> matches:<br>    <span class="hljs-keyword">if</span> m.distance &lt; <span class="hljs-number">0.8</span> * n.distance:<br>      goodMatches.append(m)<br>    <br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(goodMatches) &lt; <span class="hljs-number">8</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Errror Dot not enough!&quot;</span>)<br>  <span class="hljs-comment"># ⑤找到单应性矩阵</span><br>  img1_pts = []<br>  img2_pts = []<br>  <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> goodMatches:<br>    img1_pts.append(kp1[m.queryIdx].pt)<br>    img2_pts.append(kp2[m.trainIdx].pt)<br>  <br>  img1_pts = np.float32(img1_pts).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  img2_pts = np.float32(img2_pts).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  h , _ = cv2.findHomography(img1_pts,img2_pts,cv2.RANSAC, <span class="hljs-number">5.0</span>)<br>  <span class="hljs-comment"># ⑥测试代码，测试匹配效果</span><br><span class="hljs-comment">#   mask_matches = [[0, 0] for i in range(len(matches))]</span><br><span class="hljs-comment">#   for i, (m,n) in enumerate(matches):</span><br><span class="hljs-comment">#     if m.distance &lt; 0.8*n.distance:</span><br><span class="hljs-comment">#       mask_matches[i] = [1, 0]</span><br><span class="hljs-comment">#   ret = cv2.drawMatchesKnn(img1,kp1,img2,kp2,matches,None,</span><br><span class="hljs-comment">#                            matchColor=(0,255,0),singlePointColor=(255,0,0),</span><br><span class="hljs-comment">#                            matchesMask=mask_matches,flags=0)</span><br><span class="hljs-comment">#   cv2.imshow(&quot;ret&quot;, ret)</span><br><span class="hljs-comment">#   cv2.waitKey(0)</span><br><br>  <span class="hljs-keyword">return</span> h<br></code></pre></td></tr></table></figure><h2 id="11-15、图像拼接-平移和拼接"><a href="#11-15、图像拼接-平移和拼接" class="headerlink" title="11-15、图像拼接 - 平移和拼接"></a>11-15、图像拼接 - 平移和拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">stich_image</span>(<span class="hljs-params">img1, img2, h</span>):<br>  <span class="hljs-comment"># ①获取每张图片的四个角点</span><br>  h1, w1, _ = img1.shape<br>  h2, w2, _ = img2.shape<br>  img1_corner = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,h1], [w1,h1], [w1,<span class="hljs-number">0</span>]]).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  img2_corner = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,h2], [w2,h2], [w2,<span class="hljs-number">0</span>]]).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  <span class="hljs-comment"># ②对图片进行变换（单应性矩阵使图进行旋转，平移）</span><br>  img1_transform = cv2.perspectiveTransform(img1_corner,h)<br>  <br>  <span class="hljs-built_in">print</span>(img1_transform)<br>  <span class="hljs-comment"># ③获取平移矩阵平移的距离</span><br>  <span class="hljs-comment">#[1, 0, dx]</span><br>  <span class="hljs-comment">#[0, 1, dy]         </span><br>  <span class="hljs-comment">#[0, 0, 1 ]</span><br>  transform_array = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, w1],<br>                                [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                                [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><br>  <span class="hljs-comment"># ④创建一张大图，用平移矩阵+单应性矩阵,将两张图拼接到一起</span><br>  result_img = cv2.warpPerspective(img1, transform_array.dot(h), (w1*<span class="hljs-number">2</span>,h1))  <br>  result_img[<span class="hljs-number">0</span>:h1,w1:w1*<span class="hljs-number">2</span>] = img2[<span class="hljs-number">0</span>:h1,<span class="hljs-number">0</span>:w1]<br><br>  <span class="hljs-keyword">return</span> result_img<br></code></pre></td></tr></table></figure><h2 id="11-16、图像拼接-完整代码"><a href="#11-16、图像拼接-完整代码" class="headerlink" title="11-16、图像拼接 - 完整代码"></a>11-16、图像拼接 - 完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_homo</span>(<span class="hljs-params">img1, img2</span>):<br>  <span class="hljs-comment"># ①创建特征提取器</span><br>  SIFT = cv2.SIFT_create()<br>  <span class="hljs-comment"># ②用特征提取器计算特征点和描述子</span><br>  kp1, desc1 = SIFT.detectAndCompute(img1,<span class="hljs-literal">None</span>)<br>  kp2, desc2 = SIFT.detectAndCompute(img2,<span class="hljs-literal">None</span>)<br>  <span class="hljs-comment"># ③创建暴力匹配器</span><br>  BF = cv2.BFMatcher()<br>  matches = BF.knnMatch(desc1, desc2,k=<span class="hljs-number">2</span>)<br><br>  <span class="hljs-comment"># ④过滤出优质的匹配点</span><br>  goodMatches = []<br>  <span class="hljs-keyword">for</span> (m,n) <span class="hljs-keyword">in</span> matches:<br>    <span class="hljs-keyword">if</span> m.distance &lt; <span class="hljs-number">0.8</span> * n.distance:<br>      goodMatches.append(m)<br>    <br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(goodMatches) &lt; <span class="hljs-number">8</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Errror Dot not enough!&quot;</span>)<br>  <span class="hljs-comment"># ⑤找到单应性矩阵</span><br>  img1_pts = []<br>  img2_pts = []<br>  <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> goodMatches:<br>    img1_pts.append(kp1[m.queryIdx].pt)<br>    img2_pts.append(kp2[m.trainIdx].pt)<br>  <br>  img1_pts = np.float32(img1_pts).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  img2_pts = np.float32(img2_pts).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  h , _ = cv2.findHomography(img1_pts,img2_pts,cv2.RANSAC, <span class="hljs-number">5.0</span>)<br>  <span class="hljs-comment"># ⑥测试代码，测试匹配效果</span><br><span class="hljs-comment">#   mask_matches = [[0, 0] for i in range(len(matches))]</span><br><span class="hljs-comment">#   for i, (m,n) in enumerate(matches):</span><br><span class="hljs-comment">#     if m.distance &lt; 0.8*n.distance:</span><br><span class="hljs-comment">#       mask_matches[i] = [1, 0]</span><br><span class="hljs-comment">#   ret = cv2.drawMatchesKnn(img1,kp1,img2,kp2,matches,None,</span><br><span class="hljs-comment">#                            matchColor=(0,255,0),singlePointColor=(255,0,0),</span><br><span class="hljs-comment">#                            matchesMask=mask_matches,flags=0)</span><br><span class="hljs-comment">#   cv2.imshow(&quot;ret&quot;, ret)</span><br><span class="hljs-comment">#   cv2.waitKey(0)</span><br><br>  <span class="hljs-keyword">return</span> h<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stich_image</span>(<span class="hljs-params">img1, img2, h</span>):<br>  <span class="hljs-comment"># ①获取每张图片的四个角点</span><br>  h1, w1, _ = img1.shape<br>  h2, w2, _ = img2.shape<br>  img1_corner = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,h1], [w1,h1], [w1,<span class="hljs-number">0</span>]]).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  img2_corner = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,h2], [w2,h2], [w2,<span class="hljs-number">0</span>]]).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>  <span class="hljs-comment"># ②对图片进行变换（单应性矩阵使图进行旋转，平移）</span><br>  img1_transform = cv2.perspectiveTransform(img1_corner,h)<br>  <br>  <span class="hljs-built_in">print</span>(img1_transform)<br>  <span class="hljs-comment"># ③获取平移矩阵平移的距离</span><br>  <span class="hljs-comment">#[1, 0, dx]</span><br>  <span class="hljs-comment">#[0, 1, dy]         </span><br>  <span class="hljs-comment">#[0, 0, 1 ]</span><br>  transform_array = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, w1],<br>                                [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                                [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><br>  <span class="hljs-comment"># ④创建一张大图，用平移矩阵+单应性矩阵,将两张图拼接到一起</span><br>  result_img = cv2.warpPerspective(img1, transform_array.dot(h), (w1*<span class="hljs-number">2</span>,h1))  <br>  result_img[<span class="hljs-number">0</span>:h1,w1:w1*<span class="hljs-number">2</span>] = img2[<span class="hljs-number">0</span>:h1,<span class="hljs-number">0</span>:w1]<br><br>  <span class="hljs-keyword">return</span> result_img<br><br><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/map1.png&quot;</span>)<br>img2 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/map2.png&quot;</span>)<br><br><span class="hljs-comment"># 将两张图片进行尺寸统一</span><br>img1 = cv2.resize(img1,(<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))<br>img2 = cv2.resize(img2,(<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))<br><br><span class="hljs-comment"># 获取两张图片的单应性矩阵</span><br>h = get_homo(img1, img2)<br><span class="hljs-comment"># 图像拼接</span><br>result_img = stich_image(img1, img2, h)<br><br>cv2.imshow(<span class="hljs-string">&quot;result_img&quot;</span>,result_img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br><br><br></code></pre></td></tr></table></figure><ul><li>拼接效果如下</li><li><strong>中间那条缝可以用左右像素取平均值的办法，让它们看起来更协调</strong></li></ul><img src="/2023/12/29/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D-2/image-20231229163718559.png" class="" title="image-20231229163718559">]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-特征点检测与匹配</title>
    <link href="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/"/>
    <url>/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="11-1、特征点检测与匹配"><a href="#11-1、特征点检测与匹配" class="headerlink" title="11-1、特征点检测与匹配"></a>11-1、特征点检测与匹配</h2><blockquote><p><strong>OpenCV的特征检测可以做哪些事情呢？</strong></p><p>①图像搜索，以图搜图</p><p>②拼图游戏</p><p>③图像拼接，将两长切有关联的图拼接到一起</p></blockquote><blockquote><p><strong>什么是角点？</strong></p><p>在特征中最重要的是角点</p><p>灰度梯度最大值对应的像素</p><p>两条线的交点</p><p>极值点（一阶导数最大值，但二阶导数为0）</p></blockquote><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219192318669.png" class="" title="image-20231219192318669"><h2 id="11-2、Harris角点检测"><a href="#11-2、Harris角点检测" class="headerlink" title="11-2、Harris角点检测"></a>11-2、Harris角点检测</h2><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219192643261.png" class="" title="image-20231219192643261"><blockquote><p><strong>Harris角点检测逻辑</strong></p><p><strong>光滑地区：</strong>无论向哪里移动，衡量系数不变</p><p><strong>边缘地址：</strong>垂直边缘移动时，衡量系统变化剧烈</p><p><strong>在角点处：</strong>往哪个方向移动时，衡量系统都变化剧烈</p></blockquote><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219192634361.png" class="" title="image-20231219192634361"><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br>blockSize = <span class="hljs-number">2</span><br>ksize = <span class="hljs-number">3</span><br>k = <span class="hljs-number">0.04</span><br><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/opencv/08/chess.png&#x27;</span>)<br>oriImg = img.copy()<br><br><span class="hljs-comment">#灰度化</span><br>gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#Harris</span><br>dst = cv2.cornerHarris(gray,blockSize,ksize,k)<br><span class="hljs-comment">#角点展示</span><br>img[dst&gt;<span class="hljs-number">0.01</span>*dst.<span class="hljs-built_in">max</span>()] = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>]<br><br>cv2.imshow(<span class="hljs-string">&quot;oriImg&quot;</span>, oriImg)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到，很多角点都被检测出来了，并且画上了红点标记</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219193720963.png" class="" title="image-20231219193720963"><h2 id="11-3、Shi-Tomasi角点检测"><a href="#11-3、Shi-Tomasi角点检测" class="headerlink" title="11-3、Shi-Tomasi角点检测"></a>11-3、Shi-Tomasi角点检测</h2><blockquote><p><strong>Shi-Tomasi 是 Harris 角点检测的改进版；也是我们更常用的一种角点检测的方式</strong></p><p>Harris角点检测算的稳定性和k有关，而 k 是个经验值，不好设定最佳值</p></blockquote><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219194213195.png" class="" title="image-20231219194213195"><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219194226429.png" class="" title="image-20231219194226429"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/opencv/08/chess.png&#x27;</span>)<br>oriImg = img.copy()<br><span class="hljs-comment">#灰度化</span><br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#Shi-Tomasi角点检测</span><br>corners = cv2.goodFeaturesToTrack(gray, <span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">10</span>)<br>corners = np.int0(corners)<br><br><span class="hljs-built_in">print</span>(corners[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> corners:<br>  x,y = c.ravel()<br>  cv2.circle(img,(x,y),<span class="hljs-number">3</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),-<span class="hljs-number">1</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;oriImg&quot;</span>,oriImg)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>,img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到效果和Harris角点检测基本一致，但是调用更加简单</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219195215128.png" class="" title="image-20231219195215128"><h2 id="11-4、SIFT关键点检测"><a href="#11-4、SIFT关键点检测" class="headerlink" title="11-4、SIFT关键点检测"></a>11-4、SIFT关键点检测</h2><blockquote><p><strong>SIFT(Scale Invariant Feature Transform)：SIFT 被认为是一种稳健、尺度不变且对旋转、光照等变化具有较强鲁棒性的特征描述算法，原理较复杂。</strong></p><p>Harris 主要基于局部梯度的变化来检测角点。</p><p>SIFT 则更加复杂，结合了尺度空间和方向信息，生成了更具描述性的特征描述。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/opencv/08/chess.png&#x27;</span>)<br>oriImg = img.copy()<br><span class="hljs-comment">#灰度化</span><br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化SIFT</span><br>sift = cv2.SIFT_create()<br><span class="hljs-comment">#进行检测</span><br>kp = sift.detect(gray,<span class="hljs-literal">None</span>)<br><span class="hljs-comment">#绘制keypoints</span><br>cv2.drawKeypoints(gray, kp, img)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;oriImg&quot;</span>,oriImg)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到SIFT检测结果更加复杂</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219201221390.png" class="" title="image-20231219201221390"><h2 id="11-5、计算SIFT描述子"><a href="#11-5、计算SIFT描述子" class="headerlink" title="11-5、计算SIFT描述子"></a>11-5、计算SIFT描述子</h2><blockquote><p><strong>关键点：</strong>位置、大小和方向。</p><p><strong>关键点描述子：</strong>记录了关键点周围对其有贡献的像素点的一组向量值，其不受仿射变换、关照变换等影响。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/opencv/08/chess.png&#x27;</span>)<br>oriImg = img.copy()<br><span class="hljs-comment">#灰度化</span><br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化SIFT</span><br>sift = cv2.SIFT_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp, des = sift.detectAndCompute(gray, <span class="hljs-literal">None</span>)<br><span class="hljs-comment">#打印描述子进行观察</span><br><span class="hljs-built_in">print</span>(des[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#绘制keypoints</span><br>cv2.drawKeypoints(gray, kp, img)<br>cv2.imshow(<span class="hljs-string">&quot;oriImg&quot;</span>,oriImg)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>暂时不懂描述子拿来干啥的，后面再说吧。</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231219202225527.png" class="" title="image-20231219202225527"><h2 id="11-6、SURF"><a href="#11-6、SURF" class="headerlink" title="11-6、SURF"></a>11-6、SURF</h2><blockquote><p>SURF(Speeded-Up Robust Features)：SIFT最大的问题就是速度慢，因此才有SUFR。</p></blockquote><ul><li>好像在我安装OpenCV版本上不支持</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#初始化SURF</span><br>SURF = cv2.SURF_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp, des = SURF.detectAndCompute(gray, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><h2 id="11-7、ORB特征检测"><a href="#11-7、ORB特征检测" class="headerlink" title="11-7、ORB特征检测"></a>11-7、ORB特征检测</h2><blockquote><p>ORB最大的优点：可以做到实时检测</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/opencv/08/chess.png&#x27;</span>)<br>oriImg = img.copy()<br><span class="hljs-comment">#灰度化</span><br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化 ORB</span><br>ORB = cv2.ORB_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp, des = ORB.detectAndCompute(gray, <span class="hljs-literal">None</span>)<br><span class="hljs-comment">#打印描述子进行观察</span><br><span class="hljs-built_in">print</span>(des[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#绘制keypoints</span><br>cv2.drawKeypoints(gray, kp, img)<br>cv2.imshow(<span class="hljs-string">&quot;oriImg&quot;</span>,oriImg)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到ORB检测出来的点极少</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222160836888.png" class="" title="image-20231222160836888"><blockquote><p>从检测质量来看：SIFT &gt; SURF &gt; ORB</p><p>从检测速度来看：ORB &gt; SURF &gt; SIFT</p></blockquote><h2 id="11-8、暴力特征匹配"><a href="#11-8、暴力特征匹配" class="headerlink" title="11-8、暴力特征匹配"></a>11-8、暴力特征匹配</h2><blockquote><p>**BF (Brute-Force)**，暴力特征匹配，也就是两图所有的特征拿出，循环暴力匹配。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_search.png&quot;</span>)<br>img2 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_orig.png&quot;</span>)<br><span class="hljs-comment">#灰度化</span><br>gray1 = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)<br>gray2 = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化 SIFT</span><br>SIFT = cv2.SIFT_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp1, des1 = SIFT.detectAndCompute(gray1, <span class="hljs-literal">None</span>)<br>kp2, des2 = SIFT.detectAndCompute(gray2, <span class="hljs-literal">None</span>)<br><span class="hljs-comment">#进行暴力特征匹配</span><br>bf = cv2.BFMatcher(cv2.NORM_L1)<br>match = bf.match(des1, des2)<br><span class="hljs-comment">#绘图</span><br>img3 = cv2.drawMatches(img1, kp1, img2, kp2, match, <span class="hljs-literal">None</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;img3&quot;</span>,img3)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>下图可以很好的看到匹配结果</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222172940927.png" class="" title="image-20231222172940927"><h2 id="11-9、FLANN特征匹配"><a href="#11-9、FLANN特征匹配" class="headerlink" title="11-9、FLANN特征匹配"></a>11-9、FLANN特征匹配</h2><blockquote><p><strong>FLANN优势：</strong>由于它使用的是邻近近似值匹配，所以速度非常快。</p><p><strong>FLANN劣势：</strong>精度不如暴力匹配法高。</p></blockquote><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222173531772.png" class="" title="image-20231222173531772"><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222173556369.png" class="" title="image-20231222173556369"><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222173614242.png" class="" title="image-20231222173614242"><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231222173625296.png" class="" title="image-20231222173625296"><h2 id="11-10、实战FLANN特征匹配"><a href="#11-10、实战FLANN特征匹配" class="headerlink" title="11-10、实战FLANN特征匹配"></a>11-10、实战FLANN特征匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_search.png&quot;</span>)<br>img2 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_orig.png&quot;</span>)<br><span class="hljs-comment">#灰度化</span><br>gray1 = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)<br>gray2 = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化 SIFT</span><br>SIFT = cv2.SIFT_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp1, des1 = SIFT.detectAndCompute(gray1, <span class="hljs-literal">None</span>)<br>kp2, des2 = SIFT.detectAndCompute(gray2, <span class="hljs-literal">None</span>)<br><span class="hljs-comment">#创建匹配器</span><br>index_params = <span class="hljs-built_in">dict</span>(algorithm = <span class="hljs-number">1</span>, trees = <span class="hljs-number">5</span>)<br>search_params = <span class="hljs-built_in">dict</span>(checks = <span class="hljs-number">50</span>)<br>flann = cv2.FlannBasedMatcher(index_params, search_params)<br><span class="hljs-comment">#进行匹配</span><br>matches = flann.knnMatch(des1, des2, k=<span class="hljs-number">2</span>)<br><span class="hljs-comment">#准备一个空的掩膜来绘制好的匹配</span><br>mask_matches = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matches))]<br><br><span class="hljs-comment">#向掩膜中添加数据</span><br><span class="hljs-keyword">for</span> i, (m,n) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(matches):<br>  <span class="hljs-keyword">if</span> m.distance &lt; <span class="hljs-number">0.7</span>*n.distance:<br>    mask_matches[i] = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br><br><span class="hljs-comment">#绘图</span><br>    <br>ret = cv2.drawMatchesKnn(img1, kp1, img2, kp2, matches, <span class="hljs-literal">None</span>,<br>                         matchColor=(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),singlePointColor=(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<br>                         matchesMask=mask_matches,flags=<span class="hljs-number">0</span>)<br>cv2.imshow(<span class="hljs-string">&#x27;result&#x27;</span>, ret)<br>cv2.waitKey()<br></code></pre></td></tr></table></figure><ul><li>最终FLANN匹配效果如下：</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231226172117341.png" class="" title="image-20231226172117341"><h2 id="11-11、图像查找-单应性矩阵"><a href="#11-11、图像查找-单应性矩阵" class="headerlink" title="11-11、图像查找 - 单应性矩阵"></a>11-11、图像查找 - 单应性矩阵</h2><blockquote><p><strong>什么是单应性？</strong></p><p>一种理解：平面的单应性被定义为从一个平面到另一个平面的投影映射。</p><p>另一种理解：单应性是当一张图是另一张图的一个透视畸变时，在两张图中寻找彼此的一种情况。</p></blockquote><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231226195320994.png" class="" title="image-20231226195320994"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><span class="hljs-comment">#图片读取</span><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_search.png&quot;</span>)<br>img2 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/特征匹配/opencv_orig.png&quot;</span>)<br><span class="hljs-comment">#灰度化</span><br>gray1 = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)<br>gray2 = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment">#初始化 SIFT</span><br>SIFT = cv2.SIFT_create()<br><span class="hljs-comment">#进行检测、并且生成描述子</span><br>kp1, des1 = SIFT.detectAndCompute(gray1, <span class="hljs-literal">None</span>)<br>kp2, des2 = SIFT.detectAndCompute(gray2, <span class="hljs-literal">None</span>)<br><span class="hljs-comment">#创建匹配器</span><br>index_params = <span class="hljs-built_in">dict</span>(algorithm = <span class="hljs-number">1</span>, trees = <span class="hljs-number">5</span>)<br>search_params = <span class="hljs-built_in">dict</span>(checks = <span class="hljs-number">50</span>)<br>flann = cv2.FlannBasedMatcher(index_params, search_params)<br><span class="hljs-comment">#进行匹配</span><br>matchs = flann.knnMatch(des1, des2, k=<span class="hljs-number">2</span>)<br><span class="hljs-comment">#组建一个通过了劳氏比率验证的匹配列表</span><br>good = []<br><span class="hljs-keyword">for</span> i, (m, n) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(matchs):<br>    <span class="hljs-keyword">if</span> m.distance &lt; <span class="hljs-number">0.7</span> * n.distance:<br>        good.append(m)<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good) &gt;= <span class="hljs-number">4</span>:<br>    srcPts = np.float32([kp1[m.queryIdx].pt <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> good]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    dstPts = np.float32([kp2[m.trainIdx].pt <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> good]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># 寻找单应性</span><br>    <span class="hljs-comment"># cv2.findHomography参数：</span><br>    <span class="hljs-comment"># srcPoints：源平面中点的坐标矩阵</span><br>    <span class="hljs-comment"># dstPoints：目标平面中点的坐标矩阵</span><br>    <span class="hljs-comment"># method：计算单应矩阵所使用的方法。不同的方法对应不同的参数，具体如下：RANSAC：基于RANSAC的鲁棒算法</span><br>    <span class="hljs-comment"># ransacReprojThreshold：将点对视为内点的最大允许重投影错误阈值（仅用于RANSAC和RHO方法）</span><br>    H, _ = cv2.findHomography(srcPts, dstPts, cv2.RANSAC, <span class="hljs-number">5.0</span>)<br><br>    <span class="hljs-comment"># 执行透射转换，取查询图像的矩形角点，并将其投影到场景中，从而画出边界</span><br>    h, w = img1.shape[:<span class="hljs-number">2</span>]<br>    pts = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, h-<span class="hljs-number">1</span>], [w-<span class="hljs-number">1</span>, h-<span class="hljs-number">1</span>], [w-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    dst = cv2.perspectiveTransform(pts, H)<br><br>    cv2.polylines(img2, [np.int32(dst)], <span class="hljs-literal">True</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the number of good is less than 4.&#x27;</span>)<br>    exit()<br><br><br>    <br>ret = cv2.drawMatchesKnn(img1, kp1, img2, kp2, [good], <span class="hljs-literal">None</span>)<br>cv2.imshow(<span class="hljs-string">&#x27;result&#x27;</span>, ret)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>上面的题目好难理解啊</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/image-20231226192711012.png" class="" title="image-20231226192711012"><h2 id="11-12、图像查找-概述"><a href="#11-12、图像查找-概述" class="headerlink" title="11-12、图像查找 - 概述"></a>11-12、图像查找 - 概述</h2><ul><li>主要将下面两图，进行拼接成一张图，核心步骤如下</li></ul><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/map1.png" class="" title="map1"><img src="/2023/12/19/OpenCV%E5%85%A5%E9%97%A8/day11-%E7%89%B9%E5%BE%81%E7%82%B9%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D/map2.png" class="" title="map2">]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day10-车辆检测</title>
    <link href="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/"/>
    <url>/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="10-1、什么是图像轮廓"><a href="#10-1、什么是图像轮廓" class="headerlink" title="10-1、什么是图像轮廓"></a>10-1、什么是图像轮廓</h2><blockquote><p><strong>图像轮廓：</strong>具有相同<font color="red">颜色或强度</font>的<font color="red">连续点</font>的曲线</p></blockquote><ul><li>为了检测的准确性，需要先对图像进行二值化或Canny操作。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># mode:检测模式</span><br><span class="hljs-comment"># RETR_EXTERNAL: 表示只检测外轮廓</span><br><span class="hljs-comment"># RETR_LIST: 检测轮廓不建立等级关系</span><br><span class="hljs-comment"># RETR_CCOMP: 每层最多2级</span><br><span class="hljs-comment"># RETR_TREE: 按树形存储轮廓【常用】</span><br><br><span class="hljs-comment"># method：返回点的数目</span><br><span class="hljs-comment"># CHAIN_APPROX_NONE：保存轮廓上的所有数据点</span><br><span class="hljs-comment"># CHAIN_APPROX_SIMPLE：返回轮廓的关键点，数据量较小</span><br>cv2.findContours(img, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_SIMPLE)<br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212190424610.png" class="" title="image-20231212190424610"><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212190433186.png" class="" title="image-20231212190433186"><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212190441543.png" class="" title="image-20231212190441543"><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212190450917.png" class="" title="image-20231212190450917"><h2 id="10-2、查找轮廓"><a href="#10-2、查找轮廓" class="headerlink" title="10-2、查找轮廓"></a>10-2、查找轮廓</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/contours1.jpeg&quot;</span>);<br><br>grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>ret, thresholdImg = cv2.threshold(grayImg, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br>contours, hierarchy = cv2.findContours(thresholdImg, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_SIMPLE)<br><span class="hljs-built_in">print</span>(contours)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>上面代码就可以找出三个轮廓，并且标记出关键的坐标点。</li></ul><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/contours1.jpeg" class="" title="contours1"><h2 id="10-3、绘制轮廓"><a href="#10-3、绘制轮廓" class="headerlink" title="10-3、绘制轮廓"></a>10-3、绘制轮廓</h2><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212195332873.png" class="" title="image-20231212195332873"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/contours1.jpeg&quot;</span>);<br><span class="hljs-comment"># 图片灰度化</span><br>grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment"># 图片二值化</span><br>ret, thresholdImg = cv2.threshold(grayImg, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><span class="hljs-comment"># 找出图片所有轮廓</span><br>contours, hierarchy = cv2.findContours(thresholdImg, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_SIMPLE)<br><span class="hljs-comment"># 绘制轮廓</span><br>newImg = cv2.drawContours(img,contours,-<span class="hljs-number">1</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">12</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;thresholdImg&quot;</span>, thresholdImg)<br>cv2.imshow(<span class="hljs-string">&quot;newImg&quot;</span>, newImg)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231212195857838.png" class="" title="image-20231212195857838"><h2 id="10-4、轮廓面积与周长计算"><a href="#10-4、轮廓面积与周长计算" class="headerlink" title="10-4、轮廓面积与周长计算"></a>10-4、轮廓面积与周长计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#计算轮廓面积，图片原本尺寸 346 × 436</span><br>area = cv2.contourArea(contours[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(area) <span class="hljs-comment">#打印值 345 * 435 = 150075.0</span><br><br><span class="hljs-comment">#计算轮廓周长，图片原本尺寸 346 × 436</span><br>length = cv2.arcLength(contours[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(length) <span class="hljs-comment">#打印值 (345 + 435)*2 = 1560.0</span><br></code></pre></td></tr></table></figure><h2 id="10-5、多边形逼近与凸包"><a href="#10-5、多边形逼近与凸包" class="headerlink" title="10-5、多边形逼近与凸包"></a>10-5、多边形逼近与凸包</h2><ul><li>多边形逼近</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/hand.png&quot;</span>);<br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/hand.png&quot;</span>);<br><span class="hljs-comment"># 图片灰度化</span><br>grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment"># 图片二值化</span><br>ret, thresholdImg = cv2.threshold(grayImg, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><span class="hljs-comment"># 查找轮廓</span><br>contours, hierarchy = cv2.findContours(thresholdImg, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)<br><span class="hljs-comment"># 原始路径</span><br>orignalContour = cv2.drawContours(img1, contours, <span class="hljs-number">0</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 多边形逼近</span><br>approxPolyImg = cv2.approxPolyDP(contours[<span class="hljs-number">0</span>], <span class="hljs-number">20</span>,<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 绘制轮廓</span><br>approxPolyImg = cv2.drawContours(img, [approxPolyImg], -<span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br><br>cv2.imshow(<span class="hljs-string">&quot;orignalContour&quot;</span>, orignalContour)<br>cv2.imshow(<span class="hljs-string">&quot;approxPolyImg&quot;</span>, approxPolyImg)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231213200533313.png" class="" title="image-20231213200533313"><ul><li>凸包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img1 = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/hand.png&quot;</span>);<br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/hand.png&quot;</span>);<br><span class="hljs-comment"># 图片灰度化</span><br>grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment"># 图片二值化</span><br>ret, thresholdImg = cv2.threshold(grayImg, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><span class="hljs-comment"># 查找轮廓</span><br>contours, hierarchy = cv2.findContours(thresholdImg, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)<br><span class="hljs-comment"># 原始路径</span><br>orignalContour = cv2.drawContours(img1, contours, <span class="hljs-number">0</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 凸包</span><br>convexHullImg = cv2.convexHull(contours[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 绘制轮廓</span><br>convexHullImg = cv2.drawContours(img, [convexHullImg], -<span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br><br>cv2.imshow(<span class="hljs-string">&quot;orignalContour&quot;</span>, orignalContour)<br>cv2.imshow(<span class="hljs-string">&quot;convexHullImg&quot;</span>, convexHullImg)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231213200652705.png" class="" title="image-20231213200652705"><h2 id="10-6、外接矩阵"><a href="#10-6、外接矩阵" class="headerlink" title="10-6、外接矩阵"></a>10-6、外接矩阵</h2><ul><li>最小外接矩阵【可以用于判断物体的旋转方向】</li><li>最大外接矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/轮廓/hello.jpeg&quot;</span>);<br><span class="hljs-comment"># 图片灰度化</span><br>grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><span class="hljs-comment"># 图片二值化</span><br>ret, thresholdImg = cv2.threshold(grayImg, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><span class="hljs-comment"># 查找轮廓</span><br>contours, hierarchy = cv2.findContours(thresholdImg, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)<br><br><span class="hljs-comment">#最小外接矩阵(获取的是带有旋转角度的矩阵)</span><br>minRotateRect = cv2.minAreaRect(contours[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#将带有旋转角度的矩阵转换成点坐标</span><br>minBox = cv2.boxPoints(minRotateRect)<br><span class="hljs-comment">#换算成整数</span><br>minBox = np.intp(minBox)<br>cv2.drawContours(img, [minBox], <span class="hljs-number">0</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#最大外接矩阵(是x，y，w，h)的元组</span><br>x,y,w,h = cv2.boundingRect(contours[<span class="hljs-number">1</span>])<br>cv2.rectangle(img, (x,y), (x+w,y+h), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231213202256829.png" class="" title="image-20231213202256829"><h2 id="10-8、视频加载"><a href="#10-8、视频加载" class="headerlink" title="10-8、视频加载"></a>10-8、视频加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br>cap = cv2.VideoCapture(<span class="hljs-string">&quot;./images/opencv/轮廓/video.mp4&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  ret , frame = cap.read()<br>  cv2.imshow(<span class="hljs-string">&quot;frame&quot;</span>, frame)  <br>  key = cv2.waitKey(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2<br><br></code></pre></td></tr></table></figure><h2 id="10-9、高斯去噪-去背景"><a href="#10-9、高斯去噪-去背景" class="headerlink" title="10-9、高斯去噪 + 去背景"></a>10-9、高斯去噪 + 去背景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment"># 读取视频</span><br>cap = cv2.VideoCapture(<span class="hljs-string">&quot;./images/opencv/轮廓/video.mp4&quot;</span>)<br><br><span class="hljs-comment"># 初始化背景减除器</span><br>background_subtractor = cv2.createBackgroundSubtractorMOG2()<br>background_subtractor2 = cv2.createBackgroundSubtractorMOG2()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  ret , frame = cap.read()<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret :<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-comment"># 背景灰度处理</span><br>  grayImg = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br><br>  <span class="hljs-comment"># 参照图</span><br>  grayImg1 = background_subtractor.apply(grayImg)<br>  cv2.imshow(<span class="hljs-string">&quot;grayImg1&quot;</span>, grayImg1)<br><br>  <span class="hljs-comment">#高斯去噪(去除高斯噪点)，使得大片物体更加平衡，内部噪点更少</span><br>  gausImg = cv2.GaussianBlur(grayImg,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<span class="hljs-number">5</span>)<br><br>  gausMask = background_subtractor2.apply(gausImg)<br>  cv2.imshow(<span class="hljs-string">&quot;gausMask&quot;</span>, gausMask)<br>  key = cv2.waitKey(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2<br><br></code></pre></td></tr></table></figure><ul><li>可以看到右图经过高斯模糊之后，更加平滑，去背景之后的视频也更少的噪点。</li></ul><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231214191615118.png" class="" title="image-20231214191615118"><h2 id="10-10、形态学处理"><a href="#10-10、形态学处理" class="headerlink" title="10-10、形态学处理"></a>10-10、形态学处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment"># 读取视频</span><br>cap = cv2.VideoCapture(<span class="hljs-string">&quot;./images/opencv/轮廓/video.mp4&quot;</span>)<br><span class="hljs-comment">#形态学kernel</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment"># 初始化背景减除器</span><br>background_subtractor = cv2.createBackgroundSubtractorMOG2()<br>background_subtractor2 = cv2.createBackgroundSubtractorMOG2()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  ret , frame = cap.read()<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret :<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-comment"># 背景灰度处理</span><br>  grayImg = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>  <span class="hljs-comment">#高斯去噪(去除高斯噪点)，使得大片物体更加平衡，内部噪点更少</span><br>  gausImg = cv2.GaussianBlur(grayImg,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<span class="hljs-number">5</span>)<br><br>  <span class="hljs-comment"># 参照图</span><br>  referMask = background_subtractor.apply(gausImg)<br>  cv2.imshow(<span class="hljs-string">&quot;referMask&quot;</span>, referMask)<br><br>  <span class="hljs-comment"># 腐蚀（去除大物体外的小物体）</span><br>  erodeImg = cv2.erode(gausImg, kernel, iterations=<span class="hljs-number">1</span>)<br>  <span class="hljs-comment"># 膨胀</span><br>  dilateImg = cv2.dilate(erodeImg, kernel, iterations=<span class="hljs-number">3</span>)<br>  <span class="hljs-comment"># 闭操作（去除大物体内的小物体）</span><br>  closingImg = cv2.morphologyEx(dilateImg, cv2.MORPH_CLOSE, kernel)<br><br>  gausMask = background_subtractor2.apply(closingImg)<br>  cv2.imshow(<span class="hljs-string">&quot;gausMask&quot;</span>, gausMask)<br>  key = cv2.waitKey(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2<br><br></code></pre></td></tr></table></figure><ul><li>可以看到经过形态学（腐蚀、膨胀、闭操作）之后，噪点更少了</li></ul><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231214193214711.png" class="" title="image-20231214193214711"><ul><li>接下来可以进行轮廓查找了(感觉效果还可以啊)</li><li><font color="red">修正前面存在的问题，高斯滤波之后，就需要去背景了，不能最后去背景</font></li><li>形态学操作，更适合对二值化以后的图像进行</li><li>但是依然存在①一些不是车的地方，被画上矩形了②有些并行的车辆被认为是一辆车了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment"># 读取视频</span><br>cap = cv2.VideoCapture(<span class="hljs-string">&quot;./images/opencv/轮廓/video.mp4&quot;</span>)<br><span class="hljs-comment">#形态学kernel</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment"># 初始化背景减除器</span><br>background_subtractor = cv2.createBackgroundSubtractorMOG2()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  ret , frame = cap.read()<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret :<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-comment"># 背景灰度处理</span><br>  grayImg = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>  <span class="hljs-comment">#高斯去噪(去除高斯噪点)，使得大片物体更加平衡，内部噪点更少</span><br>  gausImg = cv2.GaussianBlur(grayImg,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<span class="hljs-number">5</span>)<br>  <span class="hljs-comment"># 去背景</span><br>  gausMask = background_subtractor.apply(gausImg)<br>  <span class="hljs-comment"># 腐蚀（去除大物体外的小物体）</span><br>  erodeImg = cv2.erode(gausMask, kernel, iterations=<span class="hljs-number">1</span>)<br>  <span class="hljs-comment"># 膨胀</span><br>  dilateImg = cv2.dilate(erodeImg, kernel, iterations=<span class="hljs-number">3</span>)<br>  <span class="hljs-comment"># 闭操作（去除大物体内的小物体）</span><br>  closingImg = cv2.morphologyEx(dilateImg, cv2.MORPH_CLOSE, kernel)<br>  closingImg = cv2.morphologyEx(closingImg, cv2.MORPH_CLOSE, kernel)<br>  <span class="hljs-comment"># 查找轮廓</span><br>  contours, hieract = cv2.findContours(closingImg,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)<br>  <span class="hljs-comment"># 遍历轮廓</span><br>  <span class="hljs-keyword">for</span> contour <span class="hljs-keyword">in</span> contours:<br>    <span class="hljs-comment"># 找出外接矩阵</span><br>    x,y,w,h = cv2.boundingRect(contour)<br>    <span class="hljs-comment"># 画出矩形</span><br>    cv2.rectangle(frame, (x, y), (x+w, y+h), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>  <br>  cv2.imshow(<span class="hljs-string">&quot;frame&quot;</span>, frame)<br>  key = cv2.waitKey(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2<br><br></code></pre></td></tr></table></figure><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231214194758449.png" class="" title="image-20231214194758449"><h2 id="10-11、完整代码"><a href="#10-11、完整代码" class="headerlink" title="10-11、完整代码"></a>10-11、完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>min_w = <span class="hljs-number">90</span><br>min_h = <span class="hljs-number">90</span><br><br><span class="hljs-comment">#检测线的高度</span><br>line_high = <span class="hljs-number">550</span><br><br><span class="hljs-comment">#线的偏移</span><br>offset = <span class="hljs-number">7</span><br><br><span class="hljs-comment">#统计车的数量</span><br>carno =<span class="hljs-number">0</span><br><br><span class="hljs-comment">#存放有效车辆的数组</span><br>cars = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">center</span>(<span class="hljs-params">x, y, w, h</span>):<br>    x1 = <span class="hljs-built_in">int</span>(w/<span class="hljs-number">2</span>)<br>    y1 = <span class="hljs-built_in">int</span>(h/<span class="hljs-number">2</span>)<br>    cx = x + x1<br>    cy = y + y1<br><br>    <span class="hljs-keyword">return</span> cx, cy<br><br>cap = cv2.VideoCapture(<span class="hljs-string">&quot;./images/opencv/轮廓/video.mp4&quot;</span>)<br><br>bgsubmog = cv2.createBackgroundSubtractorMOG2()<br><br><span class="hljs-comment">#形态学kernel</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    ret, frame = cap.read()<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-literal">True</span>):     <br><br>        <span class="hljs-comment">#灰度</span><br>        cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<br>        <span class="hljs-comment">#去噪（高斯）</span><br>        blur = cv2.GaussianBlur(frame, (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>), <span class="hljs-number">5</span>)<br>        <span class="hljs-comment">#去背影</span><br>        mask = bgsubmog.apply(blur)<br><br>        <span class="hljs-comment">#腐蚀， 去掉图中小斑块</span><br>        erode = cv2.erode(mask, kernel) <br><br>        <span class="hljs-comment">#膨胀， 还原放大</span><br>        dilate = cv2.dilate(erode, kernel, iterations = <span class="hljs-number">3</span>)<br><br>        <span class="hljs-comment">#闭操作，去掉物体内部的小块</span><br>        close = cv2.morphologyEx(dilate, cv2.MORPH_CLOSE, kernel)<br>        close = cv2.morphologyEx(close, cv2.MORPH_CLOSE, kernel)<br><br>        cnts, h = cv2.findContours(close, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)<br>    <br>        <span class="hljs-comment">#画一条检测线</span><br>        cv2.line(frame, (<span class="hljs-number">10</span>, line_high), (<span class="hljs-number">1200</span>, line_high), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">3</span>)<br><br>        <span class="hljs-keyword">for</span> (i, c) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(cnts):<br>            (x,y,w,h) = cv2.boundingRect(c)<br><br>            <span class="hljs-comment">#对车辆的宽高进行判断</span><br>            <span class="hljs-comment">#以验证是否是有效的车辆</span><br>            isValid = ( w &gt;= min_w ) <span class="hljs-keyword">and</span> ( h &gt;= min_h) <br>            <span class="hljs-keyword">if</span>( <span class="hljs-keyword">not</span> isValid):<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-comment">#到这里都是有效的车 </span><br>            cv2.rectangle(frame, (x, y), (x+w, y+h), (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>            cpoint = center(x, y, w, h)<br>            cars.append(cpoint) <br>            cv2.circle(frame, (cpoint), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> cars:<br>                <span class="hljs-keyword">if</span>( (y &gt; line_high - offset) <span class="hljs-keyword">and</span> (y &lt; line_high + offset ) ):<br>                    carno +=<span class="hljs-number">1</span><br>                    cars.remove((x , y ))<br>                    <span class="hljs-built_in">print</span>(carno)<br>        <br>        cv2.putText(frame, <span class="hljs-string">&quot;Cars Count:&quot;</span> + <span class="hljs-built_in">str</span>(carno), (<span class="hljs-number">500</span>, <span class="hljs-number">60</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">2</span>, (<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), <span class="hljs-number">5</span>)<br>        cv2.imshow(<span class="hljs-string">&#x27;video&#x27;</span>, frame)<br>        <span class="hljs-comment">#cv2.imshow(&#x27;erode&#x27;, close)</span><br>    <br>    key = cv2.waitKey(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span>(key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>)):<br>        <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><ul><li>最终效果如下</li></ul><img src="/2023/12/12/OpenCV%E5%85%A5%E9%97%A8/day10-%E8%BD%A6%E8%BE%86%E6%A3%80%E6%B5%8B/image-20231217152911568.png" class="" title="image-20231217152911568"><h2 id="10-12、以上传统检测车辆的方案，存在的问题"><a href="#10-12、以上传统检测车辆的方案，存在的问题" class="headerlink" title="10-12、以上传统检测车辆的方案，存在的问题"></a>10-12、以上传统检测车辆的方案，存在的问题</h2><ul><li>车速过快，时间点内一闪而过，没踩到检测线，就没被统计到。</li><li>车速过慢，时机点内，踩到两次检测线，就会被重复统计。</li><li>两车并行通过的时候，可能会被误认为一辆大车</li><li>有时候树的摇动会被认定为一辆车</li></ul>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09-形态学</title>
    <link href="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/"/>
    <url>/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="9-1、形态学概述"><a href="#9-1、形态学概述" class="headerlink" title="9-1、形态学概述"></a>9-1、形态学概述</h2><blockquote><p><strong>形态学是干什么的：</strong>是一种图像处理技术，主要用于处理图像中的形状和结构。</p><p><strong>什么样的图片才能适用于形态学操作：</strong>这些处理方法基本是对<strong>二进制图像</strong>进行处理</p></blockquote><h2 id="9-2、全局图像二值化"><a href="#9-2、全局图像二值化" class="headerlink" title="9-2、全局图像二值化"></a>9-2、全局图像二值化</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br><span class="hljs-comment"># 先将图片灰度处理</span><br>grayImg = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><br><span class="hljs-comment"># 对灰度图像进行全局二值化处理</span><br>ret, dst = cv2.threshold(grayImg,<span class="hljs-number">127</span>,<span class="hljs-number">255</span>,cv2.THRESH_BINARY)<br><br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;grayImg&quot;</span>, grayImg)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231205200916886.png" class="" title="image-20231205200916886"><blockquote><p>全局二值化的缺点：由于光照不均匀以及阴影的存在，只有一个阈值会使得在阴影处的白色被二值化成黑色。</p></blockquote><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231205201944397.png" class="" title="image-20231205201944397"><h2 id="9-4、自适应阈值二值化"><a href="#9-4、自适应阈值二值化" class="headerlink" title="9-4、自适应阈值二值化"></a>9-4、自适应阈值二值化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/00/perspective.jpeg&quot;</span>)<br><span class="hljs-comment"># 先将图片灰度处理</span><br>grayImg = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><br><span class="hljs-comment"># 对灰度图像进行自适应二值化处理</span><br><span class="hljs-comment"># adaptiveMethod:计算阈值的方法</span><br><span class="hljs-comment"># ADAPTIVE_THRESH_MEAN_C:计算临近区域的平均值</span><br><span class="hljs-comment"># ADAPTIVE_THRESH_GAUSSIAN_C：高斯窗口加权平均值</span><br>dst = cv2.adaptiveThreshold(grayImg,<span class="hljs-number">255</span>,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>)<br><br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;grayImg&quot;</span>, grayImg)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到转出来的图片，噪点非常多</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231205202618795.png" class="" title="image-20231205202618795"><h2 id="9-5、腐蚀"><a href="#9-5、腐蚀" class="headerlink" title="9-5、腐蚀"></a>9-5、腐蚀</h2><blockquote><p><strong>腐蚀(Erosion)：</strong>腐蚀操作会使图像中物体的边界向内收缩。</p><p><strong>原理：</strong>它会通过在图像中滑动卷积核，将核的中心放在像素上，并检查与图像中对应区域的重叠。如果核下所有像素的值都是非零，则中心像素保持不变；否则，中心像素将被置位领。</p><p><strong>用处：</strong>腐蚀操作可以消除小物体，细化物体边界或分离物体。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/j.png&quot;</span>)<br><br><span class="hljs-comment">#进行腐蚀操作</span><br><span class="hljs-comment">#iterations是进行腐蚀次数</span><br>kernel = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>), np.uint8)<br>dst = cv2.erode(img,kernel,iterations=<span class="hljs-number">1</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到字变苗条了</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206105149849.png" class="" title="image-20231206105149849"><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206112818439.png" class="" title="image-20231206112818439"><h2 id="9-6、获取形态学卷积核"><a href="#9-6、获取形态学卷积核" class="headerlink" title="9-6、获取形态学卷积核"></a>9-6、获取形态学卷积核</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取形态学的卷积核</span><br><span class="hljs-comment"># cv2.MORPH_RECT: 矩形全1的卷积核</span><br><span class="hljs-comment"># cv2.MORPH_ELLIPSE: 椭圆形的卷积核</span><br><span class="hljs-comment"># cv2.MORPH_CROSS: 横竖中心交叉线都是1的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (<span class="hljs-number">7</span>,<span class="hljs-number">7</span>))<br><span class="hljs-built_in">print</span>(kernel)<br></code></pre></td></tr></table></figure><h2 id="9-7、膨胀"><a href="#9-7、膨胀" class="headerlink" title="9-7、膨胀"></a>9-7、膨胀</h2><blockquote><p><strong>膨胀(Dilation)：</strong>膨胀操作与腐蚀相反，它会扩张图像中物体的边界。</p><p><strong>原理：</strong>使用同样的卷积核，在图像中滑动核窗口，并根据核与图像重叠区域的像素值来更新中心像素。如果核下有至少一个前景像素，中心像素将被置位前景；否则，它保持不变。</p><p><strong>作用：</strong>膨胀操作有助于填充物体间的空隙、连接物体或增加物体大小。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/j.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">7</span>,<span class="hljs-number">7</span>))<br><span class="hljs-comment"># 进行膨胀操作</span><br>dst = cv2.dilate(img,kernel,iterations=<span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到下图的J变胖了</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206112245776.png" class="" title="image-20231206112245776"><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206112837471.png" class="" title="image-20231206112837471"><h2 id="9-8、开运算"><a href="#9-8、开运算" class="headerlink" title="9-8、开运算"></a>9-8、开运算</h2><blockquote><p><strong>开运算：</strong> 先腐蚀，后膨胀；先变小、后变大。</p><p><strong>实际用法：</strong>它可以用来消除小物体、平滑物体边界并打开物体之间的空隙。开运算能够去除噪声并保持整体的形状，对于去处较小的尖锐边缘或细小的物体非常有效。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/dotj.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>dst2 = cv2.morphologyEx(img, cv2.MORPH_OPEN,kernel)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到，周五的胡椒点被很好的去处了。</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206114122338.png" class="" title="image-20231206114122338"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/dotinj.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>dst2 = cv2.morphologyEx(img, cv2.MORPH_OPEN,kernel)<br><span class="hljs-comment"># # # 先进行腐蚀操作</span><br>erodeImg = cv2.erode(img,kernel,iterations=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># # # 后进行膨胀操作</span><br><span class="hljs-comment"># dst2 = cv2.dilate(dst1,kernel,iterations=1)</span><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;erodeImg&quot;</span>, erodeImg)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>思考为什么利用上面代码，处理下面这种图，进行先腐蚀后膨胀之后，噪点依然存在？</li><li>因为：腐蚀会把白色块缩小，黑色块变大，所以进行腐蚀后，里面的黑色块也变大了。</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206114944613.png" class="" title="image-20231206114944613"><h2 id="9-9、闭运算"><a href="#9-9、闭运算" class="headerlink" title="9-9、闭运算"></a>9-9、闭运算</h2><blockquote><p><strong>闭运算：</strong>先膨胀，后腐蚀；先变大，后变小。</p><p><strong>实际用法：</strong>它可以用来填充物体间的小空洞、平滑物体边界并闭合物体之间的断裂。闭运算有助于连接物体并保持其形状，对于填补小的空隙或连接中断的物体非常有用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/dotinj.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">9</span>,<span class="hljs-number">9</span>))<br>dst2 = cv2.morphologyEx(img, cv2.MORPH_CLOSE,kernel)<br><span class="hljs-comment"># 先进行腐蚀操作</span><br><span class="hljs-comment"># erodeImg = cv2.erode(img,kernel,iterations=1)</span><br><span class="hljs-comment"># 后进行膨胀操作</span><br>dilateImg = cv2.dilate(img,kernel,iterations=<span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dilateImg&quot;</span>, dilateImg)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>先膨胀，让白色块变大，黑色块变小。如果卷积核比较大，那么黑色点将会彻底消失。这时候在进行腐蚀恢复原有大小，就可以得到下面的效果。</li></ul><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231206115353803.png" class="" title="image-20231206115353803"><h2 id="9-10、形态学梯度"><a href="#9-10、形态学梯度" class="headerlink" title="9-10、形态学梯度"></a>9-10、形态学梯度</h2><blockquote><p><strong>梯度：</strong>它可以帮助检测图像中的边缘或轮廓</p><p><strong>原理：</strong>形态学梯度 &#x3D; 原图 - 腐蚀 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/j.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><span class="hljs-comment"># 进行形态学梯度处理（获取物体轮廓新方法，之前有高通滤波、Canny等操作）</span><br>dst2 = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel=kernel)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231207103257047.png" class="" title="image-20231207103257047"><h2 id="9-11、顶帽运算"><a href="#9-11、顶帽运算" class="headerlink" title="9-11、顶帽运算"></a>9-11、顶帽运算</h2><blockquote><p><strong>顶帽(TopHat)作用：</strong>用于突出图像中小细节或弱信号。例如在工业领域中用于检测游离表面上的微小缺陷。</p><p><strong>原理：</strong>顶帽 &#x3D; 原图 - 开运算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/dotj.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br><span class="hljs-comment">#开运算：先腐蚀后膨胀（消除细小物体）</span><br><span class="hljs-comment"># 进行顶帽操作（原图 - 开运算 = 开运算屏蔽的细小物体）</span><br>dst2 = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel=kernel)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231207104620148.png" class="" title="image-20231207104620148"><h2 id="9-12、黑帽运算"><a href="#9-12、黑帽运算" class="headerlink" title="9-12、黑帽运算"></a>9-12、黑帽运算</h2><blockquote><p><strong>黑帽作用：</strong>突出物体内部的纹理、缺陷或小目标物体的定位。</p><p><strong>原理：</strong> 黑帽 &#x3D; 原图 - 开运算；开运算 &#x3D; 先膨胀，后腐蚀。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = cv2.imread(<span class="hljs-string">&quot;./images/opencv/形态学/dotinj.png&quot;</span>)<br><span class="hljs-comment"># 获取形态学的卷积核</span><br>kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="hljs-number">7</span>,<span class="hljs-number">7</span>))<br><span class="hljs-comment">#闭运算：先膨胀后腐蚀（消除物体内部小细节）</span><br><span class="hljs-comment"># 进行黑帽操作（原图 - 闭运算），获取物体内部的小细节</span><br>dst2 = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel=kernel)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;dst2&quot;</span>, dst2)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/12/05/OpenCV%E5%85%A5%E9%97%A8/day09-%E5%BD%A2%E6%80%81%E5%AD%A6/image-20231207110336424.png" class="" title="image-20231207110336424"><h2 id="9-13、效果汇总【Important】"><a href="#9-13、效果汇总【Important】" class="headerlink" title="9-13、效果汇总【Important】"></a>9-13、效果汇总【Important】</h2><ul><li>开运算：先腐蚀后膨胀，去除大图形外的小图形</li><li>闭运算：先膨胀后腐蚀，去除大图形内的小图形</li><li>梯度：求图形的边缘</li><li>顶帽：原图减开运算，得到大图形外的小图形</li><li>黑帽：原图减闭运算，得到大图形内的小图形</li></ul>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-滤波器</title>
    <link href="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <url>/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="8-1、初识滤波器"><a href="#8-1、初识滤波器" class="headerlink" title="8-1、初识滤波器"></a>8-1、初识滤波器</h2><blockquote><p>滤波的作用：一幅图像通过<strong>滤波器</strong>得到另一幅图像。其中<strong>滤波</strong>的过程又称为<strong>卷积</strong>，<strong>滤波器</strong>又称为<strong>卷积核</strong>。</p><p>大白话解释：其实无非就是一个二维小窗口，对图像进行扫描，扫描过程中进行一个乘法操作，这个过程就是<strong>卷积</strong>。</p></blockquote><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231201161229029.png" class="" title="image-20231201161229029"><h2 id="8-2、卷积相关概念"><a href="#8-2、卷积相关概念" class="headerlink" title="8-2、卷积相关概念"></a>8-2、卷积相关概念</h2><blockquote><p><strong>卷积核：</strong>通常为奇数，比如3x3、 5x5、 7x7等</p><p>原因一：是因为增加padding的原因</p><p>原因二：保证锚点在中间，防止位置发生偏移的原因</p></blockquote><blockquote><p><strong>卷积核大小的影响：</strong></p><p>在深度学习中，卷积核越大，看到的信息（感受野）越多，</p><p>提取的特征越好，同时计算量也就越大。</p></blockquote><blockquote><p><strong>边界扩展：</strong>当卷积核大于1且不进行边界扩充，输出尺寸将相应缩小，</p><p>当卷积核以标准方式进行边界扩充，则输出数据的空间尺寸将与输出相等。</p></blockquote><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231201163035408.png" class="" title="image-20231201163035408"><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231201163045580.png" class="" title="image-20231201163045580"><h2 id="8-3、高通滤波VS低通滤波"><a href="#8-3、高通滤波VS低通滤波" class="headerlink" title="8-3、高通滤波VS低通滤波"></a>8-3、高通滤波VS低通滤波</h2><blockquote><p><strong>低通滤波(Low-pass Filtering)：</strong>运行低频信号通过并减少高频信号。他们消除或减弱图像中的高频噪声或细节，从而模糊图像并平滑图像中的细节。</p><p><strong>低通滤波作用：</strong>通常用于降低图像噪声、模糊化图像或进行图像压缩。</p><p><strong>低频信号：</strong>指的是变化率慢的部分，对应图像中较为平缓或缓慢变化的部分，比如大块的色彩、平滑区域。</p></blockquote><blockquote><p><strong>高通滤波(High-pass Filtering)：</strong>允许高频信号通过并减少低频信号。它们消除或减弱图像中的低频分量，强调或增强图像中的边缘、细节或高频细节。</p><p><strong>高通滤波作用：</strong>通常用于图像增加、边缘检测和去除图像中的基准分量。</p><p><strong>高频信号：</strong>指的是变化率快的部分，他们对图像中急剧变化的细节、边缘或纹理。</p></blockquote><h2 id="8-4、方盒滤波与均值滤波"><a href="#8-4、方盒滤波与均值滤波" class="headerlink" title="8-4、方盒滤波与均值滤波"></a>8-4、方盒滤波与均值滤波</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/opencv/00/dog.jpeg&quot;</span>)<br><span class="hljs-comment"># 均值滤波</span><br>dst = cv2.blur(dog, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>对比原图，可以发现经过均值滤波之后，图片的细节更加模糊了。</li></ul><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204192521416.png" class="" title="image-20231204192521416"><h2 id="8-5、高斯滤波"><a href="#8-5、高斯滤波" class="headerlink" title="8-5、高斯滤波"></a>8-5、高斯滤波</h2><blockquote><p><strong>高斯滤波：</strong> 又称为中型滤波，都是中间高两边低。中心点的值不是最大，但是权重最大的滤波。</p><p><strong>作用：</strong>主要用于解决<strong>高斯噪点</strong>问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/opencv/08/gaussian.png&quot;</span>)<br><br><span class="hljs-comment"># 高斯滤波，sigmaX表示模糊度</span><br>dst = cv2.GaussianBlur(dog, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), <span class="hljs-number">10</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>从下图可以发现，经过高斯滤波之后，高斯噪点不见了，但是边缘也变得模糊了。</li></ul><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204195552796.png" class="" title="image-20231204195552796"><h2 id="8-6、中值滤波"><a href="#8-6、中值滤波" class="headerlink" title="8-6、中值滤波"></a>8-6、中值滤波</h2><blockquote><p><strong>中值滤波：</strong> 假设有一组数据[144 5 678]，取中间的5作为卷积后的结果，就是中值滤波。</p><p><strong>作用：</strong> 对胡椒噪音效果明显</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/opencv/08/papper.png&quot;</span>)<br><br><span class="hljs-comment"># 中值滤波,处理胡椒噪音</span><br>dst = cv2.medianBlur(dog, <span class="hljs-number">5</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到下图的胡椒噪音都消失了，但是图的边缘部分，仍然被模糊了。</li></ul><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204200242857.png" class="" title="image-20231204200242857"><h2 id="8-7、双边滤波"><a href="#8-7、双边滤波" class="headerlink" title="8-7、双边滤波"></a>8-7、双边滤波</h2><blockquote><p><strong>背景：</strong>我们学习过高斯滤波和中值滤波，可以发现对图片的边缘部分，处理都不太好。</p><p><strong>双边滤波：</strong> ①可以保留边缘 ②同时可以对边缘内的前去与进行平滑处理。</p><p><strong>作用：</strong> 双边滤波最大的作用是进行<strong>美颜</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br><br><span class="hljs-comment"># 双边滤波，进行美颜</span><br>dst = cv2.bilateralFilter(dog, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">70</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>可以看到 lena 的脸部变得更加平滑了，皮肤褶皱消失嘞，而且边缘部分并未变得模糊。</li></ul><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204201141734.png" class="" title="image-20231204201141734"><h2 id="8-8、高通滤波"><a href="#8-8、高通滤波" class="headerlink" title="8-8、高通滤波"></a>8-8、高通滤波</h2><blockquote><p><strong>低通滤波：</strong>前面介绍的<strong>高斯滤波、中值滤波、双边滤波</strong> 都是低通滤波</p><p><strong>高通滤波：</strong>后面的 <strong>索贝尔算子、沙尔算子、拉普拉斯算子、Canny</strong> 都是高通滤波，都是用于<strong>边缘检测</strong>。</p></blockquote><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204202657155.png" class="" title="image-20231204202657155"><h2 id="8-11、边缘检测终极大法-Canny【重点掌握】"><a href="#8-11、边缘检测终极大法-Canny【重点掌握】" class="headerlink" title="8-11、边缘检测终极大法 Canny【重点掌握】"></a>8-11、边缘检测终极大法 Canny【重点掌握】</h2><blockquote><p>索贝尔算子、沙尔算子、拉普拉斯算子 都有一些不足，<strong>Canny是边缘检测的终极综合方案</strong>。</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-title">dog</span> = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br><br><span class="hljs-meta"># 边缘检测终极大法 Canny（前面两个数值越小，检测出来的边缘越多，也就是对边缘越敏感）</span><br><span class="hljs-title">dst</span> = cv2.<span class="hljs-type">Canny</span>(dog, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>)<br><br><span class="hljs-title">cv2</span>.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br><span class="hljs-title">cv2</span>.imshow(<span class="hljs-string">&quot;dst&quot;</span>, dst)<br><br><span class="hljs-title">cv2</span>.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204202237688.png" class="" title="image-20231204202237688"><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204202320475.png" class="" title="image-20231204202320475"><img src="/2023/11/30/OpenCV%E5%85%A5%E9%97%A8/day08-%E6%BB%A4%E6%B3%A2%E5%99%A8/image-20231204202323540.png" class="" title="image-20231204202323540">]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-图像基本变换</title>
    <link href="/2023/11/29/OpenCV%E5%85%A5%E9%97%A8/day07-%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E5%8F%98%E6%8D%A2/"/>
    <url>/2023/11/29/OpenCV%E5%85%A5%E9%97%A8/day07-%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="7-1、图像的放大与缩小"><a href="#7-1、图像的放大与缩小" class="headerlink" title="7-1、图像的放大与缩小"></a>7-1、图像的放大与缩小</h2><ul><li><code>cv2.resize</code>，主要参数注意点如下</li><li><code>dsize</code> 和 <code>fx、fy</code>   选择一种缩放方式即可，两者互斥</li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-built_in">print</span>(dog.shape)<br><br><span class="hljs-comment"># 以目标尺寸进行缩放</span><br><span class="hljs-comment"># new = cv2.resize(dog,(256,256))</span><br><span class="hljs-comment"># 以横纵坐标缩放比例进行缩放</span><br>new = cv2.resize(dog,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,fx=<span class="hljs-number">0.5</span>,fy=<span class="hljs-number">0.2</span>)<br><br><span class="hljs-built_in">print</span>(new.shape)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="7-2、图像的翻转"><a href="#7-2、图像的翻转" class="headerlink" title="7-2、图像的翻转"></a>7-2、图像的翻转</h2><ul><li><code>cv2.flip()</code></li><li><code>flipCode == 0</code> 上下翻转</li><li><code>flipCode &lt; 0</code> 上下+左右翻转</li><li><code>flipCode &gt; 0</code> 左右翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-built_in">print</span>(dog.shape)<br><br><span class="hljs-comment"># 以对目标进行翻转</span><br>new = cv2.flip(dog,<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(new.shape)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="7-3、图像的旋转"><a href="#7-3、图像的旋转" class="headerlink" title="7-3、图像的旋转"></a>7-3、图像的旋转</h2><ul><li><code>cv2.rotate(dog, cv2.ROTATE_90_CLOCKWISE)</code></li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-built_in">print</span>(dog.shape)<br><br><span class="hljs-comment"># 以对目标进行旋转</span><br><span class="hljs-keyword">new</span> = cv2.rotate(dog, cv2.ROTATE_90_CLOCKWISE)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">new</span>.shape)<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, <span class="hljs-keyword">new</span>)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="7-4、图像的仿射变换-平移"><a href="#7-4、图像的仿射变换-平移" class="headerlink" title="7-4、图像的仿射变换 - 平移"></a>7-4、图像的仿射变换 - 平移</h2><blockquote><p><strong>仿射变换：</strong>就是对图像的平移、缩放、旋转的总称</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-comment">#创建平移矩阵</span><br>m = np.float32([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">200</span>]])<br><span class="hljs-comment"># 以对目标进行平移</span><br>new = cv2.warpAffine(dog, m, (dogy, dogx))<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/29/OpenCV%E5%85%A5%E9%97%A8/day07-%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E5%8F%98%E6%8D%A2/image-20231130105407211.png" class="" title="image-20231130105407211"><h2 id="7-5、图像的仿射变换-获取变换矩阵方式一"><a href="#7-5、图像的仿射变换-获取变换矩阵方式一" class="headerlink" title="7-5、图像的仿射变换 - 获取变换矩阵方式一"></a>7-5、图像的仿射变换 - 获取变换矩阵方式一</h2><ul><li>在知道 <code>中心点、角度、缩放比例</code> 这些参数的情况下，使用 <code>cv2.getRotationMatrix2D()</code> 进行获取变换矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-comment">#获取变换矩阵 - 缩放旋转</span><br>m = cv2.getRotationMatrix2D((dogx / <span class="hljs-number">2</span>, dogy/<span class="hljs-number">2</span>),<span class="hljs-number">15</span>,<span class="hljs-number">0.5</span>)<br><span class="hljs-comment"># 以对目标进行仿射变换</span><br>new = cv2.warpAffine(dog, m, (dogy, dogx))<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="7-6、图像的仿射变换-获取变换矩阵方式二"><a href="#7-6、图像的仿射变换-获取变换矩阵方式二" class="headerlink" title="7-6、图像的仿射变换 - 获取变换矩阵方式二"></a>7-6、图像的仿射变换 - 获取变换矩阵方式二</h2><ul><li>在知道某些点，变换到另外一些点的情况下，用<code>cv2.getAffineTransform(src, dst)</code>获取变换矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>dog = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>dogx, dogy, dogChannel = dog.shape<br><br><span class="hljs-comment">#获取变换矩阵 - 缩放旋转</span><br>src = np.float32([[<span class="hljs-number">100</span>,<span class="hljs-number">100</span>],[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">100</span>]])<br>dst = np.float32([[<span class="hljs-number">200</span>,<span class="hljs-number">200</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">300</span>],[<span class="hljs-number">300</span>,<span class="hljs-number">200</span>]])<br>m = cv2.getAffineTransform(src, dst)<br><span class="hljs-comment"># 以对目标进行仿射变换</span><br>new = cv2.warpAffine(dog, m, (dogy, dogx))<br><br>cv2.imshow(<span class="hljs-string">&quot;dog&quot;</span>, dog)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/29/OpenCV%E5%85%A5%E9%97%A8/day07-%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E5%8F%98%E6%8D%A2/image-20231130135505493.png" class="" title="image-20231130135505493"><h2 id="7-7、图像的透视变换"><a href="#7-7、图像的透视变换" class="headerlink" title="7-7、图像的透视变换"></a>7-7、图像的透视变换</h2><ul><li>感觉透视变换，就是截取图中部分区域，将其展开，有点像改变一个角度看待。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>zuoye = cv2.imread(<span class="hljs-string">&quot;./images/zuoye.png&quot;</span>)<br>x, y, channel = zuoye.shape<br><br><span class="hljs-comment">#获取透视变换矩阵（需要有四个角落的点） </span><br>src = np.float32([[<span class="hljs-number">180</span>,<span class="hljs-number">50</span>],[<span class="hljs-number">870</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">174</span>,<span class="hljs-number">950</span>],[<span class="hljs-number">854</span>,<span class="hljs-number">1100</span>]])<br>dst = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">900</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1100</span>],[<span class="hljs-number">900</span>,<span class="hljs-number">1100</span>]])<br>m = cv2.getPerspectiveTransform(src, dst)<br><br><span class="hljs-comment"># 以对目标进行透视变换</span><br>new = cv2.warpPerspective(zuoye, m, (<span class="hljs-number">900</span>,<span class="hljs-number">1100</span>))<br><br>cv2.imshow(<span class="hljs-string">&quot;zuoye&quot;</span>, zuoye)<br>cv2.imshow(<span class="hljs-string">&quot;new&quot;</span>, new)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>就像下图，用户拍摄角度可能导致图片上面的数学算式不整齐，经过透视变换，就可以变得整齐了</li><li>后续可以通过分列分行处理，将这些算式进行切割</li></ul><img src="/2023/11/29/OpenCV%E5%85%A5%E9%97%A8/day07-%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E5%8F%98%E6%8D%A2/image-20231201155617006.png" class="" title="image-20231201155617006">]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-矩阵算术与位运算</title>
    <link href="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="6-1、图像的加法运算"><a href="#6-1、图像的加法运算" class="headerlink" title="6-1、图像的加法运算"></a>6-1、图像的加法运算</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>orgImg = cv2.imread(<span class="hljs-string">&quot;./images/dog.png&quot;</span>)<br><br>imgA = np.ones(orgImg.shape, dtype=np.uint8) * <span class="hljs-number">50</span><br><br>imgA = cv2.add(orgImg,imgA)<br><br>cv2.imshow(<span class="hljs-string">&#x27;orgImg&#x27;</span>,orgImg)<br>cv2.imshow(<span class="hljs-string">&#x27;imgA&#x27;</span>,imgA)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><ul><li>如下图所示，加法之后，对图片有一种<strong>提亮度</strong>的效果</li></ul><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231128110601562.png" class="" title="image-20231128110601562"><h2 id="6-2、图像的减法运算-x2F-乘法-x2F-除法"><a href="#6-2、图像的减法运算-x2F-乘法-x2F-除法" class="headerlink" title="6-2、图像的减法运算&#x2F;乘法&#x2F;除法"></a>6-2、图像的减法运算&#x2F;乘法&#x2F;除法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>orgImg = cv2.imread(<span class="hljs-string">&quot;./images/dog.png&quot;</span>)<br><br>imgA = np.ones(orgImg.shape, dtype=np.uint8) * <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 减法</span><br>imgA = cv2.subtract(orgImg, imgA)<br><span class="hljs-comment"># 乘法</span><br><span class="hljs-comment"># imgA = cv2.multiply(orgImg,imgA)</span><br><span class="hljs-comment"># 除法</span><br><span class="hljs-comment"># imgA = cv2.divide(orgImg,imgA)</span><br><br>cv2.imshow(<span class="hljs-string">&#x27;orgImg&#x27;</span>,orgImg)<br>cv2.imshow(<span class="hljs-string">&#x27;imgA&#x27;</span>,imgA)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><ul><li>如图所示，减法对图像有一种<strong>加深加暗</strong>的效果。</li><li>除法就是倍数的减法，乘法就是倍数的加法。</li></ul><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231128110804701.png" class="" title="image-20231128110804701"><h2 id="6-3、图像的熔合"><a href="#6-3、图像的熔合" class="headerlink" title="6-3、图像的熔合"></a>6-3、图像的熔合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>imgLena = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br>imgBean = cv2.imread(<span class="hljs-string">&quot;./images/bean.png&quot;</span>)<br><br><span class="hljs-built_in">print</span>(imgLena.shape)<br><span class="hljs-built_in">print</span>(imgBean.shape)<br><br>result = cv2.addWeighted(imgLena, <span class="hljs-number">0.7</span>, imgBean, <span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;result&quot;</span>, result)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231129163841941.png" class="" title="image-20231129163841941"><h2 id="6-4、位运算-非操作"><a href="#6-4、位运算-非操作" class="headerlink" title="6-4、位运算 - 非操作"></a>6-4、位运算 - 非操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.full((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">100</span>, np.uint8)<br>result = cv2.bitwise_not(img)<br><br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-built_in">print</span>(result)<br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)<br>cv2.imshow(<span class="hljs-string">&quot;result&quot;</span>, result)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>输出结果如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">[[[<span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span>]<br>  [<span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span>]]<br><br> [[<span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span>]<br>  [<span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span>]]]<br>[[[<span class="hljs-number">155</span> <span class="hljs-number">155</span> <span class="hljs-number">155</span>]<br>  [<span class="hljs-number">155</span> <span class="hljs-number">155</span> <span class="hljs-number">155</span>]]<br><br> [[<span class="hljs-number">155</span> <span class="hljs-number">155</span> <span class="hljs-number">155</span>]<br>  [<span class="hljs-number">155</span> <span class="hljs-number">155</span> <span class="hljs-number">155</span>]]]<br></code></pre></td></tr></table></figure><ul><li><p>100的二进制位是 <code>0110 0100</code></p></li><li><p>155的二进制位是 <code>1001 1011</code></p></li></ul><h2 id="6-5、位运算-与操作"><a href="#6-5、位运算-与操作" class="headerlink" title="6-5、位运算 - 与操作"></a>6-5、位运算 - 与操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>imgA = np.full((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">3</span>), <span class="hljs-number">255</span>, np.uint8)<br>imgA[<span class="hljs-number">10</span>:<span class="hljs-number">110</span>,<span class="hljs-number">10</span>:<span class="hljs-number">110</span>] = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br><br>imgB = np.full((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">3</span>), <span class="hljs-number">255</span>, np.uint8)<br>imgB[<span class="hljs-number">60</span>:<span class="hljs-number">160</span>,<span class="hljs-number">60</span>:<span class="hljs-number">160</span>] = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br>result = cv2.bitwise_and(imgA, imgB)<br><br>cv2.imshow(<span class="hljs-string">&quot;imgA&quot;</span>, imgA)<br>cv2.imshow(<span class="hljs-string">&quot;imgB&quot;</span>, imgB)<br>cv2.imshow(<span class="hljs-string">&quot;result&quot;</span>, result)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231129172210265.png" class="" title="image-20231129172210265"><h2 id="6-6、位运算-或操作、异或操作"><a href="#6-6、位运算-或操作、异或操作" class="headerlink" title="6-6、位运算 - 或操作、异或操作"></a>6-6、位运算 - 或操作、异或操作</h2><ul><li>或操作</li></ul><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231129172450524.png" class="" title="image-20231129172450524"><ul><li>异或操作</li></ul><img src="/2023/11/28/OpenCV%E5%85%A5%E9%97%A8/day06-%E7%9F%A9%E9%98%B5%E7%AE%97%E6%9C%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/image-20231129172614622.png" class="" title="image-20231129172614622"><h2 id="6-7、作业-为图片添加log水印"><a href="#6-7、作业-为图片添加log水印" class="headerlink" title="6-7、作业 - 为图片添加log水印"></a>6-7、作业 - 为图片添加log水印</h2><ul><li>感觉下面的代码有点问题，mask如果能准确知道的话，我直接把水印画到原图上不就行了嘛</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.引入一幅图片</span><br><span class="hljs-comment"># 2.要有一个LOGO，自己画</span><br><span class="hljs-comment"># 3.计算图片在什么地方添加，添加的地方变成黑色</span><br><span class="hljs-comment"># 4.利用add，将log与图叠加到一起</span><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment">#先绘制logo</span><br>imgA = np.zeros(shape=(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),dtype=np.uint8)<br>imgA[<span class="hljs-number">20</span>:<span class="hljs-number">60</span>,<span class="hljs-number">20</span>:<span class="hljs-number">60</span>] = (<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>imgA[<span class="hljs-number">40</span>:<span class="hljs-number">80</span>,<span class="hljs-number">40</span>:<span class="hljs-number">80</span>] = (<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br><br><br><br>maskImg = np.zeros(shape=(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>),dtype=np.uint8)<br><span class="hljs-built_in">print</span>(maskImg)<br>maskImg[<span class="hljs-number">20</span>:<span class="hljs-number">60</span>,<span class="hljs-number">20</span>:<span class="hljs-number">60</span>] = (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)<br>maskImg[<span class="hljs-number">40</span>:<span class="hljs-number">80</span>,<span class="hljs-number">40</span>:<span class="hljs-number">80</span>] = (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)<br>maskImg = cv2.bitwise_not(maskImg)<br><br>orgImg = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br><br>captureImg = orgImg[<span class="hljs-number">200</span>:<span class="hljs-number">300</span>,<span class="hljs-number">200</span>:<span class="hljs-number">300</span>]<br><br><span class="hljs-comment"># print(captureImg.shape)</span><br>mergeImg = cv2.bitwise_and(maskImg,captureImg)<br><br>mergeImg = cv2.bitwise_or(mergeImg, imgA)<br><br>orgImg[<span class="hljs-number">200</span>:<span class="hljs-number">300</span>,<span class="hljs-number">200</span>:<span class="hljs-number">300</span>] = mergeImg<br><br>cv2.imshow(<span class="hljs-string">&quot;maskImg&quot;</span>, orgImg)<br><span class="hljs-comment"># cv2.imshow(&quot;mergeImg&quot;, mergeImg)</span><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day05-基本图形绘制</title>
    <link href="/2023/11/27/OpenCV%E5%85%A5%E9%97%A8/day05-%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    <url>/2023/11/27/OpenCV%E5%85%A5%E9%97%A8/day05-%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="5-1、绘制直线"><a href="#5-1、绘制直线" class="headerlink" title="5-1、绘制直线"></a>5-1、绘制直线</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br><span class="hljs-comment"># xxx.line(img, 起始点, 结束点, 颜色, 线粗, 锯齿)</span><br><span class="hljs-comment"># 从 (0, 0) 画一条  (200, 200)的蓝色线段</span><br>cv2.line(img, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">200</span>, <span class="hljs-number">200</span>), (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><h2 id="5-2、绘制矩形、圆形"><a href="#5-2、绘制矩形、圆形" class="headerlink" title="5-2、绘制矩形、圆形"></a>5-2、绘制矩形、圆形</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br><span class="hljs-comment"># xxx.rectangle(img, 起始点, 结束点, 颜色, 线粗)</span><br><span class="hljs-comment"># 从 (10,10) 到(110,110) 画一个 矩形</span><br>cv2.rectangle(img, (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), (<span class="hljs-number">100</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># xxx.rectangle(img, 中心点, 半径, 颜色, 填充方式</span><br><span class="hljs-comment"># 以 (100,100) 为中心，画一个半径为50的红色圆</span><br>cv2.circle(img,(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>),<span class="hljs-number">50</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><h2 id="5-3、绘制椭圆"><a href="#5-3、绘制椭圆" class="headerlink" title="5-3、绘制椭圆"></a>5-3、绘制椭圆</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br><br><span class="hljs-comment"># xxx.ellipse(img, 中心点, 椭圆对应的矩形, 角度, 起始角度, 结束角度, 颜色)</span><br>cv2.ellipse(img,(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">360</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><h2 id="5-4、绘制多边型"><a href="#5-4、绘制多边型" class="headerlink" title="5-4、绘制多边型"></a>5-4、绘制多边型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br><br><span class="hljs-comment"># xxx.ellipse(img,点集, 是否闭合, 颜色)</span><br>cv2.polylines(img, np.array([[(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>), (<span class="hljs-number">200</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">180</span>, <span class="hljs-number">50</span>), (<span class="hljs-number">200</span>, <span class="hljs-number">100</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">180</span>)]], dtype=np.int32), <span class="hljs-literal">True</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><ul><li>一定要注意，点集的数据类型一定要是 <code>np.int32</code> 类型</li></ul><h2 id="5-5、绘制文本"><a href="#5-5、绘制文本" class="headerlink" title="5-5、绘制文本"></a>5-5、绘制文本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br><br><span class="hljs-comment"># xxx.ellipse(img,文字内容, 坐标, 字体，缩放，颜色)</span><br>cv2.putText(img, <span class="hljs-string">&#x27;Hello World&#x27;</span>, (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>),cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,<span class="hljs-number">1</span>,(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><ul><li>但是显示中文会有问题</li></ul><img src="/2023/11/27/OpenCV%E5%85%A5%E9%97%A8/day05-%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/image-20231128093527414.png" class="" title="image-20231128093527414"><h2 id="5-6、有空TODO-实现鼠标拖动绘制圆、矩形、线条"><a href="#5-6、有空TODO-实现鼠标拖动绘制圆、矩形、线条" class="headerlink" title="5-6、有空TODO: 实现鼠标拖动绘制圆、矩形、线条"></a>5-6、有空TODO: 实现鼠标拖动绘制圆、矩形、线条</h2>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day04-基础知识-色彩空间-numpy-mat</title>
    <link href="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/"/>
    <url>/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1、常见的色彩空间表示方法"><a href="#4-1、常见的色彩空间表示方法" class="headerlink" title="4-1、常见的色彩空间表示方法"></a>4-1、常见的色彩空间表示方法</h2><ul><li><strong>RGB：</strong>人眼的色彩空间</li><li><strong>BGR：</strong>OpenCV<strong>默认使用的色彩空间</strong>，因为BGR是Windows位图文件的默认颜色顺序</li><li><strong>HSV</strong>&#x2F;HSB&#x2F;HSL：OpenCV中只用到<strong>HSV - Hue(色调、色相) Saturation(饱和度、色彩纯净度) Value(明度)</strong></li><li><strong>YUV：</strong>常用于视频编解码中</li></ul><h2 id="4-2、为什么图像处理通常使用HSV色彩空间"><a href="#4-2、为什么图像处理通常使用HSV色彩空间" class="headerlink" title="4-2、为什么图像处理通常使用HSV色彩空间"></a>4-2、为什么图像处理通常使用HSV色彩空间</h2><blockquote><p><strong>RGB颜色空间</strong>：是图像处理中最基本、最常用、面向硬件的颜色空间，最容易理解。</p><p><strong>RGB的局限性</strong>：RGB颜色空间利用颜色三个分量的线性组合来表示颜色，任何颜色都与这三个分量有关系，而且这三个分量是高度相关的，所以连续变化颜色时并不直观。自然环境下获取的图像容易受自然光照、遮挡和阴影等情况的影响，即对亮度比较敏感。而RGB颜色空间的三个分量都与亮度密切相关，即只要亮度改变，三个分量都会随之相应地改变，而没有一种更直观的方式来表达。<strong>所以RTB颜色空间适合于显示系统，却并不适合于图像系统。</strong></p></blockquote><blockquote><p><strong>HSV颜色空间：</strong>在图像处理中使用比较多的是HSV颜色空间，比RGB更容易跟踪某种颜色的物体，常用于分割指定颜色的物理。</p></blockquote><h2 id="4-3、实战OpenCV色彩空间转换"><a href="#4-3、实战OpenCV色彩空间转换" class="headerlink" title="4-3、实战OpenCV色彩空间转换"></a>4-3、实战OpenCV色彩空间转换</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>MyWinName = <span class="hljs-string">&#x27;MyWin&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">v</span>):<br>  <span class="hljs-built_in">print</span>(v)<br><br><span class="hljs-comment">#创建窗口</span><br>cv2.namedWindow(MyWinName,cv2.WINDOW_NORMAL)<br>cv2.resizeWindow(MyWinName, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-comment">#创建trackbar</span><br>colorspaces = [cv2.COLOR_BGR2RGBA, cv2.COLOR_BGR2GRAY, cv2.COLOR_BGR2HSV_FULL,cv2.COLOR_BGR2YUV]<br>cv2.createTrackbar(<span class="hljs-string">&#x27;colorBar&#x27;</span>, MyWinName,<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(colorspaces) - <span class="hljs-number">1</span>,callback)<br><br>img = cv2.imread(<span class="hljs-string">&#x27;./images/lenna.png&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  colorIndex = cv2.getTrackbarPos(<span class="hljs-string">&#x27;colorBar&#x27;</span>, MyWinName)<br><br>  <span class="hljs-comment">#颜色空间转换API</span><br>  cvt_img = cv2.cvtColor(img, colorspaces[colorIndex])<br>  cv2.imshow(MyWinName, cvt_img)<br>  cv2.resizeWindow(MyWinName, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br>  <br>  key = cv2.waitKey(<span class="hljs-number">10</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><h2 id="4-4、图像操作的基石-Numpy，常用的矩阵创建方式"><a href="#4-4、图像操作的基石-Numpy，常用的矩阵创建方式" class="headerlink" title="4-4、图像操作的基石 Numpy，常用的矩阵创建方式"></a>4-4、图像操作的基石 Numpy，常用的矩阵创建方式</h2><ul><li>OpenCV 中用到的矩阵都要转换成 Numpy 数组</li><li>Numpy 是一个经过高度优化的 Python 数值库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>c0 = np.zeros((<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>),np.uint8) <span class="hljs-comment">#全0矩阵</span><br>c1 = np.ones((<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>),np.uint8)  <span class="hljs-comment">#全1矩阵</span><br>c2 = np.full((<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>),<span class="hljs-number">255</span>,np.uint8)   <span class="hljs-comment">#自定义值都是&#x27;255&#x27;的矩阵</span><br>c3 = np.identity(<span class="hljs-number">5</span>)   <span class="hljs-comment">#对角线为1的，其他为0，5x5矩阵（正方形）</span><br>c4 = np.eye(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,k=<span class="hljs-number">1</span>)   <span class="hljs-comment">#从x=1的位置开始对角线为1的，其他为0，5x5矩阵</span><br><span class="hljs-built_in">print</span>(c4)<br></code></pre></td></tr></table></figure><h2 id="4-5、numpy矩阵的检索与赋值"><a href="#4-5、numpy矩阵的检索与赋值" class="headerlink" title="4-5、numpy矩阵的检索与赋值"></a>4-5、numpy矩阵的检索与赋值</h2><ul><li>实现画一个斜线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>MyWinName = <span class="hljs-string">&#x27;MyWinName&#x27;</span><br><br>img = np.full((<span class="hljs-number">200</span>,<span class="hljs-number">600</span>,<span class="hljs-number">3</span>),<span class="hljs-number">255</span>,np.uint8)<br><br><span class="hljs-comment"># 矩阵赋值</span><br>count = <span class="hljs-number">100</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">200</span>:<br>  img[count,count] = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>  count = count + <span class="hljs-number">1</span><br><br>cv2.imshow(MyWinName,img)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  key = cv2.waitKey(<span class="hljs-number">10</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><img src="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/image-20231124111109698.png" class="" title="image-20231124111109698"><h2 id="4-6、numpy获取子矩阵ROI"><a href="#4-6、numpy获取子矩阵ROI" class="headerlink" title="4-6、numpy获取子矩阵ROI"></a>4-6、numpy获取子矩阵ROI</h2><ul><li><strong>ROI：Range Of Image</strong></li><li>从(30,30)这个点开始，画一个80*40的红色矩形</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>MyWinName = <span class="hljs-string">&#x27;MyWinName&#x27;</span><br><br>img = np.full((<span class="hljs-number">200</span>,<span class="hljs-number">600</span>,<span class="hljs-number">3</span>),<span class="hljs-number">255</span>,np.uint8)<br><br><span class="hljs-comment"># 从(30,30)这个点开始，画一个80*40的红色矩形</span><br>img[<span class="hljs-number">30</span>:<span class="hljs-number">110</span>,<span class="hljs-number">30</span>:<span class="hljs-number">110</span>] = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>]<br><br>cv2.imshow(MyWinName,img)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  key = cv2.waitKey(<span class="hljs-number">10</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><img src="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/image-20231124111749374.png" class="" title="image-20231124111749374"><h2 id="4-7、OpenCV重要结构体Mat"><a href="#4-7、OpenCV重要结构体Mat" class="headerlink" title="4-7、OpenCV重要结构体Mat"></a>4-7、OpenCV重要结构体Mat</h2><ul><li><strong>Mat其实就是一个矩阵</strong>，主要属性如下：</li><li><strong>dims：</strong>维度</li><li><strong>rows：</strong>行数</li><li><strong>cols：</strong>列数</li><li><strong>depth：</strong>像素的位深度</li><li><strong>channels：</strong>通道数，RBG是3</li><li><strong>size：</strong>矩阵大小</li><li><strong>type：</strong>是几个关键参数的集合 dep+dt+chs CV_8UC3</li><li><strong>data：</strong>存放的数据</li></ul><h2 id="4-8、Mat的深拷贝和浅拷贝"><a href="#4-8、Mat的深拷贝和浅拷贝" class="headerlink" title="4-8、Mat的深拷贝和浅拷贝"></a>4-8、Mat的深拷贝和浅拷贝</h2><ul><li><code>浅拷贝</code>：只拷贝了Mat的Header部分，共享了data指针指向的数据。【基本所有语言的默认拷贝都是浅拷贝】</li><li><code>深拷贝</code>：拷贝了Mat的Header和data部分，两个对象相互不影响。【深拷贝需要显示调用某些指定函数】</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">cv</span>::<span class="hljs-variable">Mat</span>:<span class="hljs-function"><span class="hljs-title">clone</span>()</span><br><span class="hljs-variable">cv</span>::<span class="hljs-variable">Mat</span>::<span class="hljs-function"><span class="hljs-title">copyTo</span>()</span><br><span class="hljs-variable">xxx.copy</span>()<br></code></pre></td></tr></table></figure><h2 id="4-9、思考如何验证是深拷贝还是浅拷贝呢？"><a href="#4-9、思考如何验证是深拷贝还是浅拷贝呢？" class="headerlink" title="4-9、思考如何验证是深拷贝还是浅拷贝呢？"></a>4-9、思考如何验证是深拷贝还是浅拷贝呢？</h2><ul><li>浅拷贝：改变B，但是A也受到影响了。</li></ul><img src="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/image-20231127100025921.png" class="" title="image-20231127100025921"><ul><li>深拷贝：B的改变，不会影响A</li></ul><img src="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/image-20231127100049138.png" class="" title="image-20231127100049138"><h2 id="4-11、Mat常用的属性"><a href="#4-11、Mat常用的属性" class="headerlink" title="4-11、Mat常用的属性"></a>4-11、Mat常用的属性</h2><ul><li>Image.shape</li><li>Image.size</li><li>Image.dtype</li><li>发现在vscode中，<code>紫色立方体</code>：方法(function)，<code>扳手</code>：对象的属性(Property)。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>imgA = cv2.imread(<span class="hljs-string">&quot;./images/lenna.png&quot;</span>)<br><br><span class="hljs-comment">#shapre属性中包括了三个信息</span><br><span class="hljs-comment">#高度、长度、通道数</span><br><span class="hljs-built_in">print</span>(imgA.shape) <span class="hljs-comment">#(512, 512, 3)</span><br><br><span class="hljs-comment">#图像占用多大空间</span><br><span class="hljs-comment">#size = 高度 * 宽度 * 通道数</span><br><span class="hljs-built_in">print</span>(imgA.size) <span class="hljs-comment">#786432</span><br><br><span class="hljs-comment">#图像中每个元素的位深度</span><br><span class="hljs-built_in">print</span>(imgA.dtype) <span class="hljs-comment">#uint8</span><br><br>imgA.copy<br></code></pre></td></tr></table></figure><h2 id="4-12、通道的分割与合并"><a href="#4-12、通道的分割与合并" class="headerlink" title="4-12、通道的分割与合并"></a>4-12、通道的分割与合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.zeros(shape=(<span class="hljs-number">200</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>), dtype=np.uint8)<br><br>b,g,r = cv2.split(img)<br><br><span class="hljs-comment"># cv2.imshow(&#x27;img&#x27;, img)</span><br>b[<span class="hljs-number">10</span>:<span class="hljs-number">100</span>, <span class="hljs-number">10</span>:<span class="hljs-number">100</span>] = <span class="hljs-number">150</span><br>g[<span class="hljs-number">10</span>:<span class="hljs-number">100</span>, <span class="hljs-number">10</span>:<span class="hljs-number">100</span>] = <span class="hljs-number">200</span><br><br>img2 = cv2.merge((b, g, r))<br><br>cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>,img)<br>cv2.imshow(<span class="hljs-string">&#x27;img2&#x27;</span>,img2)<br>cv2.imshow(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br>cv2.imshow(<span class="hljs-string">&#x27;g&#x27;</span>,g)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><img src="/2023/11/23/OpenCV%E5%85%A5%E9%97%A8/day04-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4-numpy-mat/image-20231127142116926.png" class="" title="image-20231127142116926"><h2 id="4-13、TODO：Python-数据类型：序列（Sequence）"><a href="#4-13、TODO：Python-数据类型：序列（Sequence）" class="headerlink" title="4-13、TODO：Python 数据类型：序列（Sequence）"></a>4-13、TODO：Python 数据类型：序列（Sequence）</h2>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03-图像&amp;视频的加载与展示</title>
    <link href="/2023/11/20/OpenCV%E5%85%A5%E9%97%A8/day03-%E5%9B%BE%E5%83%8F&amp;%E8%A7%86%E9%A2%91%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%B1%95%E7%A4%BA/"/>
    <url>/2023/11/20/OpenCV%E5%85%A5%E9%97%A8/day03-%E5%9B%BE%E5%83%8F&amp;%E8%A7%86%E9%A2%91%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="3-2、如何通过OpenCV创建显示窗口、读取图片、保存图片"><a href="#3-2、如何通过OpenCV创建显示窗口、读取图片、保存图片" class="headerlink" title="3-2、如何通过OpenCV创建显示窗口、读取图片、保存图片"></a>3-2、如何通过OpenCV创建显示窗口、读取图片、保存图片</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-comment">#创建一个名字叫new的Window</span><br>cv2.namedWindow(<span class="hljs-string">&#x27;new&#x27;</span>,cv2.WINDOW_AUTOSIZE)<br><span class="hljs-comment">#读取一张本地的图片</span><br>imgMat = cv2.imread(<span class="hljs-string">&#x27;./images/paste.png&#x27;</span>)<br><span class="hljs-comment">#将图片展示在new这个Window上</span><br>cv2.imshow(<span class="hljs-string">&#x27;new&#x27;</span>,imgMat)<br><br><span class="hljs-comment">#等待键盘输入，如果输入`q`就销毁Window并且退出程序</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  key = cv2.waitKey(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">if</span> (key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;销毁Window并且退出程序&quot;</span>)<br>    cv2.destroyAllWindows()<br>    exit()<br>  <span class="hljs-keyword">elif</span> (key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;s&#x27;</span>)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;借助OpenCV进行-保存图片&quot;</span>)<br>    cv2.imwrite(<span class="hljs-string">&#x27;./images/123.png&#x27;</span>, imgMat)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;非法输入&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/2023/11/20/OpenCV%E5%85%A5%E9%97%A8/day03-%E5%9B%BE%E5%83%8F&%E8%A7%86%E9%A2%91%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%B1%95%E7%A4%BA/image-20231120195438003.png" class="" title="image-20231120195438003"><h2 id="3-7、如何通过OpenCV获取摄像头、本地视频的数据"><a href="#3-7、如何通过OpenCV获取摄像头、本地视频的数据" class="headerlink" title="3-7、如何通过OpenCV获取摄像头、本地视频的数据"></a>3-7、如何通过OpenCV获取摄像头、本地视频的数据</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-comment">#创建一个名字叫new的Window</span><br>cv2.namedWindow(<span class="hljs-string">&#x27;new&#x27;</span>,cv2.WINDOW_NORMAL)<br><span class="hljs-comment">#定义窗口大小(好像没生效)</span><br><span class="hljs-comment"># cv2.resizeWindow(&#x27;myWin&#x27;,640,180)</span><br><span class="hljs-comment">#读取摄像头数据,0表示默认摄像头(要有摄像头)</span><br><span class="hljs-comment"># cap = cv2.VideoCapture(0)</span><br><span class="hljs-comment">#读取视频数据</span><br>cap = cv2.VideoCapture(<span class="hljs-string">&#x27;./images/raw.mp4&#x27;</span>)<br><br><span class="hljs-comment">#等待键盘输入，如果输入`q`就销毁Window并且退出程序</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  <span class="hljs-comment">#从视频中获取视频帧</span><br>  <span class="hljs-comment"># (TODO 理解下这个语法)</span><br>  ret, frameMat = cap.read()<br><br>  <span class="hljs-comment">#在窗口中展示视频帧</span><br>  cv2.imshow(<span class="hljs-string">&#x27;myWin&#x27;</span>,frameMat)<br><br>  key = cv2.waitKey(<span class="hljs-number">40</span>)<br>  <span class="hljs-keyword">if</span> (key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>    <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#释放videoCapture</span><br>cap.release()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;销毁Window并且退出程序&quot;</span>)<br>cv2.destroyAllWindows()<br>exit()<br></code></pre></td></tr></table></figure><img src="/2023/11/20/OpenCV%E5%85%A5%E9%97%A8/day03-%E5%9B%BE%E5%83%8F&%E8%A7%86%E9%A2%91%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%B1%95%E7%A4%BA/image-20231120201425770.png" class="" title="image-20231120201425770"><ul><li>#定义窗口大小(好像没生效)</li><li>因为调用 <code>cv2.imshow(&#39;myWin&#39;,frameMat)</code> 会让窗口大小根据图片重新布局，所以在imshow之后，需要再次调用 <code>cv2.resizeWindow(&#39;myWin&#39;,640,180)</code></li></ul><h2 id="3-8、如何通过OpenCV将视频数据录制成多媒体文件"><a href="#3-8、如何通过OpenCV将视频数据录制成多媒体文件" class="headerlink" title="3-8、如何通过OpenCV将视频数据录制成多媒体文件"></a>3-8、如何通过OpenCV将视频数据录制成多媒体文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment">#创建视频录制的句柄</span><br>fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;mp4v&#x27;</span>)<br>videoWriter = cv2.VideoWriter(<span class="hljs-string">&#x27;./images/out.mp4&#x27;</span>,fourcc,<span class="hljs-number">25</span>,(<span class="hljs-number">864</span>,<span class="hljs-number">486</span>))<br><br><br><span class="hljs-comment">#创建一个名字叫new的Window</span><br>cv2.namedWindow(<span class="hljs-string">&#x27;myWin&#x27;</span>,cv2.WINDOW_NORMAL)<br><span class="hljs-comment">#读取摄像头数据,0表示默认摄像头(要有摄像头)</span><br><span class="hljs-comment"># cap = cv2.VideoCapture(0)</span><br><span class="hljs-comment">#读取视频数据</span><br>cap = cv2.VideoCapture(<span class="hljs-string">&#x27;./images/raw.mp4&#x27;</span>)<br><br><span class="hljs-comment">#等待键盘输入，如果输入`q`就销毁Window并且退出程序q</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  <span class="hljs-comment">#从视频中获取视频帧</span><br>  <span class="hljs-comment"># (TODO 理解下这个语法)</span><br>  ret, frameMat = cap.read()<br><br>  <span class="hljs-comment">#在窗口中展示视频帧</span><br>  cv2.imshow(<span class="hljs-string">&#x27;myWin&#x27;</span>,frameMat)<br>  <span class="hljs-comment">#定义窗口大小(在imshow后面才能生效)</span><br>  cv2.resizeWindow(<span class="hljs-string">&#x27;myWin&#x27;</span>,<span class="hljs-number">640</span>,<span class="hljs-number">180</span>)<br><br>  <span class="hljs-comment">#写数据到多媒体文件中</span><br>  videoWriter.write(frameMat)<br><br>  key = cv2.waitKey(<span class="hljs-number">40</span>)<br>  <span class="hljs-keyword">if</span> (key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>    <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#释放videoCapture</span><br>cap.release()<br><span class="hljs-comment">#释放VideoWriter</span><br>videoWriter.release()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;销毁Window并且退出程序&quot;</span>)<br>cv2.destroyAllWindows()<br>exit()<br></code></pre></td></tr></table></figure><ul><li><code> cv2.VideoWriter</code> 函数解析</li><li>参数一：输出文件</li><li>参数二：多媒体文件格式  <code>cv2.VideoWriter_fourcc</code></li><li>参数三：帧率</li><li>参数四：分辨率大小</li><li><strong>注意：</strong>VideoWriter函数里面的分辨率，需要与视频实际分辨率一致，否则可能导致录制的视频格式错误。</li></ul><h2 id="3-9、代码优化"><a href="#3-9、代码优化" class="headerlink" title="3-9、代码优化"></a>3-9、代码优化</h2><ul><li>需要使用 <code>isOpened()</code> 判断摄像头是否已经打开</li><li><code>cap.read()</code> 函数返回元组 ret, frame ，需要通过ret判断视频数据是否成功获取到了。</li></ul><h2 id="3-10、鼠标事件监听"><a href="#3-10、鼠标事件监听" class="headerlink" title="3-10、鼠标事件监听"></a>3-10、鼠标事件监听</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>MyWinName = <span class="hljs-string">&#x27;MyWin&#x27;</span><br><br><span class="hljs-comment">#定义回调函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mouseCallback</span>(<span class="hljs-params">event, x, y, flags, userdata</span>):<br>  <span class="hljs-built_in">print</span>(event, x, y, flags, userdata)<br><br><span class="hljs-comment">#创建窗口</span><br>cv2.namedWindow(MyWinName,cv2.WINDOW_NORMAL)<br>cv2.resizeWindow(MyWinName,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br><br><span class="hljs-comment">#设置鼠标回调</span><br>cv2.setMouseCallback(MyWinName,mouseCallback, <span class="hljs-string">&quot;123&quot;</span>)<br><br><span class="hljs-comment">#显示窗口</span><br>img = np.zeros((<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">3</span>), np.uint8)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  cv2.imshow(MyWinName, img)<br>  key = cv2.waitKey(<span class="hljs-number">10</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><ul><li>mouseCallback 函数参数解析</li><li>event：鼠标移动、按下左键</li><li>x,y：鼠标坐标</li><li>flags：鼠标键以及组合键</li></ul><h2 id="3-11、TrackBar-控件（实现一个调色板）"><a href="#3-11、TrackBar-控件（实现一个调色板）" class="headerlink" title="3-11、TrackBar 控件（实现一个调色板）"></a>3-11、TrackBar 控件（实现一个调色板）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>MyWinName = <span class="hljs-string">&#x27;MyWin&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">v</span>):<br>  <span class="hljs-built_in">print</span>(v)<br><br><span class="hljs-comment">#创建窗口</span><br>cv2.namedWindow(MyWinName,cv2.WINDOW_NORMAL)<br>cv2.resizeWindow(MyWinName, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-comment">#创建trackbar</span><br>cv2.createTrackbar(<span class="hljs-string">&#x27;R&#x27;</span>, MyWinName,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,callback)<br>cv2.createTrackbar(<span class="hljs-string">&#x27;G&#x27;</span>, MyWinName,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,callback)<br>cv2.createTrackbar(<span class="hljs-string">&#x27;B&#x27;</span>, MyWinName,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,callback)<br><br>img = np.zeros((<span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>), np.uint8)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  R = cv2.getTrackbarPos(<span class="hljs-string">&#x27;R&#x27;</span>, MyWinName)<br>  G = cv2.getTrackbarPos(<span class="hljs-string">&#x27;G&#x27;</span>, MyWinName)<br>  B = cv2.getTrackbarPos(<span class="hljs-string">&#x27;B&#x27;</span>, MyWinName)<br><br>  img[:] = [B, G, R]<br>  cv2.imshow(MyWinName, img)<br>  <br>  key = cv2.waitKey(<span class="hljs-number">10</span>)<br>  <span class="hljs-keyword">if</span> key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br><br>cv2.destroyAllWindows()<br><br></code></pre></td></tr></table></figure><ul><li>cv2.createTrackbar() 函数参数</li><li>第一个参数是滑动条的名字</li><li>第二个参数是滑动条被放置的窗口的名字，</li><li>第三个参数是滑动条默认值，</li><li>第四个参数时滑动条的最大值，</li><li>第五个参数时回调函数，每次滑动都会调用回调函数。</li></ul><img src="/2023/11/20/OpenCV%E5%85%A5%E9%97%A8/day03-%E5%9B%BE%E5%83%8F&%E8%A7%86%E9%A2%91%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%B1%95%E7%A4%BA/image-20231123111357762.png" class="" title="image-20231123111357762"><h2 id="3-12、img-B-G-R-切片语法"><a href="#3-12、img-B-G-R-切片语法" class="headerlink" title="3-12、img[:] = [B, G, R] 切片语法"></a>3-12、<code>img[:] = [B, G, R]</code> 切片语法</h2><ul><li>参考文章：<a href="https://zhuanlan.zhihu.com/p/134585484">https://zhuanlan.zhihu.com/p/134585484</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>[start_index : end_index : step]<br><br>start_index：切片的起始位置（包括该位置）<br>end_index：切片的结束位置(！！！且不包括该位置)<br>step，表示步长。可取正负数，正数表示从左往右，负数表示从右往左。缺省时取<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a= [<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(a[:]) <span class="hljs-comment"># [9,2,8,7,4,5,1,5,6,8]</span><br><br>a[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>] = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>]  <span class="hljs-comment">#序列变为[9, 2, 8, &#x27;hello&#x27;, &#x27;world&#x27;, 5, 1, 5, 6, 8]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-Mac上搭建OpenCV环境</title>
    <link href="/2023/11/19/OpenCV%E5%85%A5%E9%97%A8/day02-Mac%E4%B8%8A%E6%90%AD%E5%BB%BAOpenCV%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/11/19/OpenCV%E5%85%A5%E9%97%A8/day02-Mac%E4%B8%8A%E6%90%AD%E5%BB%BAOpenCV%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1、Mac上搭建OpenCV环境"><a href="#2-1、Mac上搭建OpenCV环境" class="headerlink" title="2-1、Mac上搭建OpenCV环境"></a>2-1、Mac上搭建OpenCV环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">brew install python@3.9<br>pip3 install numpy matplotlib opencv_python<br></code></pre></td></tr></table></figure><ul><li>问：如何验证 <code>python3</code> 安装是否成功呢？</li><li>答：输入 <code>python3</code> 能进入 python 指令模式即为成功。</li><li>问：如何验证 <code>numpy matplotlib opencv_python</code> 是否安装成功呢？</li><li>答：进入python模式后，分别输入 <code>import numpy</code>、<code>import matplotlib</code>、<code>import cv2</code> 不会报错，即安装成功。</li></ul><img src="/2023/11/19/OpenCV%E5%85%A5%E9%97%A8/day02-Mac%E4%B8%8A%E6%90%AD%E5%BB%BAOpenCV%E7%8E%AF%E5%A2%83/image-20231120192533926.png" class="" title="image-20231120192533926"><h2 id="2-2、VSCode搭建python环境"><a href="#2-2、VSCode搭建python环境" class="headerlink" title="2-2、VSCode搭建python环境"></a>2-2、VSCode搭建python环境</h2><ul><li>在VSCode上查找并安装下图的 python 插件</li></ul><img src="/2023/11/19/OpenCV%E5%85%A5%E9%97%A8/day02-Mac%E4%B8%8A%E6%90%AD%E5%BB%BAOpenCV%E7%8E%AF%E5%A2%83/image-20231120192240771.png" class="" title="image-20231120192240771"><ul><li>编写如下代码，调用OpenCV读取本地图片并进行展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>imgMat = cv2.imread(<span class="hljs-string">&quot;./images/paste.png&quot;</span>)<br><br>cv2.imshow(<span class="hljs-string">&quot;winName&quot;</span>,imgMat)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li>能得到下图效果即证明vscode也能正常编写相关代码了</li></ul><img src="/2023/11/19/OpenCV%E5%85%A5%E9%97%A8/day02-Mac%E4%B8%8A%E6%90%AD%E5%BB%BAOpenCV%E7%8E%AF%E5%A2%83/image-20231120193712513.png" class="" title="image-20231120193712513">]]></content>
    
    
    <categories>
      
      <category>OpenCV入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-Excel中Right/Left/Len/Find/Mid/Substitute函数用法</title>
    <link href="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <url>/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>EXCEL&#x2F;WPS中文本函数LEFT、RIGHT、LEN、MID、SUBSTITUTE、FIND用法总结如下 </p></blockquote><h2 id="一、Left函数用法"><a href="#一、Left函数用法" class="headerlink" title="一、Left函数用法"></a>一、Left函数用法</h2><ul><li>从左侧开始取特定长度的字符串。</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919111619045.png" class="" title="image-20230919111619045"><h2 id="二、Right函数用法"><a href="#二、Right函数用法" class="headerlink" title="二、Right函数用法"></a>二、Right函数用法</h2><ul><li>从右侧开始取特定长度的字符串。</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919111837438.png" class="" title="image-20230919111837438"><h2 id="三、Len函数用法"><a href="#三、Len函数用法" class="headerlink" title="三、Len函数用法"></a>三、Len函数用法</h2><ul><li>一个字符串的总长度</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919112007394.png" class="" title="image-20230919112007394"><h2 id="四、Mid函数用法"><a href="#四、Mid函数用法" class="headerlink" title="四、Mid函数用法"></a>四、Mid函数用法</h2><ul><li>从一个字符串中间特定位置开始查找特定字符长度。</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919112229449.png" class="" title="image-20230919112229449"><h2 id="五、Substitute函数用法"><a href="#五、Substitute函数用法" class="headerlink" title="五、Substitute函数用法"></a>五、Substitute函数用法</h2><ul><li>将一个字符串中的特定字符串替换成另一个字符串。</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919113134632.png" class="" title="image-20230919113134632"><h2 id="六、Find函数用法"><a href="#六、Find函数用法" class="headerlink" title="六、Find函数用法"></a>六、Find函数用法</h2><ul><li>找一个<strong>目标字符串</strong>在<strong>原始字符串</strong>中的位置</li></ul><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919113429986.png" class="" title="image-20230919113429986"><h2 id="七、一道综合题目，从上面的列中提取出seq的值"><a href="#七、一道综合题目，从上面的列中提取出seq的值" class="headerlink" title="七、一道综合题目，从上面的列中提取出seq的值"></a>七、一道综合题目，从上面的列中提取出seq的值</h2><img src="/2023/09/19/%E6%9D%82%E8%AE%B0/day01-Excel%E4%B8%ADFind:Mid:Substitute%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/image-20230919151608145.png" class="" title="image-20230919151608145"><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">具体公式如下</span><br>=MID(K176,FIND(&quot;Seq&quot;,K176)+4,FIND(&quot;,&quot;,K176,FIND(&quot;Seq&quot;,K176))-FIND(&quot;Seq&quot;,K176)-4)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FIND(<span class="hljs-string">&quot;Seq&quot;</span>,K176) 找出<span class="hljs-built_in">seq</span>的位置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FIND(<span class="hljs-string">&quot;,&quot;</span>,K176,FIND(<span class="hljs-string">&quot;Seq&quot;</span>,K176)) 找出<span class="hljs-built_in">seq</span>后面第一个逗号的位置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FIND(<span class="hljs-string">&quot;,&quot;</span>,K176,FIND(<span class="hljs-string">&quot;Seq&quot;</span>,K176))-FIND(<span class="hljs-string">&quot;Seq&quot;</span>,K176)-4 用逗号的位置减去<span class="hljs-built_in">seq</span>=的位置，再-4，最终得到数字的长度</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">最终用MID函数根据前面获得起始位置+字符串长度，截取出数值。完成提取</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03-利用Wireshark分析H264码流</title>
    <link href="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/"/>
    <url>/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、找到脚本放置的路径"><a href="#一、找到脚本放置的路径" class="headerlink" title="一、找到脚本放置的路径"></a>一、找到脚本放置的路径</h2><h3 id="①使用前面介绍的抓包方式，抓取数据包。"><a href="#①使用前面介绍的抓包方式，抓取数据包。" class="headerlink" title="①使用前面介绍的抓包方式，抓取数据包。"></a>①使用前面介绍的抓包方式，抓取数据包。</h3><h3 id="②找到连续的UDP大片数据，大概率就是I帧数据。"><a href="#②找到连续的UDP大片数据，大概率就是I帧数据。" class="headerlink" title="②找到连续的UDP大片数据，大概率就是I帧数据。"></a>②找到连续的UDP大片数据，大概率就是I帧数据。</h3><p>右键 —&gt; DecodeAs -&gt; 把current中的值改成RTP</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/image-20230918192409693.png" class="" title="image-20230918192409693"><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/image-20230918192558959.png" class="" title="image-20230918192558959"><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/image-20230918192854378.png" class="" title="image-20230918192854378"><h3 id="③我们可以看到PT-x3D-127"><a href="#③我们可以看到PT-x3D-127" class="headerlink" title="③我们可以看到PT&#x3D;127"></a>③我们可以看到PT&#x3D;127</h3><p>然后在 WireShark 工具栏中选择 Edit –&gt; preferences –&gt; protocols –&gt; H264，把“H264 dynamic payload types”设成 127，点击 OK。</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/image-20230918193350436.png" class="" title="image-20230918193350436"><h3 id="④在wireshark如果发生丢包，怎么查看"><a href="#④在wireshark如果发生丢包，怎么查看" class="headerlink" title="④在wireshark如果发生丢包，怎么查看"></a>④在wireshark如果发生丢包，怎么查看</h3><p>将数据导出车csv格式的数据，用excel打开，提取seq进行排序。</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day03-%E5%88%A9%E7%94%A8Wireshark%E5%88%86%E6%9E%90H264%E7%A0%81%E6%B5%81/image-20230918195121425.png" class="" title="image-20230918195121425">]]></content>
    
    
    <categories>
      
      <category>Wireshark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-Wireshark自定义解密方式</title>
    <link href="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day02-Wireshark%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E5%AF%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day02-Wireshark%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、找到脚本放置的路径"><a href="#一、找到脚本放置的路径" class="headerlink" title="一、找到脚本放置的路径"></a>一、找到脚本放置的路径</h2><p>旧版本的wireshark需要手动引入，而新的会自动加载。我的版本是 3.4.4，会自动加载。</p><p>先找到wireshark的安装目录： <strong>帮助–&gt;关于Wireshark –&gt;文件夹</strong> 可以查看所有的路径<br>重新加载各种lua脚本快捷键是： <strong>ctrl+shift+L</strong></p><ul><li>自动加载：<ul><li>将自定义的lua脚本放到 xxx \ Wireshark \ plugins 下就可以了，这个目录下的子目录也都会扫描，按一下快捷键看有没有加载就知道了。没有就要手动引入</li></ul></li><li>手动加载<ul><li>自定义的脚本可以就放在 plugins，随意。在安装目录下找到 <strong>init.lua</strong>文件，这是脚本的入口。在文件的<strong>最后</strong>引入你的文件</li></ul></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--DATA_DIR</span>是 init.lua所在路径，..是字符串连接符<br>--也可以用绝对路径，只要找得到就行<br><span class="hljs-function"><span class="hljs-title">dofile</span><span class="hljs-params">(DATA_DIR..<span class="hljs-string">&quot;mylua/mypro.lua&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day02-Wireshark%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E5%AF%86%E6%96%B9%E5%BC%8F/%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD.png" class="" title="自动加载"><h2 id="二、编写lua脚本代码"><a href="#二、编写lua脚本代码" class="headerlink" title="二、编写lua脚本代码"></a>二、编写lua脚本代码</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">do</span>    <br>    <span class="hljs-comment">-- 定义自己的协议，name 和 description，未添加字段</span><br>    my_proto = Proto(<span class="hljs-string">&quot;MYPRO&quot;</span>, <span class="hljs-string">&quot;MY Protocol&quot;</span>)<br><br>    <span class="hljs-comment">-- 第一个参数用于过滤器的字段，第二个是数据显示时的名称，第三个是数据类型</span><br>    flag = ProtoField.<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;myproto.flag&quot;</span>, <span class="hljs-string">&quot;flag&quot;</span>, base.UNICODE)<br>    v1 = ProtoField.uint32(<span class="hljs-string">&quot;myproto.v1&quot;</span>, <span class="hljs-string">&quot;var1&quot;</span>, base.DEC)<br>    data = ProtoField.none(<span class="hljs-string">&quot;myproto.data&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>, base.unicode)<br><br>    <span class="hljs-comment">-- 声明协议的字段</span><br>    my_proto.fields = &#123;<br>        flag,<br>        v1,<br>        data<br>    &#125;<br><br>    <span class="hljs-comment">-- buffer: 包的数据</span><br>    <span class="hljs-comment">-- pinfo: 显示的信息</span><br>    <span class="hljs-comment">-- tree: 包结构的关系</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_proto.dissector</span><span class="hljs-params">(buffer, pinfo, tree)</span></span><br>        <span class="hljs-keyword">if</span> buffer:<span class="hljs-built_in">len</span>() == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">end</span><br><br>        pinfo.cols.protocol = my_proto.name <span class="hljs-comment">-- 显示在protocol列的名字</span><br>        <span class="hljs-keyword">local</span> subtree = tree:add(my_proto, buffer(), <span class="hljs-string">&quot;my protocol data&quot;</span>) <span class="hljs-comment">-- 显示在数据查看</span><br><br>        <span class="hljs-comment">-- 解析成两个分支</span><br>        <span class="hljs-keyword">local</span> head_st = subtree:add(my_proto, buffer(), <span class="hljs-string">&quot;header&quot;</span>)<br>        <span class="hljs-keyword">local</span> payload_st = subtree:add(my_proto, buffer(), <span class="hljs-string">&quot;payload&quot;</span>)<br><br>        <span class="hljs-comment">-- tag解析：根据字段大小，添加到子树</span><br>        head_st:add_le(flag, buffer(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment">--little-endian，从0位置解析4个字节</span><br><br>        <span class="hljs-comment">--v1解析：解析成具体的类型提示追加在字段后面</span><br>        <span class="hljs-keyword">local</span> <span class="hljs-built_in">type</span> = buffer(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>):le_uint() <span class="hljs-comment">-- 要复用的可以定义成变量</span><br>        head_st:add(v1, <span class="hljs-built_in">type</span>):append_text(<span class="hljs-string">&quot;(&quot;</span>..get_type_name(<span class="hljs-built_in">type</span>)..<span class="hljs-string">&quot;)&quot;</span>) <span class="hljs-comment">-- 用add就可以了</span><br><br>        <span class="hljs-comment">-- 剩下的字节为payload</span><br>        payload_st:add_le(data, buffer(<span class="hljs-number">8</span>,buffer:<span class="hljs-built_in">len</span>()<span class="hljs-number">-8</span>))<br><br>        <span class="hljs-comment">-- 按需要显示到Info列上</span><br>        <span class="hljs-keyword">local</span> v1_str = buffer(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>):le_uint()<br>        <span class="hljs-keyword">local</span> att1_str = get_type_name(<span class="hljs-built_in">type</span>)<br>        <span class="hljs-keyword">local</span> info_str = <span class="hljs-string">&quot;[&quot;</span>..att1_str..<span class="hljs-string">&quot;]&quot;</span>..<span class="hljs-string">&quot;,v1=&quot;</span>..v1_str<br>        pinfo.cols.info:append(info_str)<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">local</span> udp_prot = DissectorTable.get(<span class="hljs-string">&quot;udp.port&quot;</span>) <span class="hljs-comment">-- 如果获取tcp就是tcp.port</span><br>    udp_prot:add(<span class="hljs-number">6666</span>, my_proto) <span class="hljs-comment">-- 抓到的6666端口的数据，按my_proto的规则来解析</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_type_name</span><span class="hljs-params">(type)</span></span><br><span class="hljs-keyword">local</span> name = <span class="hljs-string">&quot;unknown&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> name = <span class="hljs-string">&quot;att1&quot;</span><br><span class="hljs-keyword">elseif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> name = <span class="hljs-string">&quot;att2&quot;</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> name<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>最终效果图如下👇🏻</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day02-Wireshark%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%A3%E5%AF%86%E6%96%B9%E5%BC%8F/image-20230918165418733.png" class="" title="image-20230918165418733"><h2 id="三、如果基于UDP或者TCP的数据，又经过AES加密，wireshark抓到数据之后，如何解密呢？"><a href="#三、如果基于UDP或者TCP的数据，又经过AES加密，wireshark抓到数据之后，如何解密呢？" class="headerlink" title="三、如果基于UDP或者TCP的数据，又经过AES加密，wireshark抓到数据之后，如何解密呢？"></a>三、如果基于UDP或者TCP的数据，又经过AES加密，wireshark抓到数据之后，如何解密呢？</h2><p>理论上来讲，用上面的自定义加密方式可以处理，但是笔者在mac没找到lua的AES加解密库，所以只能手动解密。</p><p>找到wireshark中tcp的数据包，copy下来，到在线AES解密网站，进行相应的解密即可。</p><p>AES在线加密解密工具：<a href="https://www.mklab.cn/utils/aes">https://www.mklab.cn/utils/aes</a></p><p>文章参考链接：<a href="https://blog.csdn.net/quniyade0/article/details/115266774">https://blog.csdn.net/quniyade0/article/details/115266774</a></p>]]></content>
    
    
    <categories>
      
      <category>Wireshark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-iOS抓iPhone的wireshark数据包</title>
    <link href="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day01-iOS%E6%8A%93iPhone%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <url>/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day01-iOS%E6%8A%93iPhone%E6%95%B0%E6%8D%AE%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在iOS应用开发过程中，通过抓包调试服务接口的场景时常出现。Charles和Wireshark是我在iOS开发过程中最常用的两款软件。</p></blockquote><p><strong>Charles</strong>是很强大的网络请求抓包工具，常用于抓包HTTP&#x2F;HTTPS请求。而作者在做IoT项目时，智能硬件配网协议是基于TCP&#x2F;UDP或者蓝牙的，需要用<strong>Wireshark</strong>进行抓包调试。<a href="https://links.jianshu.com/go?to=https://www.wireshark.org">Wireshark官网</a></p><h2 id="一、获取iPhone的UDID"><a href="#一、获取iPhone的UDID" class="headerlink" title="一、获取iPhone的UDID"></a>一、获取iPhone的UDID</h2><p>从<code>Xcode菜单栏 -&gt; Window -&gt; Devices and Simulators</code>可以更方便地获取准确的UDID。图示如下：</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day01-iOS%E6%8A%93iPhone%E6%95%B0%E6%8D%AE%E5%8C%85/webp" class="" title="img"><h2 id="二、为iPhone创建虚拟网卡"><a href="#二、为iPhone创建虚拟网卡" class="headerlink" title="二、为iPhone创建虚拟网卡"></a>二、为iPhone创建虚拟网卡</h2><figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm">$ rvictl -s decb<span class="hljs-number">66</span>caf<span class="hljs-number">7012</span>a<span class="hljs-number">7799</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>edxxxxxxxx<span class="hljs-number">7</span>f<span class="hljs-number">5</span>a<span class="hljs-number">715</span>e<br><br>Starting device decb<span class="hljs-number">66</span>caf<span class="hljs-number">7012</span>a<span class="hljs-number">7799</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>edxxxxxxxx<span class="hljs-number">7</span>f<span class="hljs-number">5</span>a<span class="hljs-number">715</span>e [SUCCEEDED] with interface rvi<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="三、启动Wireshark，找到-rvi0-进行抓包"><a href="#三、启动Wireshark，找到-rvi0-进行抓包" class="headerlink" title="三、启动Wireshark，找到 rvi0 进行抓包"></a>三、启动Wireshark，找到 rvi0 进行抓包</h2><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day01-iOS%E6%8A%93iPhone%E6%95%B0%E6%8D%AE%E5%8C%85/webp-20230918170235617" class="" title="img"><p>双击<code>rvi0</code>即可进入抓包界面。<br>若此时出现如下弹窗，则说明无权限访问该接口。</p><img src="/2023/09/18/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/day01-iOS%E6%8A%93iPhone%E6%95%B0%E6%8D%AE%E5%8C%85/webp-20230918170259224" class="" title="img"><p>这时，退出Wireshark，然后在终端上使用下述命令重新打开Wireshark就可以了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo <span class="hljs-regexp">/Applications/</span>Wireshark.app<span class="hljs-regexp">/Contents/</span>MacOS/Wireshark <br>Password:<br></code></pre></td></tr></table></figure><h2 id="四、使用tcpdump抓包，借助wireshark分析包"><a href="#四、使用tcpdump抓包，借助wireshark分析包" class="headerlink" title="四、使用tcpdump抓包，借助wireshark分析包"></a>四、使用tcpdump抓包，借助wireshark分析包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-i, 要监听的网卡名称，-i rvi0监听虚拟网卡。不设置的时候默认监听所有网卡流量。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-w，保存的路径以及文件名。</span><br>sudo tcpdump -i rvi0  -w dump.pcap<br></code></pre></td></tr></table></figure><h2 id="五、一些注意事项【坑】"><a href="#五、一些注意事项【坑】" class="headerlink" title="五、一些注意事项【坑】"></a>五、一些注意事项【坑】</h2><h4 id="①-时间戳不对的问题"><a href="#①-时间戳不对的问题" class="headerlink" title="① 时间戳不对的问题"></a>① 时间戳不对的问题</h4><p>直接用wireshark图形化界面抓取rvi0的数据，可能存在时间戳不对的问题。</p><p>比如一个http请求，请求时间和响应时间耗时为0，这是不可能的。</p><p><strong>解决方式：</strong> 上述<strong>方法四</strong> tcpdump抓包，先把数据抓取，然后用wireshark打开查看即可。</p>]]></content>
    
    
    <categories>
      
      <category>Wireshark</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-NSDateFormatter相关问题</title>
    <link href="/2023/09/18/iOS/day01-NSDateFormatter%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/18/iOS/day01-NSDateFormatter%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、iOS设备选择12小时-NSDateFormatter-dateFromString-返回-nil-问题"><a href="#一、iOS设备选择12小时-NSDateFormatter-dateFromString-返回-nil-问题" class="headerlink" title="一、iOS设备选择12小时[NSDateFormatter dateFromString:] 返回 nil 问题"></a>一、iOS设备选择12小时[NSDateFormatter dateFromString:] 返回 nil 问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs objective-c">NSDateFormatter *formatter = [[NSDateFormatter alloc] init];<br>formatter.dateFormat = @&quot;yyyy-MM-dd HH:mm:ss&quot;;<br> NSString *dateStr = @&quot;2023-10-31 07:18:28&quot;;<br> NSDate *startDate = [formatter dateFromString:dateStr];<br></code></pre></td></tr></table></figure><ul><li>代码如上，在手机设置<strong>【语言与地区 -&gt; 地区：英国】+【日期与时间 -&gt; 24小时关闭】</strong>这种组合下，startDate将会是nil值。</li></ul><p>解决方案：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">formatter.locale</span> = [NSLocale localeWithLocaleIdentifier:@<span class="hljs-string">&quot;en_US_POSIX&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>因为地区原因，12小时制的情况下，每个国家的格式化时间不一致，这会导致formatter表现异常。所以我们给它固定一个美国地区即可。</li></ul><img src="/2023/09/18/iOS/day01-NSDateFormatter%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/IMG_3395.PNG" class="" title="IMG_3395"><img src="/2023/09/18/iOS/day01-NSDateFormatter%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/IMG_3396.PNG" class="" title="IMG_3396"><h2 id="二、每个国家得到周一不一致问题，导致日期和星期无法对其的问题"><a href="#二、每个国家得到周一不一致问题，导致日期和星期无法对其的问题" class="headerlink" title="二、每个国家得到周一不一致问题，导致日期和星期无法对其的问题"></a>二、每个国家得到周一不一致问题，导致日期和星期无法对其的问题</h2><img src="/2023/09/18/iOS/day01-NSDateFormatter%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/IMG_3397.PNG" class="" title="IMG_3397"><p>解决方案：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">formatter.locale</span> = [NSLocale localeWithLocaleIdentifier:@<span class="hljs-string">&quot;en_US_POSIX&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>因为地区原因，12小时制的情况下，每个国家的格式化时间不一致，这会导致formatter表现异常。所以我们给它固定一个美国地区即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS - Objective-C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03-自动化脚本代码编写</title>
    <link href="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day03-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    <url>/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day03-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h2 id="一、iOS真机安装WebDriverAgent图文详解"><a href="#一、iOS真机安装WebDriverAgent图文详解" class="headerlink" title="一、iOS真机安装WebDriverAgent图文详解"></a>一、iOS真机安装WebDriverAgent图文详解</h2>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-自动化脚本代码工具安装</title>
    <link href="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day02-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    <url>/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day02-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="一、安装自动化工具Airtest"><a href="#一、安装自动化工具Airtest" class="headerlink" title="一、安装自动化工具Airtest"></a>一、安装自动化工具Airtest</h2><p>Airtest是网易开源的一个自动化测试工具，支持iOS、安卓、Windows、Mac</p><p>去Airtest官网下载：<a href="http://airtest.netease.com/">http://airtest.netease.com/</a></p><h1 id="二、运行方式"><a href="#二、运行方式" class="headerlink" title="二、运行方式"></a>二、运行方式</h1><p>参考官方的介绍：<a href="https://airtest.readthedocs.io/zh_CN/latest/README_MORE.html">https://airtest.readthedocs.io/zh_CN/latest/README_MORE.html</a></p><h2 id="三、核心API"><a href="#三、核心API" class="headerlink" title="三、核心API"></a>三、核心API</h2><p>核心API：<a href="https://airtest.readthedocs.io/en/latest/all_module/airtest.core.api.html">https://airtest.readthedocs.io/en/latest/all_module/airtest.core.api.html</a></p><h3 id="1、touch-用于触发点击事件"><a href="#1、touch-用于触发点击事件" class="headerlink" title="1、touch 用于触发点击事件"></a>1、touch 用于触发点击事件</h3><p>可以用图片识别的方式点击</p><figure class="highlight python-repl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">touch(Template(<span class="hljs-string">r&quot;tpl1606730579419.png&quot;</span>, target_pos=<span class="hljs-number">5</span>))</span><br></code></pre></td></tr></table></figure><p>可以点击指定坐标</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&gt;&gt;&gt; touch((<span class="hljs-number">100</span>, <span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-WebDriverAgent安装</title>
    <link href="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="一、iOS真机安装WebDriverAgent图文详解"><a href="#一、iOS真机安装WebDriverAgent图文详解" class="headerlink" title="一、iOS真机安装WebDriverAgent图文详解"></a>一、iOS真机安装WebDriverAgent图文详解</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在做iOS自动化测试的时候，一般都需要确保手机上已经安装有WebDriverAgent应用，这个WDA应用可以是Airtest修改版、Appium修改版也可以是Facebook原版，今天我们以Appium修改版为例来进行说明，其他版本同样适用。</p><p>安装依赖：‍</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> -U tidevice<br></code></pre></td></tr></table></figure><p>拉取代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/appium/</span>WebDriverAgent<br></code></pre></td></tr></table></figure><h3 id="证书设置"><a href="#证书设置" class="headerlink" title="证书设置"></a>证书设置</h3><p>1、进入WebDriverAgent项目根目录，双击打开WebDriverAgent.xcodeproj，然后在Xcode中的TARGETS里选中WebDriverAgentLib，按照下图数字序号依次点击，注意步骤4要开启自动管理签名。</p><img src="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/9312e2472c604fbeba9ea7070866501e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" class="" title="图片"><p>2、证书配置好之后，分别选择WebDriverAgentRunner和目标设备，<font color="red"><strong>以Test方式运行，切记Test方式</strong></font></p><img src="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/91381d4c490e4f789450fdcbf92f42c4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" class="" title="图片"><p>3、运行Test，就可以在Xcode控制台看到下面的输出信息：</p><img src="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/2e6f38f1338d4e6f8b1ebd750e328aa5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" class="" title="图片"><p>通过上面给出的IP和端口，加上&#x2F;status合成一个url地址，例如<a href="https://link.juejin.cn/?target=http://10.0.0.1:8100/status%EF%BC%8C%E7%84%B6%E5%90%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%9B%BE%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%8C%E5%B0%B1%E8%AF%B4%E6%98%8EWDA%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82">http://10.0.0.1:8100/status，然后浏览器打开，如果出现下图的输出，就说明WDA安装成功了。</a></p><img src="/2023/07/27/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/day01-iOS%E7%9C%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/861b028a43784597a8e68a1194a6293f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" class="" title="图片"><p><font color="red">但是有些国产的iPhone机器通过手机的IP和端口还不能访问，此时需要将手机的端口转发到Mac上，这个时候执行下面的命令即可</font>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tidevice</span> relay <span class="hljs-number">8100</span> <span class="hljs-number">8100</span><br></code></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://juejin.cn/post/6993892294705283080">https://juejin.cn/post/6993892294705283080</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量5-FEC</title>
    <link href="/2023/07/02/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F5/"/>
    <url>/2023/07/02/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F5/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC服务质量综述"><a href="#一、WebRTC服务质量综述" class="headerlink" title="一、WebRTC服务质量综述"></a>一、WebRTC服务质量综述</h2>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量4-Pacer</title>
    <link href="/2023/07/01/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F4/"/>
    <url>/2023/07/01/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC服务质量综述"><a href="#一、WebRTC服务质量综述" class="headerlink" title="一、WebRTC服务质量综述"></a>一、WebRTC服务质量综述</h2>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量3-NACK</title>
    <link href="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/"/>
    <url>/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识NACK-、RTX【总体概念】"><a href="#一、认识NACK-、RTX【总体概念】" class="headerlink" title="一、认识NACK 、RTX【总体概念】"></a>一、认识NACK 、RTX【总体概念】</h2><h3 id="1、NACK的作用是什么？"><a href="#1、NACK的作用是什么？" class="headerlink" title="1、NACK的作用是什么？"></a>1、NACK的作用是什么？</h3><ul><li><strong>NACK（Negative Acknowledge）用于告诉对方，丢了哪些包。</strong></li><li>当通信的双方传输数据的时候，接收方会通过SequenceNumber知道哪些包收到了，哪些包丢失了。</li><li>每隔一段时间，接收方就将丢失的SequenceNumber传给发送方。</li></ul><h3 id="2、RTX的作用是什么？"><a href="#2、RTX的作用是什么？" class="headerlink" title="2、RTX的作用是什么？"></a>2、RTX的作用是什么？</h3><ul><li><strong>RTX（Real Time Retransmission）用户重传丢失的包。</strong></li><li>特点：重传的时候不会使用原来的PayloadType、SSRC、SequenceNumber，会使用新的。</li></ul><h3 id="3、NACK-x2F-RTX的工作机制，什么时候确认是否支持NACK和RTX？"><a href="#3、NACK-x2F-RTX的工作机制，什么时候确认是否支持NACK和RTX？" class="headerlink" title="3、NACK&#x2F;RTX的工作机制，什么时候确认是否支持NACK和RTX？"></a>3、NACK&#x2F;RTX的工作机制，什么时候确认是否支持NACK和RTX？</h3><ul><li><p>在SDP协商的时候确认是否支持NACK或者RTX</p></li><li><p>核心机制：通过SequenceNumber找出丢失的包，发送给对端；对端通过RTX重传丢失的包。</p></li></ul><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627070225068.png" class="" title="image-20230627070225068"><ul><li>在 12-9中详细讲述的NACK的整个机制，可以多听听。</li></ul><h3 id="4、如果没有RTX，WebRTC可以丢包重传吗？"><a href="#4、如果没有RTX，WebRTC可以丢包重传吗？" class="headerlink" title="4、如果没有RTX，WebRTC可以丢包重传吗？"></a>4、如果没有RTX，WebRTC可以丢包重传吗？</h3><ul><li>可以，原因在后续讲解。</li><li>尝试回答下面的问题。</li></ul><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627070906478.png" class="" title="image-20230627070906478"><h2 id="二、NACK的抓包分析流程【偏向抓包】"><a href="#二、NACK的抓包分析流程【偏向抓包】" class="headerlink" title="二、NACK的抓包分析流程【偏向抓包】"></a>二、NACK的抓包分析流程【偏向抓包】</h2><h3 id="1、NACK的格式？PID、BLP分别是什么意思？"><a href="#1、NACK的格式？PID、BLP分别是什么意思？" class="headerlink" title="1、NACK的格式？PID、BLP分别是什么意思？"></a>1、NACK的格式？PID、BLP分别是什么意思？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071606431.png" class="" title="image-20230629071606431"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071635878.png" class="" title="image-20230629071635878"><h3 id="2、通过抓包看一下NACK的格式？"><a href="#2、通过抓包看一下NACK的格式？" class="headerlink" title="2、通过抓包看一下NACK的格式？"></a>2、通过抓包看一下NACK的格式？</h3> <img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071843062.png" class="" title="image-20230629071843062"><h3 id="3、WebRTC接收NACK消息的过程？"><a href="#3、WebRTC接收NACK消息的过程？" class="headerlink" title="3、WebRTC接收NACK消息的过程？"></a>3、WebRTC接收NACK消息的过程？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075309875.png" class="" title="image-20230629075309875"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075327283.png" class="" title="image-20230629075327283"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075351373.png" class="" title="image-20230629075351373"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075401352.png" class="" title="image-20230629075401352"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075422708.png" class="" title="image-20230629075422708"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075440888.png" class="" title="image-20230629075440888"><h3 id="4、RTX协议？"><a href="#4、RTX协议？" class="headerlink" title="4、RTX协议？"></a>4、RTX协议？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075522363.png" class="" title="image-20230629075522363"><h3 id="5、如何找到RTX包，并在Wireshark中抓取RTX？"><a href="#5、如何找到RTX包，并在Wireshark中抓取RTX？" class="headerlink" title="5、如何找到RTX包，并在Wireshark中抓取RTX？"></a>5、如何找到RTX包，并在Wireshark中抓取RTX？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075541704.png" class="" title="image-20230629075541704"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075600282.png" class="" title="image-20230629075600282"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075636619.png" class="" title="image-20230629075636619"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075736486.png" class="" title="image-20230629075736486"><h3 id="6、如何找到NACK对应的RTX包？"><a href="#6、如何找到NACK对应的RTX包？" class="headerlink" title="6、如何找到NACK对应的RTX包？"></a>6、如何找到NACK对应的RTX包？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629075936660.png" class="" title="image-20230629075936660"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629080044584.png" class="" title="image-20230629080044584"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629080105726.png" class="" title="image-20230629080105726"><h3 id="7、WebRTC发送RTX包的过程？"><a href="#7、WebRTC发送RTX包的过程？" class="headerlink" title="7、WebRTC发送RTX包的过程？"></a>7、WebRTC发送RTX包的过程？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070151147.png" class="" title="image-20230630070151147"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070211860.png" class="" title="image-20230630070211860"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070252324.png" class="" title="image-20230630070252324"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070444635.png" class="" title="image-20230630070444635"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070532659.png" class="" title="image-20230630070532659"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230630070618387.png" class="" title="image-20230630070618387"><h2 id="三、NACK的代码流程【偏向代码，了解即可】"><a href="#三、NACK的代码流程【偏向代码，了解即可】" class="headerlink" title="三、NACK的代码流程【偏向代码，了解即可】"></a>三、NACK的代码流程【偏向代码，了解即可】</h2><h3 id="1、判断包位置的关键算法函数AheadOf（，后续用到再详细了解）"><a href="#1、判断包位置的关键算法函数AheadOf（，后续用到再详细了解）" class="headerlink" title="1、判断包位置的关键算法函数AheadOf（，后续用到再详细了解）"></a>1、判断包位置的关键算法函数AheadOf（，后续用到再详细了解）</h3><ul><li>SequenceNumber 是循环的</li></ul><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073438288.png" class="" title="image-20230627073438288"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073537831.png" class="" title="image-20230627073537831"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073619318.png" class="" title="image-20230627073619318"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073637277.png" class="" title="image-20230627073637277"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073644155.png" class="" title="image-20230627073644155"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230627073657331.png" class="" title="image-20230627073657331"><h3 id="2、NACK的处理流程，也就是NACK的调用栈？"><a href="#2、NACK的处理流程，也就是NACK的调用栈？" class="headerlink" title="2、NACK的处理流程，也就是NACK的调用栈？"></a>2、NACK的处理流程，也就是NACK的调用栈？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070250676.png" class="" title="image-20230629070250676"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070318387.png" class="" title="image-20230629070318387"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070344337.png" class="" title="image-20230629070344337"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070404907.png" class="" title="image-20230629070404907"><h3 id="3、判断丢包的关键逻辑？"><a href="#3、判断丢包的关键逻辑？" class="headerlink" title="3、判断丢包的关键逻辑？"></a>3、判断丢包的关键逻辑？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070448028.png" class="" title="image-20230629070448028"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070554988.png" class="" title="image-20230629070554988"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070609361.png" class="" title="image-20230629070609361"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070625914.png" class="" title="image-20230629070625914"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070642212.png" class="" title="image-20230629070642212"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070656954.png" class="" title="image-20230629070656954"><h3 id="4、找到真正的丢包？"><a href="#4、找到真正的丢包？" class="headerlink" title="4、找到真正的丢包？"></a>4、找到真正的丢包？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070740356.png" class="" title="image-20230629070740356"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070755835.png" class="" title="image-20230629070755835"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070815624.png" class="" title="image-20230629070815624"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070907644.png" class="" title="image-20230629070907644"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070937378.png" class="" title="image-20230629070937378"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629070953970.png" class="" title="image-20230629070953970"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071047419.png" class="" title="image-20230629071047419"><h3 id="5、VP8关键帧的判断？"><a href="#5、VP8关键帧的判断？" class="headerlink" title="5、VP8关键帧的判断？"></a>5、VP8关键帧的判断？</h3><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071215101.png" class="" title="image-20230629071215101"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071250408-7993974.png" class="" title="image-20230629071250408"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071307477.png" class="" title="image-20230629071307477"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071339526.png" class="" title="image-20230629071339526"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071407530.png" class="" title="image-20230629071407530"><img src="/2023/06/30/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F3-NACK/image-20230629071434238.png" class="" title="image-20230629071434238">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量2-RTCP</title>
    <link href="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、RTCP协议"><a href="#一、RTCP协议" class="headerlink" title="一、RTCP协议"></a>一、RTCP协议</h2><h3 id="1、在以太网中，一个数据包的长度是最长多少字节？RTCP在哪个层？"><a href="#1、在以太网中，一个数据包的长度是最长多少字节？RTCP在哪个层？" class="headerlink" title="1、在以太网中，一个数据包的长度是最长多少字节？RTCP在哪个层？"></a>1、在以太网中，一个数据包的长度是最长多少字节？RTCP在哪个层？</h3><ul><li>一个数据包的长度 <font color="red">最长是1500</font> 个字节</li><li>RTCP协议在 <font color="red">应用层</font></li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624075345336.png" class="" title="image-20230624075345336"><h3 id="2、RTCP-Header中包括哪些域？（对着图要能解释每个域的含义）"><a href="#2、RTCP-Header中包括哪些域？（对着图要能解释每个域的含义）" class="headerlink" title="2、RTCP Header中包括哪些域？（对着图要能解释每个域的含义）"></a>2、RTCP Header中包括哪些域？（对着图要能解释每个域的含义）</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624075438423.png" class="" title="image-20230624075438423"><ul><li><strong>Version：</strong> 代表版本号</li><li><strong>P：</strong> Padding，代表是否有填充位</li><li><strong>Count：</strong> 代表我们这个RTCP包中包含的 Report Block 有多少个。</li><li><strong>Type：</strong> 根据功能的将RTCP的类型分成了很多种，比如RR、SR等。</li><li><strong>Length：</strong> 表示我们这个RTCP数据有多长。</li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624075730967.png" class="" title="image-20230624075730967"><h3 id="3、有哪些常见的RTCP-Type？"><a href="#3、有哪些常见的RTCP-Type？" class="headerlink" title="3、有哪些常见的RTCP Type？"></a>3、有哪些常见的RTCP Type？</h3><ul><li><strong>200 SR</strong> Sender Report packet ： 发送报告，就是我一共发了多少个包，需要在发送报告中写明，最终发送给对端。</li><li><strong>201 RR</strong> Receiver Report packet：接受报告，就是我接收了多少数据，哪些数据丢了，丢失率是多少，最终形成RR类型的RTCP报告，发送给对端。这样发送端就知道，在一段时间内我发送了多少数据，丢失了多少数据。</li><li><strong>202 SDES</strong> Source Description packet：它表示的是对一个媒体流的描述，比如一个音频的SRC是114455，那么对于这个音频流的具体信息，我们就可以通过SDES了解更多信息。</li><li><strong>203 BYE</strong> Goobye packet：也就是说我们不需要再传输数据的时候，我们可以向对方发送一个BYE消息，这样双方数据的传输就结束了。</li><li><strong>204 APP</strong> Application-defined packet：如果我们企业内部向使用自己内部定义的RTCP的时候，就使用APP类型进行自定义。</li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624075915334.png" class="" title="image-20230624075915334"><h3 id="4、另外针对WebRTC还有几种比较常见的RTCP-Type？"><a href="#4、另外针对WebRTC还有几种比较常见的RTCP-Type？" class="headerlink" title="4、另外针对WebRTC还有几种比较常见的RTCP Type？"></a>4、另外针对WebRTC还有几种比较常见的RTCP Type？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624081011816.png" class="" title="image-20230624081011816"><ul><li><p><strong>192 FIR</strong> Full INTRA-frame Request：代表向对方请求一个关键帧，比如多人会议中，突然有一个新用户加入，就需要通过FIR报文向其他用户请求一个关键帧，才能正常展示。</p></li><li><p><strong>193 NACK</strong> Negative Acknowledgement：当接收端收到的数据包有丢失的情况下，它会给发送端发送一个NACK，发送端收到NACK之后看看有没有超时，如果没有超时，就会重传接收端丢失的包。</p></li><li><p><strong>205 RTPFB</strong> Generic RTP Feedback. ：表示一般性的RTP Feedback，这种类型的RTCP中又有很多子类型，后面再做详细介绍。</p></li><li><p><strong>206 PSFB</strong> Payload-specific Feedback. ：也就是根据我们的负载情况，返回的一些RTCP信息。留作后续再做介绍。</p></li></ul><h2 id="二、SR、RR类型的RTCP"><a href="#二、SR、RR类型的RTCP" class="headerlink" title="二、SR、RR类型的RTCP"></a>二、SR、RR类型的RTCP</h2><h3 id="1、认识-RTCP-SR类型？一个SR中包含多少个Report-Block？为什么SR中也包含了接受数据的情况？"><a href="#1、认识-RTCP-SR类型？一个SR中包含多少个Report-Block？为什么SR中也包含了接受数据的情况？" class="headerlink" title="1、认识 RTCP SR类型？一个SR中包含多少个Report Block？为什么SR中也包含了接受数据的情况？"></a>1、认识 RTCP SR类型？一个SR中包含多少个Report Block？为什么SR中也包含了接受数据的情况？</h3><ul><li><strong>一个SR中包含多少个Report Block：</strong>一个SR中可以包含多个Report Block，具体多少个取决于有多少路流。</li><li><strong>为什么SR中也包含了接受数据的情况</strong>：主要是可以节省带宽。</li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624083107036.png" class="" title="image-20230624083107036"><h3 id="2、RTCP-中-Sender-Infomation-block中的主要数据？区分NTP和Timestamp这两个时间的区别？"><a href="#2、RTCP-中-Sender-Infomation-block中的主要数据？区分NTP和Timestamp这两个时间的区别？" class="headerlink" title="2、RTCP 中 Sender Infomation block中的主要数据？区分NTP和Timestamp这两个时间的区别？"></a>2、RTCP 中 Sender Infomation block中的主要数据？区分NTP和Timestamp这两个时间的区别？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624083530567.png" class="" title="image-20230624083530567"><ul><li><strong>NTP：</strong> 是真实世界的时间戳，是绝对时间戳，所有RTP包中的NTP标准是相同的。（比如音视频同步）</li><li><strong>Timestamp：</strong> 是相对时间戳，只针对单当前流的。不同流的RTP之间的Timestamp没有关系。</li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624083812871.png" class="" title="image-20230624083812871"><h3 id="3、RTCP-中-Receiver-Infomation-block中的主要数据？"><a href="#3、RTCP-中-Receiver-Infomation-block中的主要数据？" class="headerlink" title="3、RTCP 中 Receiver Infomation block中的主要数据？"></a>3、RTCP 中 Receiver Infomation block中的主要数据？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624083946475.png" class="" title="image-20230624083946475"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624084021562.png" class="" title="image-20230624084021562"><h3 id="4、RTCP中的RR报文？"><a href="#4、RTCP中的RR报文？" class="headerlink" title="4、RTCP中的RR报文？"></a>4、RTCP中的RR报文？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230624084318070.png" class="" title="image-20230624084318070"><h2 id="三、SDES-类型的RTCP-暂时了解作用即可"><a href="#三、SDES-类型的RTCP-暂时了解作用即可" class="headerlink" title="三、SDES 类型的RTCP(暂时了解作用即可)"></a>三、SDES 类型的RTCP(暂时了解作用即可)</h2><h3 id="1、WebRTC中使用SDES干啥？"><a href="#1、WebRTC中使用SDES干啥？" class="headerlink" title="1、WebRTC中使用SDES干啥？"></a>1、WebRTC中使用SDES干啥？</h3><ul><li>SDES 全称是 Source Description 报文。它属于RTCP协议的一部分，用于描述RTP流的发送者(源)信息。</li><li>例如 ：</li><li>CNAME: Sources的唯一名字,通常是一个域名,用于唯一标识一个发送者。</li><li>NAME: 发送者的名字,可选。</li></ul><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625065600861.png" class="" title="image-20230625065600861"><h3 id="2、SDES的报文格式是怎么样的？"><a href="#2、SDES的报文格式是怎么样的？" class="headerlink" title="2、SDES的报文格式是怎么样的？"></a>2、SDES的报文格式是怎么样的？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625065101826.png" class="" title="image-20230625065101826"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625065249629.png" class="" title="image-20230625065249629"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625065314157.png" class="" title="image-20230625065314157"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625065325836.png" class="" title="image-20230625065325836"><h2 id="四、BYE-、APP类型的RTCP报文"><a href="#四、BYE-、APP类型的RTCP报文" class="headerlink" title="四、BYE 、APP类型的RTCP报文"></a>四、BYE 、APP类型的RTCP报文</h2><h3 id="1、BYE报文的作用？"><a href="#1、BYE报文的作用？" class="headerlink" title="1、BYE报文的作用？"></a>1、BYE报文的作用？</h3><ul><li><strong>作用：如果想让哪个SSRC不要再传输数据了，就向该SSRC发送BYE报文即可。</strong></li></ul><h3 id="2、BYE报文的格式？"><a href="#2、BYE报文的格式？" class="headerlink" title="2、BYE报文的格式？"></a>2、BYE报文的格式？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070217862.png" class="" title="image-20230625070217862"><h3 id="3、APP类型的报文作用？"><a href="#3、APP类型的报文作用？" class="headerlink" title="3、APP类型的报文作用？"></a>3、APP类型的报文作用？</h3><ul><li>可以自定义RTCP消息，做到私有协议的效果。</li></ul><h3 id="4、APP类型的报文结构？"><a href="#4、APP类型的报文结构？" class="headerlink" title="4、APP类型的报文结构？"></a>4、APP类型的报文结构？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070454165.png" class="" title="image-20230625070454165"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070537339.png" class="" title="image-20230625070537339"><h2 id="四、RTCP-FB-Type-类型的RTCP报文"><a href="#四、RTCP-FB-Type-类型的RTCP报文" class="headerlink" title="四、RTCP FB Type 类型的RTCP报文"></a>四、RTCP FB Type 类型的RTCP报文</h2><h3 id="1、认识-RTCP-FB-Type的报文有哪些？"><a href="#1、认识-RTCP-FB-Type的报文有哪些？" class="headerlink" title="1、认识 RTCP FB Type的报文有哪些？"></a>1、认识 RTCP FB Type的报文有哪些？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070722439.png" class="" title="image-20230625070722439"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070757791.png" class="" title="image-20230625070757791"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070823106.png" class="" title="image-20230625070823106"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625070846131.png" class="" title="image-20230625070846131"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625071415927.png" class="" title="image-20230625071415927"><h2 id="四、认识Compound-RTCP"><a href="#四、认识Compound-RTCP" class="headerlink" title="四、认识Compound RTCP"></a>四、认识Compound RTCP</h2><h3 id="1、什么是-Compound-RTCP呢？"><a href="#1、什么是-Compound-RTCP呢？" class="headerlink" title="1、什么是 Compound RTCP呢？"></a>1、什么是 Compound RTCP呢？</h3><ul><li>将多个RTCP包放到同一个UDP包中发送</li><li>它们像栈一样存放，一个放在另一个后面，串联在一起</li><li>每个RTCP包之间，不需要明确的分割</li></ul><h3 id="2、Compound-RTCP的规则？"><a href="#2、Compound-RTCP的规则？" class="headerlink" title="2、Compound RTCP的规则？"></a>2、Compound RTCP的规则？</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625073452799.png" class="" title="image-20230625073452799"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625073536837.png" class="" title="image-20230625073536837"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625073606983.png" class="" title="image-20230625073606983"><h3 id="3、一个具体的抓包例子"><a href="#3、一个具体的抓包例子" class="headerlink" title="3、一个具体的抓包例子"></a>3、一个具体的抓包例子</h3><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625073632357.png" class="" title="image-20230625073632357"><img src="/2023/06/24/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F2-RTCP%E5%8D%8F%E8%AE%AE/image-20230625073652128.png" class="" title="image-20230625073652128">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量1-RTP协议、RTP扩展协议</title>
    <link href="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC服务质量综述"><a href="#一、WebRTC服务质量综述" class="headerlink" title="一、WebRTC服务质量综述"></a>一、WebRTC服务质量综述</h2><h3 id="1、一句话概述试试通信的目标是什么？"><a href="#1、一句话概述试试通信的目标是什么？" class="headerlink" title="1、一句话概述试试通信的目标是什么？"></a>1、一句话概述试试通信的目标是什么？</h3><ul><li>尽可能逼近或者达到<font color="red">面对面</font>交流的效果。</li></ul><h3 id="2、如果要达到上面实时通信的目标，我们要看哪三个重要指标？"><a href="#2、如果要达到上面实时通信的目标，我们要看哪三个重要指标？" class="headerlink" title="2、如果要达到上面实时通信的目标，我们要看哪三个重要指标？"></a>2、如果要达到上面实时通信的目标，我们要看哪三个重要指标？</h3><ul><li>实时通信的延迟指标</li><li>音频服务质量</li><li>视频服务质量</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072418723.png" class="" title="image-20230622072418723"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072424230.png" class="" title="image-20230622072424230"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072429443.png" class="" title="image-20230622072429443"><h3 id="3、音视频质量与带宽大小、实时性、网络质量之间有矛盾吗？"><a href="#3、音视频质量与带宽大小、实时性、网络质量之间有矛盾吗？" class="headerlink" title="3、音视频质量与带宽大小、实时性、网络质量之间有矛盾吗？"></a>3、音视频质量与带宽大小、实时性、网络质量之间有矛盾吗？</h3><ul><li><font color="red">有矛盾的：</font>一般来说音视频质量要求越高，那么需要的带宽就越大，实时性就会降低，需要更高的网络质量来传输。</li></ul><h3 id="4、WebRTC是从哪些方面来解决这些矛盾呢？（暂时无法全面理解没关系）"><a href="#4、WebRTC是从哪些方面来解决这些矛盾呢？（暂时无法全面理解没关系）" class="headerlink" title="4、WebRTC是从哪些方面来解决这些矛盾呢？（暂时无法全面理解没关系）"></a>4、WebRTC是从哪些方面来解决这些矛盾呢？（暂时无法全面理解没关系）</h3><ul><li>这个图，对应1202，可以多听一听。</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072656830.png" class="" title="image-20230622072656830"><h2 id="二、RTP协议"><a href="#二、RTP协议" class="headerlink" title="二、RTP协议"></a>二、RTP协议</h2><h3 id="1、RTP-x2F-RTCP协议在整个协议栈中的位置？（传输层？应用层？）"><a href="#1、RTP-x2F-RTCP协议在整个协议栈中的位置？（传输层？应用层？）" class="headerlink" title="1、RTP&#x2F;RTCP协议在整个协议栈中的位置？（传输层？应用层？）"></a>1、RTP&#x2F;RTCP协议在整个协议栈中的位置？（传输层？应用层？）</h3><ul><li>属于 <font color="red">应用层</font> 协议，基于传输层的UDP协议之上。</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072902760.png" class="" title="image-20230622072902760"><h3 id="2、RTP-Header-中的主要字段，要能分别说出下图中字段的含义？"><a href="#2、RTP-Header-中的主要字段，要能分别说出下图中字段的含义？" class="headerlink" title="2、RTP Header 中的主要字段，要能分别说出下图中字段的含义？"></a>2、RTP Header 中的主要字段，要能分别说出下图中字段的含义？</h3><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622072946383.png" class="" title="image-20230622072946383"><ul><li><strong>V：</strong>Version，代表版本号，默认是2，表示第二版本的RTP头协议。</li><li><strong>P：</strong>Padding，表示RTP中是否具有填充数据，如果为1代表有填充数据。</li><li><strong>X：</strong>表示RTP中是否具有扩展头，为1表示有扩展头。</li><li><strong>CC：</strong>Contribute Source，表示对于这份数据来说，它是由哪些源共同产生的，CC代表贡献值的个数。如果有2个贡献者，那么CC的值就为2。</li><li><strong>M：</strong>Mark，标记位，值为1时，代表我们视频帧分包之后的最后一个包。</li><li><strong>PT：</strong>PayloadType，也就是我们这个包的负载数据是什么。比如音频Opus是111，视频是127。</li><li><strong>Sequence Number：</strong>包序号，主要用于包排序，以及丢包重传机制的依据。</li><li><strong>Timestamp：</strong>代表我们这个数据源产生的时间戳。对于视频帧来说，同一个帧可能会被分成几十个包，但是这些包产生的时间相同，所以它们的 Timestamp 也是相同的。还有一个特性，Timestamp是随着时间的流逝，递增的。</li><li><strong>SSRC：</strong>同步源标识符，如果你同时发送了共享桌面流和视频流，这两个流的PT可能是相同的，但是它们的SSRC是独立的，就可以借助SSRC区分。</li><li><strong>CSRC：</strong>代表我们这个数据，是由哪个贡献者贡献的。</li></ul><h2 id="三、RTP扩展协议"><a href="#三、RTP扩展协议" class="headerlink" title="三、RTP扩展协议"></a>三、RTP扩展协议</h2><h3 id="1、在RTP头中的哪个标记位表示RTP是带有扩展头的"><a href="#1、在RTP头中的哪个标记位表示RTP是带有扩展头的" class="headerlink" title="1、在RTP头中的哪个标记位表示RTP是带有扩展头的?"></a>1、在RTP头中的哪个标记位表示RTP是带有扩展头的?</h3><ul><li><strong>X</strong>位置为1，表示带有扩展头</li></ul><h3 id="2、扩展头中的Profile代表什么含义？"><a href="#2、扩展头中的Profile代表什么含义？" class="headerlink" title="2、扩展头中的Profile代表什么含义？"></a>2、扩展头中的Profile代表什么含义？</h3><ul><li><strong>Profile表示扩展头的格式</strong></li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080507599.png" class="" title="image-20230622080507599"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080511896.png" class="" title="image-20230622080511896"><h3 id="3、扩展头中的Length代表什么含义？"><a href="#3、扩展头中的Length代表什么含义？" class="headerlink" title="3、扩展头中的Length代表什么含义？"></a>3、扩展头中的Length代表什么含义？</h3><ul><li>表示后面跟着的扩展头有几个字节</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080551539.png" class="" title="image-20230622080551539"><h3 id="4、看图理解什么是一字节的扩展头？什么是两字节的扩展头？"><a href="#4、看图理解什么是一字节的扩展头？什么是两字节的扩展头？" class="headerlink" title="4、看图理解什么是一字节的扩展头？什么是两字节的扩展头？"></a>4、看图理解什么是一字节的扩展头？什么是两字节的扩展头？</h3><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080611617.png" class="" title="image-20230622080611617"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080616401.png" class="" title="image-20230622080616401"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080621134.png" class="" title="image-20230622080621134"><ul><li>【在一字节的扩展头中】上图中紧跟ID后面的L，表示后面的Data部分数据长度是(L+1)字节。</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080631770.png" class="" title="image-20230622080631770"><ul><li>【在两字节的扩展头中】上图中紧跟ID后面的L，表示后面的Data部分数据长度是(L)字节，比如L&#x3D;0，表示后面没有数据。这个与一字节扩展头是不同的。</li></ul><h3 id="5、在WebRTC中有哪些用到的扩展头-了解即可"><a href="#5、在WebRTC中有哪些用到的扩展头-了解即可" class="headerlink" title="5、在WebRTC中有哪些用到的扩展头(了解即可)"></a>5、在WebRTC中有哪些用到的扩展头(了解即可)</h3><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080649659.png" class="" title="image-20230622080649659"><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080654875.png" class="" title="image-20230622080654875"><h3 id="6、最后我们认识一个完整RTP头"><a href="#6、最后我们认识一个完整RTP头" class="headerlink" title="6、最后我们认识一个完整RTP头"></a>6、最后我们认识一个完整RTP头</h3><ul><li>12-4中10分有比较详细，总体的讲解。</li></ul><img src="/2023/06/22/WebRTC%E6%BA%90%E7%A0%81repeat/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F1-RTP%E5%8D%8F%E8%AE%AE/image-20230622080711863.png" class="" title="image-20230622080711863">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输7-网络传输类的创建与数据传输</title>
    <link href="/2023/03/28/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%937/"/>
    <url>/2023/03/28/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%937/</url>
    
    <content type="html"><![CDATA[<h2 id="一、网络传输类的创建与数据传输"><a href="#一、网络传输类的创建与数据传输" class="headerlink" title="一、网络传输类的创建与数据传输"></a>一、网络传输类的创建与数据传输</h2><h3 id="1、总纲图：ICE相关的类是如何创建的？本端的音视频数据是如何发送的，对端的音视频数据是如何接收的？"><a href="#1、总纲图：ICE相关的类是如何创建的？本端的音视频数据是如何发送的，对端的音视频数据是如何接收的？" class="headerlink" title="1、总纲图：ICE相关的类是如何创建的？本端的音视频数据是如何发送的，对端的音视频数据是如何接收的？"></a>1、总纲图：ICE相关的类是如何创建的？本端的音视频数据是如何发送的，对端的音视频数据是如何接收的？</h3><img src="/2023/03/28/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%937/image-20230324065829036.png" class="" title="image-20230324065829036"><ul><li>此图超级精髓</li></ul><h3 id="2、来看第一步，WebRTC是如何将网络传输中的这些对象创建出来的？"><a href="#2、来看第一步，WebRTC是如何将网络传输中的这些对象创建出来的？" class="headerlink" title="2、来看第一步，WebRTC是如何将网络传输中的这些对象创建出来的？"></a>2、来看第一步，WebRTC是如何将网络传输中的这些对象创建出来的？</h3><ul><li><p>一开始就是创建PeerConnection，也就是途中绿色的部分。</p></li><li><p>PeerConnection是由PeerConnectionFactory创建出来的。</p></li><li><p>在我们创建PeerConnection的时候，会创建出JsepTransportController，这个类用于传输的管理与控制。</p></li><li><p>通过JsepTransportController，我们就可以创建出一个个JsepTransport对象，每一个Transport用于传输一种不同类型的媒体数据；比如音频有音频的JsepTransport，视频有视频的JsepTransport，当然如果我们在协商的时候选择了通道复用模式，那么音视频将会复用同一个JsepTransport。</p></li><li><p>默认情况下，WebRTC都是使用通道复用模式，所以我们通常在跟踪代码的情况下，只有一个JsepTransport。</p></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输6-连通性检测</title>
    <link href="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/"/>
    <url>/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/</url>
    
    <content type="html"><![CDATA[<h2 id="一、连通性检测"><a href="#一、连通性检测" class="headerlink" title="一、连通性检测"></a>一、连通性检测</h2><h3 id="1、连通性检测的过程？"><a href="#1、连通性检测的过程？" class="headerlink" title="1、连通性检测的过程？"></a>1、连通性检测的过程？</h3><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323064913640.png" class="" title="image-20230323064913640"><blockquote><p>情况①：</p><p>在应用层收到Candidate之后，就会调用AddIceCandidate这个方法，然后就按照图中左侧的调用栈，一路调用到核心层；</p><p>在P2PTransportChannel::FinishAddingRemoteCandidate 这个函数中，首先会调用CreateConnections将Connection对象创建出来；之后它会调用SortConnectionsAndUpdateState这个方法，在这个方法中做了三个非常重要的事情；</p><p>第一件事情：对所有的Connection进行排序，在排序后的所有Connection中找出最优的Connection。</p><p>第二件事情：将每个网卡上不重要的Connection裁剪掉。</p><p>第三件事情：就是进行连通性检测，会调用MaybeStartPing来做连通性检测的工作。</p></blockquote><blockquote><p>情况②：</p><p>就是收到本地的OnCandidateReady之后，会触发OnPortReady，在OnPortReady中也是先创建Connection，然后调用SortConnectionsAndUpdateState，后面也会做三件事件；最终调用MaybeStartPing来进行连通性的检测。</p></blockquote><blockquote><p>情况③：</p><p>在我们本端没有创建Connections的情况下，在收到对端发送来的BindRequest请求之后，会通过网络层，层层上次，最终调用OnUnknownAddress；</p><p>在OnUnknownAddress 这个方法也是先创建Connections，然后调用 SortConnectionsAndUpdateState 进行三件事，最终调用 MaybeStartPing 来完成连通性检测；</p></blockquote><h3 id="2、所有的连通性检测都是在什么之后进行的？"><a href="#2、所有的连通性检测都是在什么之后进行的？" class="headerlink" title="2、所有的连通性检测都是在什么之后进行的？"></a>2、所有的连通性检测都是在什么之后进行的？</h3><ul><li>所有的连通性检测，都是在创建Connections之后进行的。</li></ul><h3 id="3、调用MaybeStartPing之后，只是完成了连通性检测的一半，那么另一半是什么？"><a href="#3、调用MaybeStartPing之后，只是完成了连通性检测的一半，那么另一半是什么？" class="headerlink" title="3、调用MaybeStartPing之后，只是完成了连通性检测的一半，那么另一半是什么？"></a>3、调用MaybeStartPing之后，只是完成了连通性检测的一半，那么另一半是什么？</h3><ul><li>最终调用Connection::ping 之后，会发出去一个 StunBindingRequest给远端；</li><li>然后会收到远端来的StunBindingResponse消息，触发Connection::OnReadPacket方法，最终触发Connection::ReceivedPingResponse方法</li><li>这就完成了整个连通性检测的过程。</li></ul><h3 id="4、下面对连通性检测一些关键方法做介绍？"><a href="#4、下面对连通性检测一些关键方法做介绍？" class="headerlink" title="4、下面对连通性检测一些关键方法做介绍？"></a>4、下面对连通性检测一些关键方法做介绍？</h3><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070234368.png" class="" title="image-20230323070234368"><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070239154.png" class="" title="image-20230323070239154"><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070242886.png" class="" title="image-20230323070242886"><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070247529.png" class="" title="image-20230323070247529"><p>总之在FindNextPingableConnection(…)这个方法中，实现了一套非常复杂的选择Connection的逻辑。</p><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070300027.png" class="" title="image-20230323070300027"><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070303954.png" class="" title="image-20230323070303954"><img src="/2023/03/27/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%936/image-20230323070308244.png" class="" title="image-20230323070308244">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输5-Candidate传递给应用层、Connection生成/排序/选择/裁剪、ICE提名、ICE-LITE</title>
    <link href="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/"/>
    <url>/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Candidate-交给应用层的、Connection生成过程"><a href="#一、Candidate-交给应用层的、Connection生成过程" class="headerlink" title="一、Candidate 交给应用层的、Connection生成过程"></a>一、Candidate 交给应用层的、Connection生成过程</h2><h3 id="1、WebRTC-为什么要将收集到的各种-Candidate-交给应用层？"><a href="#1、WebRTC-为什么要将收集到的各种-Candidate-交给应用层？" class="headerlink" title="1、WebRTC 为什么要将收集到的各种 Candidate 交给应用层？"></a>1、WebRTC 为什么要将收集到的各种 Candidate 交给应用层？</h3><ul><li>因为通信的双方，需要获取对方的 Candidate 才能开始尝试与对端进行连接。</li></ul><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321064349698.png" class="" title="image-20230321064349698"><h3 id="2、WebRTC-中的网络连接用什么表示？它由哪两个重要部分构成？"><a href="#2、WebRTC-中的网络连接用什么表示？它由哪两个重要部分构成？" class="headerlink" title="2、WebRTC 中的网络连接用什么表示？它由哪两个重要部分构成？"></a>2、WebRTC 中的网络连接用什么表示？它由哪两个重要部分构成？</h3><ul><li>WebRTC 中用 Connection 表示一个网络连接</li><li>Connection 由本地Port和远端Candidate构成</li></ul><h3 id="3、WebRTC-创建连接的三种方式是哪三种？"><a href="#3、WebRTC-创建连接的三种方式是哪三种？" class="headerlink" title="3、WebRTC 创建连接的三种方式是哪三种？"></a>3、WebRTC 创建连接的三种方式是哪三种？</h3><ul><li>控制方，收到对端Candidate后，调用 AddIceCandidate时</li><li>被控制方，先收到对端Candidate后，生成本地Port时</li><li>控制方，收到Candidate之前，收到另一端的BindingRequest请求时</li></ul><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321064848479.png" class="" title="image-20230321064848479"><ul><li><p>由上图中可以知道 WebRTC 创建 Connecton 的方式有很多种，这就导致会创建出很多Connection，但是最终只需要一个Connection，所以后面会对Connection进行裁剪。</p></li><li><p>TODO：代码上观察一下，到底生成了多少Connection？</p></li></ul><h2 id="二、Connection-排序"><a href="#二、Connection-排序" class="headerlink" title="二、Connection 排序"></a>二、Connection 排序</h2><h3 id="1、WebRTC-是在什么时机以及什么方法内，对Connection进行排序的？"><a href="#1、WebRTC-是在什么时机以及什么方法内，对Connection进行排序的？" class="headerlink" title="1、WebRTC 是在什么时机以及什么方法内，对Connection进行排序的？"></a>1、WebRTC 是在什么时机以及什么方法内，对Connection进行排序的？</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065237938.png" class="" title="image-20230321065237938"><ul><li>上述流程会调用 SortConnectionAndUpdateState 进行Connection的排序。</li></ul><h3 id="2、一个特别重要的函数-SortAndSwitchConnection，它实现了哪三大功能？"><a href="#2、一个特别重要的函数-SortAndSwitchConnection，它实现了哪三大功能？" class="headerlink" title="2、一个特别重要的函数 SortAndSwitchConnection，它实现了哪三大功能？"></a>2、一个特别重要的函数 SortAndSwitchConnection，它实现了哪三大功能？</h3><ul><li>SortAndSwitchConnection</li><li>该函数中实现了三大功能：Connection排序、裁剪和连通性检测</li></ul><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065829665.png" class="" title="image-20230321065829665"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065840160.png" class="" title="image-20230321065840160"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065925761.png" class="" title="image-20230321065925761"><ul><li>上图的Connections，就是之前介绍通过三种方式获取的所有Connection</li><li>比较方式，先借助 CompareConnections(..)进行比较，如果cmp&#x3D;&#x3D;0，那么就比较他们的rtt()也就是时延</li></ul><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065952857.png" class="" title="image-20230321065952857"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321065956782.png" class="" title="image-20230321065956782"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070001961.png" class="" title="image-20230321070001961"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070007129.png" class="" title="image-20230321070007129"><h2 id="三、WebRTC是如何选择Connection的？如何裁剪的呢？"><a href="#三、WebRTC是如何选择Connection的？如何裁剪的呢？" class="headerlink" title="三、WebRTC是如何选择Connection的？如何裁剪的呢？"></a>三、WebRTC是如何选择Connection的？如何裁剪的呢？</h2><h3 id="1、关键函数-ShouldSwitchConnection"><a href="#1、关键函数-ShouldSwitchConnection" class="headerlink" title="1、关键函数 ShouldSwitchConnection"></a>1、关键函数 ShouldSwitchConnection</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070123982.png" class="" title="image-20230321070123982"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070128437.png" class="" title="image-20230321070128437"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070133075.png" class="" title="image-20230321070133075"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070137282.png" class="" title="image-20230321070137282"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070141939.png" class="" title="image-20230321070141939"><ul><li>上面五种情况，可能导致切换连接。</li></ul><h3 id="2、选择出来了比较合适的Connection之后，如何对Connection进行裁剪呢？"><a href="#2、选择出来了比较合适的Connection之后，如何对Connection进行裁剪呢？" class="headerlink" title="2、选择出来了比较合适的Connection之后，如何对Connection进行裁剪呢？"></a>2、选择出来了比较合适的Connection之后，如何对Connection进行裁剪呢？</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070442199.png" class="" title="image-20230321070442199"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070447058.png" class="" title="image-20230321070447058"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070454666.png" class="" title="image-20230321070454666"><ul><li>我们要知道Connection的裁剪，一定是在Connection选择之后，才进行裁剪的。</li></ul><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070528711.png" class="" title="image-20230321070528711"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230321070535472.png" class="" title="image-20230321070535472"><blockquote><p>核心知识两点：</p><p>①裁剪工作一定是选择出了最优的Connection之后，才能对其他Connection进行裁剪。</p><p>②裁剪的具体流程如上所述。</p></blockquote><h2 id="四、ICE-提名"><a href="#四、ICE-提名" class="headerlink" title="四、ICE 提名"></a>四、ICE 提名</h2><h3 id="1、ICE提名有什么意义？"><a href="#1、ICE提名有什么意义？" class="headerlink" title="1、ICE提名有什么意义？"></a>1、ICE提名有什么意义？</h3><ul><li><p>①由于ICE会收集到很多Candidate，并且可以与对端的Candidate会形成很多CandidatePair，如果对每个Pair都做检测，会花费很长时间，因此有了ICE提名。</p></li><li><p>②当提名被接受后，对端会使用相同的Pair进行检测。</p></li><li><p>③当连接建立起来后，排在后面的Pair将不再进行检测。</p></li><li><p>最终缩短了连接建立过程的时间，这是最终目标。</p></li></ul><h3 id="2、从ICE角色来看连通性检测？"><a href="#2、从ICE角色来看连通性检测？" class="headerlink" title="2、从ICE角色来看连通性检测？"></a>2、从ICE角色来看连通性检测？</h3><ul><li><p>①控制角色：也就是连通性检测的发起端</p></li><li><p>②被控制角色：连通性检测的接收端</p></li><li><p>通常情况下，我们在进行连通性检测的时候，首先由控制角色发起连通性检测；</p></li><li><p>当被控制角色收到控制角色发起的连通性检测请求后，被控制角色会在自己的pair中寻找与之相同的Pair；</p></li><li><p>之后再由被控制方向控制方，发起连通性检测；</p></li><li><p>当双方连通性检测都验证成功之后，这个连接就算建立起来了。</p></li></ul><h3 id="3、那么提名规则有哪些呢？"><a href="#3、那么提名规则有哪些呢？" class="headerlink" title="3、那么提名规则有哪些呢？"></a>3、那么提名规则有哪些呢？</h3><ul><li>常规提名（Regular Nomination）</li><li>激进提名（Aggressive Nomination）</li></ul><h3 id="4、常规提名的过程是怎么样的？"><a href="#4、常规提名的过程是怎么样的？" class="headerlink" title="4、常规提名的过程是怎么样的？"></a>4、常规提名的过程是怎么样的？</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230323064439192.png" class="" title="image-20230323064439192"><ul><li>主要是多了一个flag：useCandidate进行提名</li></ul><h3 id="5、激进提名的过程是怎么样的？"><a href="#5、激进提名的过程是怎么样的？" class="headerlink" title="5、激进提名的过程是怎么样的？"></a>5、激进提名的过程是怎么样的？</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230323064520941.png" class="" title="image-20230323064520941"><ul><li>可以理解为，常规提名进行了三次握手，激进提名是减少了一次来回的步骤。</li><li>对于WebRTC来讲，默认就是使用激进提名规则。</li></ul><h3 id="6、ICE-FULL-与-ICE-LITE-的区别是什么？"><a href="#6、ICE-FULL-与-ICE-LITE-的区别是什么？" class="headerlink" title="6、ICE-FULL 与 ICE-LITE 的区别是什么？"></a>6、ICE-FULL 与 ICE-LITE 的区别是什么？</h3><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230323064637622.png" class="" title="image-20230323064637622"><img src="/2023/03/26/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%935/image-20230323064645272.png" class="" title="image-20230323064645272"><ul><li>思考一下：现在公司使用的 ICE-FULL 还是 ICE-LITE</li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输4-Turn协议、Turn连接、Turn消息机制、Turn类型的candidate</title>
    <link href="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/"/>
    <url>/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Turn原理、Turn连接"><a href="#一、Turn原理、Turn连接" class="headerlink" title="一、Turn原理、Turn连接"></a>一、Turn原理、Turn连接</h2><h3 id="1、Turn协议工作原理？"><a href="#1、Turn协议工作原理？" class="headerlink" title="1、Turn协议工作原理？"></a>1、Turn协议工作原理？</h3><blockquote><p>在Turn协议中，主动发起请求的一端叫做 Client 端。</p><p>Turn Server 会为 Client 端分配 relay 3478端口，用于接受 Peer 端发送来的数据。</p><p>被动端称为 Peer 端，当它知道 Client 端的 relay 地址之后，它就可以向 relay 地址直接发送数据。</p><p>Turn Server 收到 Peer 端数据后，将会输出通过 3478 转发给Client端。</p><p>而 Turn Client 端发送数据到 Turn Server 之后，Turn Server 会解析数据的目的地址，然后会通过 relay 地址，转给对应的 PeerA 或 PeerB。</p></blockquote><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317065814179.png" class="" title="image-20230317065814179"><h3 id="2、Turn连接的-5-元组，为什么不同呢？"><a href="#2、Turn连接的-5-元组，为什么不同呢？" class="headerlink" title="2、Turn连接的 5 元组，为什么不同呢？"></a>2、Turn连接的 5 元组，为什么不同呢？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317065930504.png" class="" title="image-20230317065930504"><h3 id="3、TurnClient-与-TurnServer-的连接过程？"><a href="#3、TurnClient-与-TurnServer-的连接过程？" class="headerlink" title="3、TurnClient 与 TurnServer 的连接过程？"></a>3、TurnClient 与 TurnServer 的连接过程？</h3><ul><li>这个过程，可以倒回来多听几遍，很有用。</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070114891.png" class="" title="image-20230317070114891"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070314842.png" class="" title="image-20230317070314842"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070319231.png" class="" title="image-20230317070319231"><ul><li>上面图中并没有带有凭证，所以TURN Server会给 TURN Client 端发送一个 401.</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070344237.png" class="" title="image-20230317070344237"><ul><li>0x0113 中的 11 代表错误消息，然后带了个ERROR-CODE 401 就是表示未授权</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070413142.png" class="" title="image-20230317070413142"><ul><li>上图是TURN Client收到 401之后，重新带上凭证去获取，这个凭证通常是USERNAME</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070422646.png" class="" title="image-20230317070422646"><blockquote><p>上图 是Allocate 成功响应的消息类型，就会带有relay地址</p><p>XOR-RELAYED-ADDRESS 是服务端为我们分配的 Relay地址</p><p>XOR-MAPPER-ADDRESS：是本机映射的外网地址</p><p>LIFETIME：表示我们这个连接可以持续多长时间，这里是以秒为单位的 600秒。</p></blockquote><h3 id="4、TurnClient-如何与-TurnServer-进行保活的呢？"><a href="#4、TurnClient-如何与-TurnServer-进行保活的呢？" class="headerlink" title="4、TurnClient 如何与 TurnServer 进行保活的呢？"></a>4、TurnClient 如何与 TurnServer 进行保活的呢？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070549194.png" class="" title="image-20230317070549194"><ul><li>上图是保活机制，如果需要连接一直有效，那么就需要进行【保活】</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070600820.png" class="" title="image-20230317070600820"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070605678.png" class="" title="image-20230317070605678"><ul><li>上面两图就是保活的request 和 response的抓包，LIFETIME&#x3D;0表示服务端已经关闭连接了。</li></ul><h2 id="二、Turn协议数据传输机制？"><a href="#二、Turn协议数据传输机制？" class="headerlink" title="二、Turn协议数据传输机制？"></a>二、Turn协议数据传输机制？</h2><h3 id="1、TurnServer-如何判断哪些来源数据是需要进行传输的？哪些来源数据是需要丢弃的？"><a href="#1、TurnServer-如何判断哪些来源数据是需要进行传输的？哪些来源数据是需要丢弃的？" class="headerlink" title="1、TurnServer 如何判断哪些来源数据是需要进行传输的？哪些来源数据是需要丢弃的？"></a>1、TurnServer 如何判断哪些来源数据是需要进行传输的？哪些来源数据是需要丢弃的？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070853524.png" class="" title="image-20230317070853524"><ul><li>需要 Client 向 TURN Server 端进行授权申请，将合法的用户Peer A告诉 TURN Server，后续TURN Server就只转发 Client 和 Peer A之间的数据。</li></ul><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070919880.png" class="" title="image-20230317070919880"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317070928462.png" class="" title="image-20230317070928462"><h3 id="2、Turn传输数据的机制有哪两种？"><a href="#2、Turn传输数据的机制有哪两种？" class="headerlink" title="2、Turn传输数据的机制有哪两种？"></a>2、Turn传输数据的机制有哪两种？</h3><ul><li>Send&#x2F;Data 机制</li><li>ChannelData 机制</li></ul><h3 id="3、Send-与-Data-机制是怎么样的？"><a href="#3、Send-与-Data-机制是怎么样的？" class="headerlink" title="3、Send 与 Data 机制是怎么样的？"></a>3、Send 与 Data 机制是怎么样的？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317072905447.png" class="" title="image-20230317072905447"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317072910891.png" class="" title="image-20230317072910891"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317072916388.png" class="" title="image-20230317072916388"><h3 id="4、ChannelData-机制是怎么样的？"><a href="#4、ChannelData-机制是怎么样的？" class="headerlink" title="4、ChannelData 机制是怎么样的？"></a>4、ChannelData 机制是怎么样的？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317072957363.png" class="" title="image-20230317072957363"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317073008866.png" class="" title="image-20230317073008866"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317073012681.png" class="" title="image-20230317073012681"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317073018109.png" class="" title="image-20230317073018109"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317073023233.png" class="" title="image-20230317073023233"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230317073028401.png" class="" title="image-20230317073028401"><h2 id="三、收集-Turn-类型的-Candidate"><a href="#三、收集-Turn-类型的-Candidate" class="headerlink" title="三、收集 Turn 类型的 Candidate"></a>三、收集 Turn 类型的 Candidate</h2><h3 id="1、WebRTC-STUN-x2F-TURN-消息类型？"><a href="#1、WebRTC-STUN-x2F-TURN-消息类型？" class="headerlink" title="1、WebRTC STUN&#x2F;TURN 消息类型？"></a>1、WebRTC STUN&#x2F;TURN 消息类型？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230321063931016.png" class="" title="image-20230321063931016"><h3 id="2、代码逻辑"><a href="#2、代码逻辑" class="headerlink" title="2、代码逻辑"></a>2、代码逻辑</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230321064014465.png" class="" title="image-20230321064014465"><ul><li>上面的步骤，需要的时候自己走一遍，理解每个方法都做了些什么？</li></ul><h3 id="3、那么-WebRTC-收到来自-TURN-的-AllocateResponse-会怎么做呢？"><a href="#3、那么-WebRTC-收到来自-TURN-的-AllocateResponse-会怎么做呢？" class="headerlink" title="3、那么 WebRTC 收到来自 TURN 的 AllocateResponse 会怎么做呢？"></a>3、那么 WebRTC 收到来自 TURN 的 AllocateResponse 会怎么做呢？</h3><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230321064117503.png" class="" title="image-20230321064117503"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230321064122084.png" class="" title="image-20230321064122084"><img src="/2023/03/22/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%934/image-20230321064127081.png" class="" title="image-20230321064127081">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输3-获取本地Candidate、认识Stun、StunRequest、StunResponse</title>
    <link href="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/"/>
    <url>/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/</url>
    
    <content type="html"><![CDATA[<h2 id="一、获取本地Candidate"><a href="#一、获取本地Candidate" class="headerlink" title="一、获取本地Candidate"></a>一、获取本地Candidate</h2><h3 id="1、获取本地Candidate的过程？"><a href="#1、获取本地Candidate的过程？" class="headerlink" title="1、获取本地Candidate的过程？"></a>1、获取本地Candidate的过程？</h3><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073044450.png" class="" title="image-20230316073044450"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073049698.png" class="" title="image-20230316073049698"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073059188.png" class="" title="image-20230316073059188"><h2 id="二、理解Stun协议"><a href="#二、理解Stun协议" class="headerlink" title="二、理解Stun协议"></a>二、理解Stun协议</h2><h3 id="1、STUN的全称是什么？STUN存在的意义是什么？STUN的工作模式是什么？"><a href="#1、STUN的全称是什么？STUN存在的意义是什么？STUN的工作模式是什么？" class="headerlink" title="1、STUN的全称是什么？STUN存在的意义是什么？STUN的工作模式是什么？"></a>1、STUN的全称是什么？STUN存在的意义是什么？STUN的工作模式是什么？</h3><ul><li><p>Session Tranversal Utilities for NAT</p></li><li><p>STUN存在的目的就是进行 NAT 穿越</p></li><li><p>STUN是典型的客户端&#x2F;服务器模式。客户端发送请求、服务端进行响应。</p></li></ul><h3 id="2、-STUN消息类型？"><a href="#2、-STUN消息类型？" class="headerlink" title="2、 STUN消息类型？"></a>2、 STUN消息类型？</h3><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073400268.png" class="" title="image-20230316073400268"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073409245.png" class="" title="image-20230316073409245"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073413934.png" class="" title="image-20230316073413934"><blockquote><p>N：None<br>M：Must<br>O:Options</p></blockquote><h3 id="3、认识-StunAttribute-类结构图？"><a href="#3、认识-StunAttribute-类结构图？" class="headerlink" title="3、认识 StunAttribute 类结构图？"></a>3、认识 StunAttribute 类结构图？</h3><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073505754.png" class="" title="image-20230316073505754"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073509553.png" class="" title="image-20230316073509553"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073513670.png" class="" title="image-20230316073513670"><h3 id="4、认识StunBindingRequest-？"><a href="#4、认识StunBindingRequest-？" class="headerlink" title="4、认识StunBindingRequest ？"></a>4、认识StunBindingRequest ？</h3><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073527129.png" class="" title="image-20230316073527129"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073531529.png" class="" title="image-20230316073531529"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073534911.png" class="" title="image-20230316073534911"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073538630.png" class="" title="image-20230316073538630"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073542629.png" class="" title="image-20230316073542629"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073545958.png" class="" title="image-20230316073545958"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073550099.png" class="" title="image-20230316073550099"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073553869.png" class="" title="image-20230316073553869"><h3 id="5、如何解析-StunBindingResponse-消息"><a href="#5、如何解析-StunBindingResponse-消息" class="headerlink" title="5、如何解析 StunBindingResponse 消息"></a>5、如何解析 StunBindingResponse 消息</h3><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073628090.png" class="" title="image-20230316073628090"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073632229.png" class="" title="image-20230316073632229"><img src="/2023/03/20/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%933/image-20230316073638085.png" class="" title="image-20230316073638085">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输2-PortAllocator、AllocationSequence</title>
    <link href="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/"/>
    <url>/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2><h3 id="1、PortAllocator-类关系图？"><a href="#1、PortAllocator-类关系图？" class="headerlink" title="1、PortAllocator 类关系图？"></a>1、PortAllocator 类关系图？</h3><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065618548.png" class="" title="image-20230316065618548"><h3 id="2、什么时候创建-BasicProtAllocator对象？"><a href="#2、什么时候创建-BasicProtAllocator对象？" class="headerlink" title="2、什么时候创建 BasicProtAllocator对象？"></a>2、什么时候创建 BasicProtAllocator对象？</h3><ul><li>在 CreatePeerConnection 的时候，创建 BasicPortAllocator对象。</li><li>也就是一个 PeerConnection 对应一个 BasicPortAllocator 对象。</li></ul><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065812873.png" class="" title="image-20230316065812873"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065817523.png" class="" title="image-20230316065817523"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065821625.png" class="" title="image-20230316065821625"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065825666.png" class="" title="image-20230316065825666"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065829199.png" class="" title="image-20230316065829199"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065833826.png" class="" title="image-20230316065833826"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316065838014.png" class="" title="image-20230316065838014"><h2 id="二、认识-AllocationSequence"><a href="#二、认识-AllocationSequence" class="headerlink" title="二、认识 AllocationSequence"></a>二、认识 AllocationSequence</h2><h3 id="1、AllocationSequence-类结构？"><a href="#1、AllocationSequence-类结构？" class="headerlink" title="1、AllocationSequence 类结构？"></a>1、AllocationSequence 类结构？</h3><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070014239.png" class="" title="image-20230316070014239"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070019424.png" class="" title="image-20230316070019424"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070024243.png" class="" title="image-20230316070024243"><h3 id="2、AllocationSequence-的作用是啥？"><a href="#2、AllocationSequence-的作用是啥？" class="headerlink" title="2、AllocationSequence 的作用是啥？"></a>2、AllocationSequence 的作用是啥？</h3><ul><li>AllocationSequence作用：就是用来创建 candidate 的</li></ul><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070142468.png" class="" title="image-20230316070142468"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070149758.png" class="" title="image-20230316070149758"><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070157010.png" class="" title="image-20230316070157010"><h3 id="3、PeerConnection、PortAllocator、PortAllocationSession之间的数目关系？"><a href="#3、PeerConnection、PortAllocator、PortAllocationSession之间的数目关系？" class="headerlink" title="3、PeerConnection、PortAllocator、PortAllocationSession之间的数目关系？"></a>3、PeerConnection、PortAllocator、PortAllocationSession之间的数目关系？</h3><ul><li>每个PeerConnection 有一个 PortAllocator</li><li>每个 PortAllocator 对应一个 PortAllocationSession</li></ul><h3 id="4、Network、AllocationSequence、UDPPort、RelayPort、Candiate之间的数目关系？【最重要的概念点】"><a href="#4、Network、AllocationSequence、UDPPort、RelayPort、Candiate之间的数目关系？【最重要的概念点】" class="headerlink" title="4、Network、AllocationSequence、UDPPort、RelayPort、Candiate之间的数目关系？【最重要的概念点】"></a>4、Network、AllocationSequence、UDPPort、RelayPort、Candiate之间的数目关系？【最重要的概念点】</h3><ul><li>每个 Network 对应一个 AllocationSequence</li><li>UDPPort&#x2F;RelayPort 等都是 AllocationSequence 分配的</li><li>而 Candidate 又是有 UDPPort&#x2F;RelayPort生成的</li></ul><img src="/2023/03/18/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%932/image-20230316070609583.png" class="" title="image-20230316070609583">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC网络传输1-NetworkManager、初识ICE、Candidate概念</title>
    <link href="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/"/>
    <url>/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/</url>
    
    <content type="html"><![CDATA[<h2 id="一、本章重点、认识NetworkManager"><a href="#一、本章重点、认识NetworkManager" class="headerlink" title="一、本章重点、认识NetworkManager"></a>一、本章重点、认识NetworkManager</h2><h3 id="1、先介绍本章重点"><a href="#1、先介绍本章重点" class="headerlink" title="1、先介绍本章重点"></a>1、先介绍本章重点</h3><ul><li>ICE规范</li><li>STUN&#x2F;TURN协议</li><li>RTP协议</li><li>DTLS协议</li><li>网络设备管理</li><li>Candidate的收集</li><li>网络连接的建立</li><li>连通性检测</li><li>Candidate排序</li><li>RTP的封包与解包</li><li>安全通道的建立</li><li>数据加密&#x2F;解密</li></ul><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316063733164.png" class="" title="image-20230316063733164"><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316063741925.png" class="" title="image-20230316063741925"><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316063747612.png" class="" title="image-20230316063747612"><h3 id="2、认识WebRTC网络设备管理之前需要认识-NetworkManager？它起什么作用？"><a href="#2、认识WebRTC网络设备管理之前需要认识-NetworkManager？它起什么作用？" class="headerlink" title="2、认识WebRTC网络设备管理之前需要认识 NetworkManager？它起什么作用？"></a>2、认识WebRTC网络设备管理之前需要认识 NetworkManager？它起什么作用？</h3><ul><li>BasicNetworkManager 里面包含了 createNetwork(…) 方法，该方法可以找出设备上的网卡信息。</li><li>BasicNetworkManager 里面包含了 QueryDefaultLocalAddress(…)方法，该方法可以获取设备的默认IP和端口信息。</li><li>BasicNetworkManager 里面包含了 StartNetworkMonitor(…) 方法，该方法可以监测网络变化，通过这个监控器就可以知道网络变化情况。</li><li>其他的方法就暂时没那么重要了，上面的三个方法需要掌握。</li></ul><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316063838111.png" class="" title="image-20230316063838111"><h3 id="3、认识NetworkManagerBase-中的重要成员和方法？"><a href="#3、认识NetworkManagerBase-中的重要成员和方法？" class="headerlink" title="3、认识NetworkManagerBase 中的重要成员和方法？"></a>3、认识NetworkManagerBase 中的重要成员和方法？</h3><ul><li>成员 networks：所有的网卡信息都会保存在 networkList 这个成员变量中。</li><li>方法 MergeNetworkList：作用是将可以合并的网卡信息进行合并，这样就减少了对网卡信息的操作。</li></ul><h3 id="4、认识-NetworkManager-相关的重要信息？"><a href="#4、认识-NetworkManager-相关的重要信息？" class="headerlink" title="4、认识 NetworkManager 相关的重要信息？"></a>4、认识 NetworkManager 相关的重要信息？</h3><ul><li>NetworkManager 是一个纯接口</li><li>方法 startUpdating()：启动 networkManager</li><li>方法 dumpNetworks()：将查找到的所有网卡信息将它们输出到控制终端中。我们就能看到设备所有的网卡信息。</li><li>继承 DefaultLocalAddressProvide：这是用于获取本地地址的</li><li>继承 MdnsResponderProvider：这个是与 MDNS 相关的，防止 IP 真正的地址暴露。</li></ul><h3 id="5、从代码上看，-创建Networks过程？"><a href="#5、从代码上看，-创建Networks过程？" class="headerlink" title="5、从代码上看， 创建Networks过程？"></a>5、从代码上看， 创建Networks过程？</h3><ul><li>一个 Network 等价于 一个网卡</li></ul><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316064901659.png" class="" title="image-20230316064901659"><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316064907756.png" class="" title="image-20230316064907756"><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316064916359.png" class="" title="image-20230316064916359"><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316064921250.png" class="" title="image-20230316064921250"><h2 id="二、认识ICE-和-Candidate"><a href="#二、认识ICE-和-Candidate" class="headerlink" title="二、认识ICE 和 Candidate"></a>二、认识ICE 和 Candidate</h2><h3 id="1、ICE规范的一些相关知识？"><a href="#1、ICE规范的一些相关知识？" class="headerlink" title="1、ICE规范的一些相关知识？"></a>1、ICE规范的一些相关知识？</h3><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316065110956.png" class="" title="image-20230316065110956"><h3 id="2、ICE架构图？经典"><a href="#2、ICE架构图？经典" class="headerlink" title="2、ICE架构图？经典"></a>2、ICE架构图？经典</h3><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316065130103.png" class="" title="image-20230316065130103"><ul><li>ICE会将两个Client之间的所有通路找出来，之后选择通信效率最高的那条通路，这就是ICE的作用。</li></ul><blockquote><p>连接无非三种：<br>①内网直连<br>②p2p连接<br>③中继服务器中转</p></blockquote><h3 id="3、什么是Candidate？"><a href="#3、什么是Candidate？" class="headerlink" title="3、什么是Candidate？"></a>3、什么是Candidate？</h3><ul><li><p>每个candidate是一个网络地址信息</p></li><li><p>它包括：协议、IP、端口、类型</p></li></ul><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316065346463.png" class="" title="image-20230316065346463"><h3 id="4、Candidate的四种类型是哪些？它们的优先级如何？"><a href="#4、Candidate的四种类型是哪些？它们的优先级如何？" class="headerlink" title="4、Candidate的四种类型是哪些？它们的优先级如何？"></a>4、Candidate的四种类型是哪些？它们的优先级如何？</h3><img src="/2023/03/16/WebRTC%E6%BA%90%E7%A0%81repeat/day11-WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%931/image-20230316065413633.png" class="" title="image-20230316065413633">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-视频数据从采集到网络投递</title>
    <link href="/2023/03/15/WebRTC%E6%BA%90%E7%A0%81repeat/day08-%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861-%E9%87%87%E9%9B%86%E5%88%B0%E7%BD%91%E7%BB%9C%E6%8A%95%E9%80%92/"/>
    <url>/2023/03/15/WebRTC%E6%BA%90%E7%A0%81repeat/day08-%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861-%E9%87%87%E9%9B%86%E5%88%B0%E7%BD%91%E7%BB%9C%E6%8A%95%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h2 id="一、从本地采集数据开始-gt-网络投递过程解析"><a href="#一、从本地采集数据开始-gt-网络投递过程解析" class="headerlink" title="一、从本地采集数据开始 -&gt; 网络投递过程解析"></a>一、<strong>从本地采集数据开始 -&gt; 网络投递过程解析</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">// RTCCameraVideoCapturer.m</span><br><span class="hljs-comment">// 调用IOS的AVCapture相关API后，系统会将音视频数据从这个接口回调出来</span><br>- (<span class="hljs-type">void</span>)captureOutput:(AVCaptureOutput *)captureOutput<br>    didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer<br>           fromConnection:(AVCaptureConnection *)connection &#123;<br>    <span class="hljs-number">1.</span>处理前置摄像头，以及横屏翻转问题<br>    <span class="hljs-number">2.</span>从 CMSampleBufferRef 中获取 CVPixelBufferRef<br>    <span class="hljs-number">3.</span>将 CVPixelBufferRef 包装成 RTCCVPixelBuffer<br>    <span class="hljs-number">4.</span>将 RTCCVPixelBuffer 包装成 RTCVideoFrame<br>    <span class="hljs-number">5.</span>最终会把 RTCVideoFrame 数据抛出去，给监听者处理<br>&#125;<br><br><span class="hljs-comment">// RTCVideoSource.mm</span><br>- (<span class="hljs-type">void</span>)capturer:(<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCVideoCapturer) *)capturer<br>    didCaptureVideoFrame:(<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCVideoFrame) *)frame &#123;<br>    <span class="hljs-number">1.</span>调用 getObjCVideoSource 方法，获取视频数据需要处理的对象Source<br>    <span class="hljs-number">2.</span>把 RTCVideoFrame 继续传递<br>&#125;<br><br><span class="hljs-comment">// objc_video_track_source.mm</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ObjCVideoTrackSource::OnCapturedFrame</span><span class="hljs-params">(RTC_OBJC_TYPE(RTCVideoFrame) * frame)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>调用 AdaptFrame 方法，判断帧是否被drop丢弃掉<br>    <span class="hljs-number">2.</span>把 RTCVideoFrame 转换成 VideoFrameBuffer，继续传递<br>&#125;<br><br><span class="hljs-comment">// adapted_video_track_source.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AdaptedVideoTrackSource::OnFrame</span><span class="hljs-params">(<span class="hljs-type">const</span> webrtc::VideoFrame&amp; frame)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>只是对帧进行是否需要旋转判断，继续传递<br>&#125;<br><br><span class="hljs-comment">// video_broadcaster.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">VideoBroadcaster::OnFrame</span><span class="hljs-params">(<span class="hljs-type">const</span> webrtc::VideoFrame&amp; frame)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>会遍历所有注册的视频接收器，每个接收器都被表示为一个 `sink_pair`。<br>    <span class="hljs-number">2.</span>会判断是否需要生成黑屏帧视频帧<br>    <span class="hljs-number">3.</span>如果满足上述条件，就会将原始视频帧发送给 `sink_pair`<br>&#125;<br><br><span class="hljs-comment">// frame_cadence_adapter.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FrameCadenceAdapterImpl::OnFrame</span><span class="hljs-params">(<span class="hljs-type">const</span> VideoFrame&amp; frame)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>Cadence就是节奏控制的含义，这个函数主要是为了控制 VideoFrame 的处理节奏<br>    <span class="hljs-number">2.</span>会将 VideoFrame 的处理放到一个 TaskQueue 中，继续处理<br>&#125;<br><br><span class="hljs-comment">// video_stream_encoder.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">VideoStreamEncoder::OnFrame</span><span class="hljs-params">(Timestamp post_time,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">int</span> frames_scheduled_for_processing,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">const</span> VideoFrame&amp; video_frame)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>主要处理 时间戳、NTP时间戳、RTP时间戳、重复时间戳帧丢弃、拥塞控制丢弃策略<br>    <span class="hljs-number">2.</span>通过检测的视频帧，会继续往下传递<br>&#125;<br><br><span class="hljs-comment">// video_stream_encoder.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">VideoStreamEncoder::MaybeEncodeVideoFrame</span><span class="hljs-params">(<span class="hljs-type">const</span> VideoFrame&amp; video_frame,</span></span><br><span class="hljs-params"><span class="hljs-function">                                               <span class="hljs-type">int64_t</span> time_when_posted_us)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>根据帧尺寸、纹理帧、帧率、参数等检查，来判断是否进行帧丢弃<br>    <span class="hljs-number">2.</span>通过检测的视频中，会继续往下传递<br>&#125;<br><br><span class="hljs-comment">// video_stream_encoder.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">VideoStreamEncoder::EncodeVideoFrame</span><span class="hljs-params">(<span class="hljs-type">const</span> VideoFrame&amp; video_frame,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          <span class="hljs-type">int64_t</span> time_when_posted_us)</span> </span>&#123;<br>    <span class="hljs-number">1.</span>首先会检查编码器初始化、参数相关的情况，不符合就直接<span class="hljs-keyword">return</span><br>    <span class="hljs-number">2.</span>然后对视频帧进行裁剪或缩放，以确保能满足某些编码器对帧尺寸的特定要求<br>    <span class="hljs-number">3.</span>上述检测通过后，就会把 VideoFrame 交给编辑器了<br>&#125;<br><br><span class="hljs-comment">// objc_video_encoder_factory.mm 文件</span><br><span class="hljs-comment">//  C++ 和 Objective-C 之间交互的一部分，用于在不同语言之间传递视频编码相关的数据。</span><br><span class="hljs-type">int32_t</span> <span class="hljs-built_in">Encode</span>(<span class="hljs-type">const</span> VideoFrame &amp;frame,<br>               <span class="hljs-type">const</span> std::vector&lt;VideoFrameType&gt; *frame_types) <span class="hljs-keyword">override</span> &#123;<br>    <span class="hljs-number">1.</span>将C++中的 VideoFrame 转换成 OC 的 RTCVideoFrame<br>    <span class="hljs-number">2.</span>拿到OC的编码器，对数据进行编码处理<br>&#125;<br><br><span class="hljs-comment">// RTCVideoEncoderH264.mm</span><br><span class="hljs-comment">//【important函数】</span><br>- (NSInteger)encode:(<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCVideoFrame) *)frame<br>    codecSpecificInfo:(nullable id&lt;<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCCodecSpecificInfo)&gt;)codecSpecificInfo<br>           frameTypes:(NSArray&lt;NSNumber *&gt; *)frameTypes &#123;<br>    <span class="hljs-number">1.</span>检查传入视频帧的宽度和高度是否与编码器配置的宽度和高度匹配，如果不匹配，可能会引发错误<br>    <span class="hljs-number">2.</span>再检查编码器初始化情况<br>    <span class="hljs-number">3.</span>创建一个 `CVPixelBufferRef` 用于存储视频帧数据<br>    <span class="hljs-number">4.</span>根据是否需要关键帧，创建一个 `CFDictionaryRef` 对象，用户设置编码参数。可以设置为强制关键帧<br>    <span class="hljs-number">5.</span>创建一个 `RTCFrameEncodeParams` 对象，用于存储编码参数，包括编码器的宽、高、时间戳等信息<br>    <span class="hljs-number">6.</span>使用 `VTCompressionSessionEncodeFrame` 函数进行视频帧编码，传递视频帧数据、时间戳等<br>    <span class="hljs-number">7.</span>根据编码操作的结果，返回适当的错误码或成功码<br>&#125;<br><br><span class="hljs-comment">// RTCVideoEncoderH264.mm</span><br><span class="hljs-comment">// Iphone硬编码完成的回调函数（TODO：对 VTCompressionSessionCreate 做了解）</span><br><span class="hljs-type">void</span> <span class="hljs-built_in">compressionOutputCallback</span>(<span class="hljs-type">void</span> *encoder,<br>                               <span class="hljs-type">void</span> *params,<br>                               OSStatus status,<br>                               VTEncodeInfoFlags infoFlags,<br>                               CMSampleBufferRef sampleBuffer) &#123;<br>    <span class="hljs-number">1.</span>借助iOS中的 VideoToolBox 进行H2564硬编码完成后，IOS系统会将结果在这个函数中回调<br>    <span class="hljs-number">2.</span>将硬编码数据继续传递给 frameWasEncoded 函数<br>&#125;<br><br><span class="hljs-comment">// RTCVideoEncoderH264.mm</span><br>- (<span class="hljs-type">void</span>)frameWasEncoded:(OSStatus)status<br>                  flags:(VTEncodeInfoFlags)infoFlags<br>           sampleBuffer:(CMSampleBufferRef)sampleBuffer<br>      codecSpecificInfo:(id&lt;<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCCodecSpecificInfo)&gt;)codecSpecificInfo<br>                  width:(<span class="hljs-type">int32_t</span>)width<br>                 height:(<span class="hljs-type">int32_t</span>)height<br>           renderTimeMs:(<span class="hljs-type">int64_t</span>)renderTimeMs<br>              timestamp:(<span class="hljs-type">uint32_t</span>)timestamp<br>               rotation:(RTCVideoRotation)rotation &#123;<br>    <span class="hljs-number">1.</span>会根据是否为关键帧，调用 `webrtc::H264CMSampleBufferToAnnexBBuffer` 将数据转换成Annex-B编码格式的数据<br>    <span class="hljs-number">2.</span>将 Annex-B 数据封装成 RTCEncodedImage 对象，通过callback回调出去<br>&#125;<br><br><br><span class="hljs-comment">// objc_video_encoder_factory.mm</span><br><span class="hljs-comment">// Objective-C 到 C++的桥接代码</span><br><span class="hljs-type">int32_t</span> <span class="hljs-built_in">RegisterEncodeCompleteCallback</span>(EncodedImageCallback *callback) <span class="hljs-keyword">override</span> &#123;<br>   <span class="hljs-number">1.</span>将OC对象 RTCEncodedImage 转换成 EncodedImage 对象，交给C++处理<br>&#125;<br><br><span class="hljs-comment">// video_stream_encoder.cc</span><br><span class="hljs-comment">// 代码回到C++层</span><br>EncodedImageCallback::Result VideoStreamEncoder::<span class="hljs-built_in">OnEncodedImage</span>(<br>    <span class="hljs-type">const</span> EncodedImage&amp; encoded_image,<br>    <span class="hljs-type">const</span> CodecSpecificInfo* codec_specific_info) &#123;<br>    <span class="hljs-number">1.</span>这个函数主要负责处理编码图像后的一系列操作，包括元数据更新、帧质量调整...<br>    <span class="hljs-number">2.</span>调用 `sink_-&gt;OnEncodedImage` 将编码图像传递给下游处理<br>&#125;<br><br><br><span class="hljs-comment">// video_send_stream_impl.cc</span><br>EncodedImageCallback::Result VideoSendStreamImpl::<span class="hljs-built_in">OnEncodedImage</span>(<br>    <span class="hljs-type">const</span> EncodedImage&amp; encoded_image,<br>    <span class="hljs-type">const</span> CodecSpecificInfo* codec_specific_info) &#123;<br>    <span class="hljs-number">1.</span>将编码后的数据交给RTP处理<br>&#125;<br><br><span class="hljs-comment">// rtp_video_sender.cc</span><br><span class="hljs-comment">// 【Important】函数</span><br>EncodedImageCallback::Result RtpVideoSender::<span class="hljs-built_in">OnEncodedImage</span>(<br>    <span class="hljs-type">const</span> EncodedImage&amp; encoded_image,<br>    <span class="hljs-type">const</span> CodecSpecificInfo* codec_specific_info) &#123;<br>    <span class="hljs-number">1.</span>通过`fec_controller_`调用`updateWithEncodedData`方法，传递编码图像的大小和帧类型，用于向前纠错控制<br>    <span class="hljs-number">2.</span>计算RTP时间戳，将它与流的RTP/RTCP模块的起始时间戳相加<br>    <span class="hljs-number">3.</span>调用 `rtp_rtcp-&gt;OnSendingRtpFrame` 询问是否可以发送<br>    <span class="hljs-number">4.</span>如果编码图像允许重传，获取预期的重传时间<br>    <span class="hljs-number">5.</span>借助`sender_video-&gt;SendEncodedImage`发送编码图像，包括RTP负载类型、RTP时间戳、编码类型、重传时间<br>&#125;<br><br><span class="hljs-comment">// rtp_sender_video.cc</span><br><span class="hljs-comment">// 【Important】函数</span><br><span class="hljs-type">bool</span> RTPSenderVideo::<span class="hljs-built_in">SendVideo</span>(<br>    <span class="hljs-type">int</span> payload_type,<br>    absl::optional&lt;VideoCodecType&gt; codec_type,<br>    <span class="hljs-type">uint32_t</span> rtp_timestamp,<br>    <span class="hljs-type">int64_t</span> capture_time_ms,<br>    rtc::ArrayView&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>&gt; payload,<br>    RTPVideoHeader video_header,<br>    absl::optional&lt;<span class="hljs-type">int64_t</span>&gt; expected_retransmission_time_ms) &#123;<br>    <span class="hljs-number">1.</span>使用`RtpPacketizer`进行RTP数据包分片，根据数据包的容量和特性分成多个RTP数据包<br>    <span class="hljs-number">2.</span>针对分片的每个数据包，设置一些数据，如是否运行重传、是否是关键帧等，并在需要时加入<span class="hljs-built_in">RED</span>(重传冗余)头<br>    <span class="hljs-number">3.</span>调用 `LogAndSendToNetwork` 将 rtp_packets 包队列继续投递<br>&#125;<br><br><span class="hljs-comment">// pacing_controller.cc</span><br><span class="hljs-type">void</span> PacingController::<span class="hljs-built_in">EnqueuePacket</span>(std::unique_ptr&lt;RtpPacketToSend&gt; packet) &#123;<br>    <span class="hljs-number">1.</span>从这里开始，就将RTP数据交给Paced来处理了<br>    <span class="hljs-number">2.</span>将数据包压入 `packet_queue_` 队列中，在合适的时机进行发送<br>&#125;<br><br><span class="hljs-comment">// pacing_controller.cc</span><br><span class="hljs-comment">// 【Important】函数</span><br><span class="hljs-type">void</span> PacingController::<span class="hljs-built_in">ProcessPackets</span>() &#123;<br>    <span class="hljs-number">1.</span>首先检查是否需要发送保持活性的包，用于维持连接而不是传输真实数据<br>    <span class="hljs-number">2.</span>调用 `<span class="hljs-built_in">NextSendTime</span>()` 函数获取下一个packet可以发送的时间<br>    <span class="hljs-number">3.</span>调用 `GetPendingPacket` 从 `packet_queue_` 队列中获取下一个可以发送的RTP数据包<br>    <span class="hljs-number">4.</span>调用 `packet_sender_-&gt;SendPacket` 发送RTP数据包<br>&#125;<br><br><span class="hljs-comment">// packet_router.cc</span><br><span class="hljs-comment">// 【Important】函数</span><br><span class="hljs-type">void</span> PacketRouter::<span class="hljs-built_in">SendPacket</span>(std::unique_ptr&lt;RtpPacketToSend&gt; packet,<br>                              <span class="hljs-type">const</span> PacedPacketInfo&amp; cluster_info) &#123;<br>    <span class="hljs-number">1.</span>生成RTP包的Seq值，用于标识RTP包的顺序【important】<br>    <span class="hljs-number">2.</span>通过RTP包的SSRC找到RTP发送模块，调用 TrySendPacket 尝试发送数据包<br>    <span class="hljs-number">3.</span>如果支持<span class="hljs-built_in">RTX</span>(重传)，则将该RTP包缓存为`last_send_module`，以备将来使用<br>    <span class="hljs-number">4.</span>检查RTP模块是否生成了冗余数据包(FEC packets)，如果有，也将这些冗余数据保存起来<br>&#125;<br><br><span class="hljs-comment">// rtp_sender_egress.cc</span><br><span class="hljs-type">void</span> RtpSenderEgress::<span class="hljs-built_in">SendPacket</span>(RtpPacketToSend* packet,<br>                                 <span class="hljs-type">const</span> PacedPacketInfo&amp; pacing_info) &#123;<br>    <span class="hljs-number">1.</span>会检查RTP包的Seq、或者检查RTX的Seq是否有序发送<br>    <span class="hljs-number">2.</span>调用 `SendPacketToNetwork` 方法将数据继续发送<br>&#125;<br><br><br><span class="hljs-comment">// webrtc_video_engine.cc</span><br><span class="hljs-comment">// 终于到了视频引擎层</span><br><span class="hljs-type">bool</span> WebRtcVideoChannel::<span class="hljs-built_in">SendRtp</span>(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* data,<br>                                 <span class="hljs-type">size_t</span> len,<br>                                 <span class="hljs-type">const</span> webrtc::PacketOptions&amp; options) &#123;<br>    <span class="hljs-number">1.</span>会调用 `MediaChannel::SendRtp` 继续发送<br>&#125;<br><br><span class="hljs-comment">// media_channel.cc</span><br><span class="hljs-type">bool</span> MediaChannel::<span class="hljs-built_in">DoSendPacket</span>(rtc::CopyOnWriteBuffer* packet,<br>                                <span class="hljs-type">bool</span> rtcp,<br>                                <span class="hljs-type">const</span> rtc::PacketOptions&amp; options) &#123;<br>    <span class="hljs-number">1.</span>区分是RTP包还是RTCP包，继续发送<br>&#125;<br><br><br><span class="hljs-comment">// srtp_transport.cc</span><br><span class="hljs-comment">// 来到了SRTP模块，这里是否对RTP数据进行加密了呢？</span><br><span class="hljs-type">bool</span> SrtpTransport::<span class="hljs-built_in">SendRtpPacket</span>(rtc::CopyOnWriteBuffer* packet,<br>                                  <span class="hljs-type">const</span> rtc::PacketOptions&amp; options,<br>                                  <span class="hljs-type">int</span> flags) &#123;<br>    <span class="hljs-number">1.</span>这个方法主要是负责对RTP数据包进行SRTP保护，包括认证和加密<br>    <span class="hljs-number">2.</span>经过跟踪，发现最终调用 srtp_protect_mki 函数进行STRP的加密操作<br>    <span class="hljs-number">3.</span>然后继续发送加密后的数据包<br>&#125;<br><br><span class="hljs-comment">// dtls_transport.cc</span><br><span class="hljs-comment">// 终于来到DTLS模块了，这里是否对SRTP数据进行了DTLS加密呢？</span><br><span class="hljs-type">int</span> DtlsTransport::<span class="hljs-built_in">SendPacket</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* data,<br>                              <span class="hljs-type">size_t</span> size,<br>                              <span class="hljs-type">const</span> rtc::PacketOptions&amp; options,<br>                              <span class="hljs-type">int</span> flags) &#123;<br>    <span class="hljs-number">1.</span>判断是否有开启DTLS功能<br>    <span class="hljs-number">2.</span>如果DTLS连接着【原来WebRTC对SRTP数据是默认不进行DTLS加密的，卧槽】<br>    <span class="hljs-number">3.</span>继续发送数据<br>&#125;<br><br><span class="hljs-comment">// p2p_transport_channel.cc</span><br><span class="hljs-type">int</span> P2PTransportChannel::<span class="hljs-built_in">SendPacket</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* data,<br>                                    <span class="hljs-type">size_t</span> len,<br>                                    <span class="hljs-type">const</span> rtc::PacketOptions&amp; options,<br>                                    <span class="hljs-type">int</span> flags) &#123;<br>    继续发送数据包<br>&#125;<br><br><span class="hljs-comment">// turn_port.cc</span><br><span class="hljs-type">int</span> TurnPort::<span class="hljs-built_in">SendTo</span>(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* data,<br>                     <span class="hljs-type">size_t</span> size,<br>                     <span class="hljs-type">const</span> rtc::SocketAddress&amp; addr,<br>                     <span class="hljs-type">const</span> rtc::PacketOptions&amp; options,<br>                     <span class="hljs-type">bool</span> payload) &#123;<br>    继续发送数据包<br>&#125;<br><br><br><span class="hljs-comment">// physical_socket_server.cc</span><br><span class="hljs-type">int</span> PhysicalSocket::<span class="hljs-built_in">SendTo</span>(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* buffer,<br>                           <span class="hljs-type">size_t</span> length,<br>                           <span class="hljs-type">const</span> SocketAddress&amp; addr) &#123;<br>    最终调用socket的 `::sendto` 底层方法，将数据投递出去<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-音频数据采集4-TODO</title>
    <link href="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%864/"/>
    <url>/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%864/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-音频数据采集3-将WebRtc接受的原始PCM和压缩数据保存到本地进行分析</title>
    <link href="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%863/"/>
    <url>/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%863/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-内部功能，音频相关"><a href="#一、-内部功能，音频相关" class="headerlink" title="一、 内部功能，音频相关"></a>一、 内部功能，音频相关</h2><h4 id="1、rtp-send-cache-是-app-本地音频压缩文件"><a href="#1、rtp-send-cache-是-app-本地音频压缩文件" class="headerlink" title="1、rtp_send_cache 是 app 本地音频压缩文件"></a>1、<code>rtp_send_cache</code> 是 app 本地音频压缩文件</h4><ul><li>app 端的在 RTP 即将发送出去的的时候，调用 <code>lds_local_record</code> 函数进行音频数据的保存。</li><li>是 c 函数，因为 app 只会投递音频，不会投递视频，所以记录的地方比较暴力，在 <code>RtpSenderEgress::SendPacketToNetwork</code> 方法中直接写文件了。</li><li>在 <code>Audacity</code> 中 <code>文件 -&gt; 导入 -&gt; 原始数据</code> 选择 编码:<code>A-Law</code>、字节序:<code>默认尾端(endianness)</code>、声道数:<code>单声道</code>、采样率:<code>8000Hz</code></li></ul><h4 id="2、capture-pcm-cache-是-app-本地捕获的原始音频的-PCM-文件"><a href="#2、capture-pcm-cache-是-app-本地捕获的原始音频的-PCM-文件" class="headerlink" title="2、capture_pcm_cache 是 app 本地捕获的原始音频的 PCM 文件"></a>2、<code>capture_pcm_cache</code> 是 app 本地捕获的原始音频的 PCM 文件</h4><ul><li>调用 <code>lds_pcm_capture_record</code> 进行文件写入</li><li>在 <code>AudioDeviceIOS::OnDeliverRecordedData</code> 进行音频数据的写入</li><li>在 <code>Audacity</code> 中 <code>文件 -&gt; 导入 -&gt; 原始数据</code> 选择 编码:<code>Signed 16-bit PCM</code>、字节序:<code>默认尾端(endianness)</code>、声道数:<code>单声道</code>、采样率:<code>48000Hz</code></li></ul><h4 id="3、rtp-recv-cache-是设备远端音频压缩文件"><a href="#3、rtp-recv-cache-是设备远端音频压缩文件" class="headerlink" title="3、rtp_recv_cache 是设备远端音频压缩文件"></a>3、<code>rtp_recv_cache</code> 是设备远端音频压缩文件</h4><ul><li>调用 <code>lds_rtp_recv_record</code> 进行文件写入</li><li>在 <code>NetEqImpl::InsertPacketInternal</code> 在 NetEq 模块进行写入，记录 RTP 数据</li><li>在 <code>Audacity</code> 中 <code>文件 -&gt; 导入 -&gt; 原始数据</code> 选择 编码:<code>A-Law</code>、字节序:<code>默认尾端(endianness)</code>、声道数:<code>单声道</code>、采样率:<code>8000Hz</code></li></ul><h4 id="4、render-pcm-cache-是设备远端音频解压的-PCM-文件"><a href="#4、render-pcm-cache-是设备远端音频解压的-PCM-文件" class="headerlink" title="4、render_pcm_cache 是设备远端音频解压的 PCM 文件"></a>4、<code>render_pcm_cache</code> 是设备远端音频解压的 PCM 文件</h4><ul><li>调用 <code>lds_pcm_record</code> 进行文件写入</li><li>在 <code>AudioDeviceIOS::OnGetPlayoutData</code> 文件中获取相关的数据</li><li>在 <code>Audacity</code> 中 <code>文件 -&gt; 导入 -&gt; 原始数据</code> 选择 编码:<code>Signed 16-bit PCM</code>、字节序:<code>默认尾端(endianness)</code>、声道数:<code>单声道</code>、采样率:<code>48000Hz</code></li></ul><h2 id="二、降噪思路"><a href="#二、降噪思路" class="headerlink" title="二、降噪思路"></a>二、降噪思路</h2><ul><li>对于发送的音频，WebRtc有开启默认降噪模式，也就是三A算法中的降噪算法，在iOS上调用的是苹果自带的降噪算法。</li><li>对于接收的音频，WebRtc没有降噪算法，可以考虑在接收端加一个NSx的降噪算法。</li><li>因为有降噪算法，所以有时候就需要分析收到的原始音频数据和最终播放的音频数据之间的差异。分析这两者的差异就需要将这两者数据进行收集，然后使用Audacity进行分析。</li></ul><h2 id="三、Audacity-使用方法"><a href="#三、Audacity-使用方法" class="headerlink" title="三、Audacity 使用方法"></a>三、Audacity 使用方法</h2><ul><li>打开音频片段之后，旋转 <code>对数(dB)</code>的波形图之后，如果噪音范围在<code>-40分贝</code>以下，就是噪音较小。</li><li>如果底噪到达 <code>-20分贝</code>，就底噪比较大了。</li></ul><h2 id="四、C-语言文件写入日志的代码结构"><a href="#四、C-语言文件写入日志的代码结构" class="headerlink" title="四、C 语言文件写入日志的代码结构"></a>四、C 语言文件写入日志的代码结构</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">void lds<span class="hljs-constructor">_start_pcm_capture_record(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">file_name</span>)</span> &#123;<br>    pthread<span class="hljs-constructor">_mutex_lock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>    <span class="hljs-keyword">if</span> (g_pcm_capture_audio_file) &#123;<br>        fclose(g_pcm_capture_audio_file);<br>        g_pcm_capture_audio_file = NULL;<br>    &#125;<br>    g_pcm_capture_audio_file = fopen(file_name, <span class="hljs-string">&quot;a&quot;</span>);<br>    pthread<span class="hljs-constructor">_mutex_unlock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>&#125;<br><br>void lds<span class="hljs-constructor">_pcm_capture_record(<span class="hljs-params">uint8_t</span> <span class="hljs-operator">*</span><span class="hljs-params">data</span>,<span class="hljs-params">size_t</span> <span class="hljs-params">size</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!g_pcm_capture_audio_file) &#123;<br>        return;<br>    &#125;<br>    pthread<span class="hljs-constructor">_mutex_lock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>    <span class="hljs-keyword">if</span> (g_pcm_capture_audio_file) &#123;<br>        fwrite(data,sizeof(uint8_t),size,g_pcm_capture_audio_file);<br>    &#125;<br>    pthread<span class="hljs-constructor">_mutex_unlock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>&#125;<br><br>void lds<span class="hljs-constructor">_stop_capture_pcm_record()</span> &#123;<br>    pthread<span class="hljs-constructor">_mutex_lock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>    <span class="hljs-keyword">if</span> (g_pcm_capture_audio_file) &#123;<br>        fclose(g_pcm_capture_audio_file);<br>        g_pcm_capture_audio_file = NULL;<br>    &#125;<br>    pthread<span class="hljs-constructor">_mutex_unlock(&amp;<span class="hljs-params">g_pcm_capture_mutex</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、4-个核心获取数据的地方"><a href="#五、4-个核心获取数据的地方" class="headerlink" title="五、4 个核心获取数据的地方"></a>五、4 个核心获取数据的地方</h2><ul><li><code>lds_local_record</code> 获取 app 本地音频压缩文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">RtpSenderEgress::SendPacketToNetwork</span><span class="hljs-params">(<span class="hljs-type">const</span> RtpPacketToSend&amp; packet,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          <span class="hljs-type">const</span> PacketOptions&amp; options,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          <span class="hljs-type">const</span> PacedPacketInfo&amp; pacing_info)</span> </span>&#123;<br>  <span class="hljs-type">int</span> bytes_sent = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (transport_) &#123;<br>    bytes_sent = transport_-&gt;<span class="hljs-built_in">SendRtp</span>(packet.<span class="hljs-built_in">data</span>(), packet.<span class="hljs-built_in">size</span>(), options)<br>                     ? <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(packet.<span class="hljs-built_in">size</span>())<br>                     : <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (event_log_ &amp;&amp; bytes_sent &gt; <span class="hljs-number">0</span>) &#123;<br>      event_log_-&gt;<span class="hljs-built_in">Log</span>(std::<span class="hljs-built_in">make_unique</span>&lt;RtcEventRtpPacketOutgoing&gt;(<br>          packet, pacing_info.probe_cluster_id));<br>    &#125;<br>      <span class="hljs-built_in">lds_local_record</span>((<span class="hljs-type">uint8_t</span> *)packet.<span class="hljs-built_in">PayloadBuffer</span>().<span class="hljs-built_in">cdata</span>(), (<span class="hljs-type">size_t</span>)packet.<span class="hljs-built_in">payload_size</span>());<br>  &#125;<br>    <span class="hljs-built_in">RTC_LOG</span>(LS_INFO) &lt;&lt; <span class="hljs-string">&quot;SendPacketToNetwork &quot;</span> &lt;&lt; packet.<span class="hljs-built_in">ToString</span>();<br><br>  <span class="hljs-keyword">if</span> (bytes_sent &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">RTC_LOG</span>(LS_WARNING) &lt;&lt; <span class="hljs-string">&quot;Transport failed to send packet.&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>lds_pcm_capture_record</code> 获取 app 本地捕获的原始音频的 PCM 文件</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xl">OSStatus AudioDeviceIOS::OnDeliverRecordedData(AudioUnitRenderActionFlags* flags,<br>                                               const AudioTimeStamp* time_stamp,<br>                                               UInt32 bus_number,<br>                                               UInt32 num_frames,<br>                                               AudioBufferList* <span class="hljs-comment">/* io_data */</span>) &#123;<br>  RTC_DCHECK_RUN_ON(&amp;io_thread_checker_);<br>  OSStatus result = noErr;<br>  <span class="hljs-keyword">if</span> (!rtc::AtomicOps::AcquireLoad(&amp;recording_)) return result;<br>  AudioBufferList audio_buffer_list;<br>  audio_buffer_list.mNumberBuffers = <span class="hljs-number">1</span>;<br>  AudioBuffer* audio_buffer = &amp;audio_buffer_list.mBuffers[<span class="hljs-number">0</span>];<br>  <span class="hljs-function"><span class="hljs-title">audio_buffer</span>-&gt;</span>mNumberChannels = record_parameters_.channels();<br>  <span class="hljs-function"><span class="hljs-title">audio_buffer</span>-&gt;</span>mDataByteSize =<br>      record_audio_buffer_.size() * VoiceProcessingAudioUnit::kBytesPerSample;<br>  <span class="hljs-function"><span class="hljs-title">audio_buffer</span>-&gt;</span>mData = reinterpret_cast&lt;int8_t*&gt;(record_audio_buffer_.<span class="hljs-keyword">data</span>());<br>  <span class="hljs-function"><span class="hljs-title">result</span> = audio_unit_-&gt;</span>Render(flags, time_stamp, bus_number, num_frames, &amp;audio_buffer_list);<br>  <span class="hljs-keyword">if</span> (result != noErr) &#123;<br>    RTCLogError(@<span class="hljs-string">&quot;Failed to render audio.&quot;</span>);<br>    return result;<br>  &#125;<br>    <span class="hljs-keyword">if</span> (inputGainFactor_ != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">short</span> *audio_byte = static_cast&lt;short *&gt;(audio_buffer-&gt;</span>mData);<br>        <span class="hljs-function"><span class="hljs-title">uint32_t</span> audio_size = audio_buffer-&gt;</span>mDataByteSize/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(UInt32 i = <span class="hljs-number">0</span>; i &lt; audio_size; i++) &#123;<br>            audio_byte[i] *= inputGainFactor_;<br>        &#125;<br>    &#125;<br>    uint8_t *<span class="hljs-keyword">data</span>;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (lds_get_capture_data(&amp;<span class="hljs-keyword">data</span>,(size_t)audio_buffer-&gt;</span>mDataByteSize) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">memcpy</span>(audio_buffer-&gt;</span><span class="hljs-function"><span class="hljs-title">mData</span>, <span class="hljs-keyword">data</span>, (size_t)audio_buffer-&gt;</span>mDataByteSize);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lds_pcm_capture_record</span>((uint8_t *)audio_buffer-&gt;</span><span class="hljs-function"><span class="hljs-title">mData</span>,(size_t)audio_buffer-&gt;</span>mDataByteSize);<br><br><br>  <span class="hljs-comment">// Get a pointer to the recorded audio and send it to the WebRTC ADB.</span><br>  <span class="hljs-comment">// Use the FineAudioBuffer instance to convert between native buffer size</span><br>  <span class="hljs-comment">// and the 10ms buffer size used by WebRTC.</span><br>  <span class="hljs-function"><span class="hljs-title">fine_audio_buffer_</span>-&gt;</span>DeliverRecordedData(record_audio_buffer_, kFixedRecordDelayEstimate);<br>  return noErr;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>lds_rtp_recv_record</code> 是设备远端音频压缩文件</li></ul><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">int</span> NetEqImpl::InsertPacketInternal(<span class="hljs-keyword">const</span> RTPHeader&amp; rtp_header,<br>                                    rtc::ArrayView&lt;<span class="hljs-keyword">const</span> uint8_t&gt; payload) &#123;<br>  <span class="hljs-keyword">if</span> (payload.<span class="hljs-keyword">empty</span>()) &#123;<br>    RTC_LOG_F(LS_ERROR) &lt;&lt; <span class="hljs-string">&quot;payload is empty&quot;</span>;<br>    <span class="hljs-keyword">return</span> kInvalidPointer;<br>  &#125;<br><br>  RTC_LOG(LS_VERBOSE) &lt;&lt; <span class="hljs-string">&quot;InsertPacket pt=&quot;</span>&lt;&lt;rtp_header.payloadType&lt;&lt;<span class="hljs-string">&quot; payload_size=&quot;</span>&lt;&lt;payload.size() &lt;&lt; <span class="hljs-string">&quot; seq=&quot;</span> &lt;&lt; rtp_header.sequenceNumber &lt;&lt; <span class="hljs-string">&quot; timestamp=&quot;</span> &lt;&lt; rtp_header.timestamp &lt;&lt; <span class="hljs-string">&quot; BufferSize:&quot;</span>&lt;&lt;packet_buffer_-&gt;NumPacketsInBuffer();<br>    lds_rtp_recv_record((uint8_t *)payload.data(), payload.size());<br>  Timestamp receive_time = clock_-&gt;CurrentTime();<br>  stats_-&gt;ReceivedPacket();<br><br>  PacketList packet_list;<br>  <span class="hljs-comment">// Insert packet in a packet list.</span><br>  packet_list.push_back([&amp;rtp_header, &amp;payload, &amp;receive_time] &#123;<br>    <span class="hljs-comment">// Convert to Packet.</span><br>    Packet packet;<br>    packet.payload_type = rtp_header.payloadType;<br>    packet.sequence_number = rtp_header.sequenceNumber;<br>    packet.timestamp = rtp_header.timestamp;<br>    packet.payload.SetData(payload.data(), payload.size());<br>    packet.packet_info = RtpPacketInfo(rtp_header, receive_time);<br>    <span class="hljs-comment">// Waiting time will be set upon inserting the packet in the buffer.</span><br>    RTC_DCHECK(!packet.waiting_time);<br>    <span class="hljs-keyword">return</span> packet;<br>  &#125;());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>lds_pcm_record</code> 获取设备远端音频解压的 PCM 文件</li></ul><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs zephir">OSStatus AudioDeviceIOS::OnGetPlayoutData(AudioUnitRenderActionFlags* flags,<br>                                          <span class="hljs-keyword">const</span> AudioTimeStamp* time_stamp,<br>                                          UInt32 bus_number,<br>                                          UInt32 num_frames,<br>                                          AudioBufferList* io_data) &#123;<br>  RTC_DCHECK_RUN_ON(&amp;io_thread_checker_);<br>  <span class="hljs-comment">// Verify 16-bit, noninterleaved mono PCM signal format.</span><br>  RTC_DCHECK_EQ(<span class="hljs-number">1</span>, io_data-&gt;mNumberBuffers);<br>  AudioBuffer* audio_buffer = &amp;io_data-&gt;mBuffers[<span class="hljs-number">0</span>];<br>  RTC_DCHECK_EQ(<span class="hljs-number">1</span>, audio_buffer-&gt;mNumberChannels);<br><br>  <span class="hljs-keyword">if</span> (!rtc::AtomicOps::AcquireLoad(&amp;playing_)) &#123;<br>    <span class="hljs-keyword">const</span> size_t size_in_bytes = audio_buffer-&gt;mDataByteSize;<br>    RTC_CHECK_EQ(size_in_bytes / VoiceProcessingAudioUnit::kBytesPerSample, num_frames);<br>    *flags |= kAudioUnitRenderAction_OutputIsSilence;<br>    memset(static_cast&lt;int8_t*&gt;(audio_buffer-&gt;mData), <span class="hljs-number">0</span>, size_in_bytes);<br>    <span class="hljs-keyword">return</span> noErr;<br>  &#125;<br><br>  ++num_playout_callbacks_;<br>  <span class="hljs-keyword">const</span> int64_t now_time = rtc::TimeMillis();<br>  <span class="hljs-keyword">if</span> (time_stamp-&gt;mSampleTime != num_frames) &#123;<br>    <span class="hljs-keyword">const</span> int64_t delta_time = now_time - last_playout_time_;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> glitch_threshold = <span class="hljs-number">1.6</span> * playout_parameters_.GetBufferSizeInMilliseconds();<br>    <span class="hljs-keyword">if</span> (delta_time &gt; glitch_threshold) &#123;<br>      RTCLogWarning(@<span class="hljs-string">&quot;Possible playout audio glitch detected.\n&quot;</span><br>                     <span class="hljs-string">&quot;  Time since last OnGetPlayoutData was %lld ms.\n&quot;</span>,<br>                    delta_time);<br>      <span class="hljs-keyword">if</span> (glitch_threshold &lt; <span class="hljs-number">120</span> &amp;&amp; delta_time &gt; <span class="hljs-number">120</span>) &#123;<br>        RTCLog(@<span class="hljs-string">&quot;Glitch warning is ignored. Probably caused by device switch.&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        thread_-&gt;Post(RTC_FROM_HERE, this, kMessageTypePlayoutGlitchDetected);<br>      &#125;<br>    &#125;<br>  &#125;<br>  last_playout_time_ = now_time;<br><br>    int64_t timestamp;<br>  fine_audio_buffer_-&gt;GetPlayoutData(<br>      rtc::ArrayView&lt;int16_t&gt;(static_cast&lt;int16_t*&gt;(audio_buffer-&gt;mData), num_frames),<br>      kFixedPlayoutDelayEstimate,&amp;timestamp);<br><br><span class="hljs-comment">//    lds_save_remote_au_data((uint8_t *)audio_buffer-&gt;mData,(size_t)audio_buffer-&gt;mDataByteSize);</span><br>    lds_pcm_record((uint8_t *)audio_buffer-&gt;mData,(size_t)audio_buffer-&gt;mDataByteSize);<br><br>  <span class="hljs-keyword">if</span> (audio_device_buffer_-&gt;audio_transport_cb_2) &#123;<br>      <span class="hljs-keyword">if</span> (timestamp &lt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">return</span> noErr;<br>      &#125;<br>      RTC_LOG(LS_INFO) &lt;&lt; <span class="hljs-string">&quot;[webrtc] fine_audio_buffer_-&gt;GetPlayoutData &quot;</span> &lt;&lt; audio_buffer-&gt;mDataByteSize &lt;&lt; <span class="hljs-string">&quot; last_playout_time_: &quot;</span> &lt;&lt; last_playout_time_ &lt;&lt; <span class="hljs-string">&quot;sampleRate:&quot;</span>&lt;&lt;playout_parameters_.sample_rate() &lt;&lt; <span class="hljs-string">&quot;channels: &quot;</span>&lt;&lt;playout_parameters_.channels();<br>      size_t num_samples_out(<span class="hljs-number">0</span>);<br><br>      <span class="hljs-keyword">int</span> res = audio_device_buffer_-&gt;audio_transport_cb_2-&gt;NeedMorePlayData(<br>          audio_buffer-&gt;mDataByteSize, io_data-&gt;mNumberBuffers, audio_buffer-&gt;mNumberChannels,<br>          playout_parameters_.sample_rate(), audio_buffer-&gt;mData, num_samples_out,<br>          &amp;last_playout_time_, &amp;last_playout_time_);<br>      res = <span class="hljs-number">0</span>;<br>  &#125;<br>    <span class="hljs-keyword">if</span> (play_callback_) &#123;<br><span class="hljs-comment">//        uint8_t *, size_t, size_t, size_t, uint32_t, size_t, int64_t</span><br>        play_callback_((uint8_t *)audio_buffer-&gt;mData,(size_t)audio_buffer-&gt;mDataByteSize,(size_t)audio_buffer-&gt;mNumberChannels,(size_t)playout_parameters_.sample_rate(),<span class="hljs-number">1024</span>,<span class="hljs-number">0</span>,(int64_t)last_playout_time_);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (speaker_mute_) &#123;<br>        <span class="hljs-comment">//若是扬声器经营,则把数据清零,让扬声器空转</span><br>        memset(audio_buffer-&gt;mData, <span class="hljs-number">0</span>, audio_buffer-&gt;mDataByteSize);<br>    &#125;<br>  <span class="hljs-keyword">return</span> noErr;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-音频数据采集2-ADM创建过程、本地音频的采集&amp;&amp;加密封装&amp;&amp;传输</title>
    <link href="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%862/"/>
    <url>/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%862/</url>
    
    <content type="html"><![CDATA[<h3 id="1、ADM在iOS上创建过程？"><a href="#1、ADM在iOS上创建过程？" class="headerlink" title="1、ADM在iOS上创建过程？"></a>1、ADM在iOS上创建过程？</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs c++">- (instancetype)<br>    initWithEncoderFactory:(nullable id&lt;<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCVideoEncoderFactory)&gt;)encoderFactory<br>            decoderFactory:(nullable id&lt;<span class="hljs-built_in">RTC_OBJC_TYPE</span>(RTCVideoDecoderFactory)&gt;)decoderFactory <br>&#123;<br> [self audioDeviceModule].<span class="hljs-built_in">get</span>() <span class="hljs-comment">//调用获取ADM</span><br>&#125;<br><br>- (rtc::scoped_refptr&lt;webrtc::AudioDeviceModule&gt;)audioDeviceModule<br>&#123;<br> webrtc::<span class="hljs-built_in">CreateAudioDeviceModule</span>() <span class="hljs-comment">//调用继续创建ADM</span><br> <span class="hljs-built_in">CreateAudioDeviceModule</span>(<span class="hljs-type">bool</span> bypass_voice_processing) <span class="hljs-comment">//再继续调用</span><br>&#125;<br><br><span class="hljs-function">rtc::scoped_refptr&lt;AudioDeviceModule&gt; <span class="hljs-title">CreateAudioDeviceModule</span><span class="hljs-params">(<span class="hljs-type">bool</span> bypass_voice_processing)</span> </span><br><span class="hljs-function"></span>&#123;<br>rtc::<span class="hljs-built_in">make_ref_counted</span>&lt;ios_adm::AudioDeviceModuleIOS&gt;(bypass_voice_processing) <span class="hljs-comment">//调用</span><br>&#125;<br><br>rtc::<span class="hljs-built_in">make_ref_counted</span>&lt;ios_adm::AudioDeviceModuleIOS&gt;(bypass_voice_processing)<br>&#123;<br>  <span class="hljs-comment">// 最终创建了出了ADM是AudioDeviceModuleIOS类型</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、音频类持有关系？"><a href="#2、音频类持有关系？" class="headerlink" title="2、音频类持有关系？"></a>2、音频类持有关系？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">PeerConnectionFactory -&gt; 持有 👇🏻<br><br>PeerConnectionFactoryDependencies（dependencies）-&gt; 持有 👇🏻<br><br>CompositeMediaEngine （media_engine）-&gt; 持有 👇🏻<br><br>WebRtcVoiceEngine（audio_engine）-&gt; 持有 👇🏻<br><br>MediaEngineDependencies -&gt; 持有 👇🏻<br><br>AudioDeviceModule（adm）-&gt; 持有 👇🏻 -&gt; 还持有 AudioDeviceBuffer<br><br>AudioDeviceIOS（audio_device_）-&gt; 持有 👇🏻  -&gt; 还持有 AudioDeviceBuffer<br><br>VoiceProcessingAudioUnit（audio_unit_）<br>这个类才是真正用于音频的录制与播放的<br></code></pre></td></tr></table></figure><h3 id="3、kInputBus-x3D-x3D-1和-kInputBus-x3D-x3D-0分别代表什么？"><a href="#3、kInputBus-x3D-x3D-1和-kInputBus-x3D-x3D-0分别代表什么？" class="headerlink" title="3、kInputBus &#x3D;&#x3D;1和 kInputBus &#x3D;&#x3D;0分别代表什么？"></a>3、kInputBus &#x3D;&#x3D;1和 kInputBus &#x3D;&#x3D;0分别代表什么？</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">关键知识点 👇🏻 <br><span class="hljs-comment">// A VP I/O unit&#x27;s bus 1 connects to input hardware (microphone).</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> AudioUnitElement kInputBus = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// A VP I/O unit&#x27;s bus 0 connects to output hardware (speaker).</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> AudioUnitElement kOutputBus = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="4、本地音频流转线路（保存）【important】？"><a href="#4、本地音频流转线路（保存）【important】？" class="headerlink" title="4、本地音频流转线路（保存）【important】？"></a>4、本地音频流转线路（保存）<font color="red">【important】</font>？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c">AudioDeviceIOS::OnDeliverRecordedData （从上面的audio_unit_回调的数据）<br>&#123;<br>调用 audio_unit_-&gt;Render() 函数，对音频数据进行获取<br>调用 fine_audio_buffer_-&gt;DeliverRecordedData() 函数，对音频数据转换成Webrtc的buffer。<br>&#125;<br><br><br><span class="hljs-type">void</span> FineAudioBuffer::DeliverRecordedData  <br>&#123;<br>将音频<span class="hljs-number">10</span>毫秒进行分割<br>将处理好的音频放入 audio_device_buffer_-&gt;SetVQEData 中<br>然后调用 AudioDeviceBuffer::DeliverRecordedData 进行下一步的处理<br>&#125;<br><br><span class="hljs-type">int32_t</span> AudioDeviceBuffer::DeliverRecordedData<br>&#123;<br>调用 audio_transport_cb_-&gt;RecordedDataIsAvailable 继续处理数据<br>&#125;<br><br><br><span class="hljs-type">int32_t</span> AudioTransportImpl::RecordedDataIsAvailable<br>&#123;<br>对音频数据封装成 AudioFrame<br>对音频数据重采样和混音 voe::RemixAndResample<br>对音频使用应用层算法 ProcessCaptureFrame<br>调用 SendProcessedData 将 AudioFrame 发出去<br>&#125;<br><br><br><span class="hljs-type">void</span> AudioTransportImpl::SendProcessedData <br>&#123;<br>遍历所有的音频发送器（audio_senders_、AudioSender）<br>每个音频发送器发送一遍 AudioFrame<br>最后，原始的 audio_frame 被发送给第一个音频发送器，避免额外的数据复制。<br>&#125;<br><br><span class="hljs-type">void</span> AudioSendStream::SendAudioData<br>&#123;<br>调用 channel_send_-&gt;ProcessAndEncodeAudio 将数据进行发送<br>&#125;<br><br><br><span class="hljs-type">void</span> ChannelSend::ProcessAndEncodeAudio<br>&#123;<br>将音频放入 encoder_queue_ (rtc::TaskQueue) 队列等待处理<br>队列执行时，调用audio_coding_（AudioCodingModule::Add10MsData）<br>&#125;<br><br><span class="hljs-type">int</span> AudioCodingModuleImpl::Add10MsData <br>&#123;<br>Add10MsDataInternal 对音频的采样率、声道数、长度做出判断，如果数据不合规，就抛弃掉<br>Add10MsDataInternal 调用 AudioCodingModuleImpl::PreprocessToAddData 对音频进行检查，如果采样率、声道数、混音不符合要求，会进行重采样<br>最后调用 Encode 对音频进行处理，这段代码是音频编码的核心部分，将音频数据传递给编码器进行压缩，并将编码后的数据发送给后续的数据传输流程<br>&#125;<br><br><br><span class="hljs-type">int32_t</span> AudioCodingModuleImpl::Encode<br>&#123;<br>通过 音频数据 换算出 RTP包的时间戳，rtp_timestamp<br>调用 AudioEncoder::EncodedInfo AudioEncoder::Encode 进行编码处理<br>&#123;<br>AudioEncoder::EncodedInfo AudioEncoderOpusImpl::EncodeImpl <span class="hljs-comment">//TODO</span><br>&#125;<br>发送给回调函数 packetization_callback_-&gt;SendData ，进行下一步处理<br>&#125;<br><br><br><span class="hljs-type">int32_t</span> ChannelSend::SendData<br>&#123;<br>调用 SendRtpAudio() 发送音频数据<br>&#125;<br><br><br><span class="hljs-type">int32_t</span> ChannelSend::SendRtpAudio<br>&#123;<br>在RTP扩展头中设置audioLevel<br>如果有加密器，就对音频进行加密（默认情况下WebRTC没进行加密）<br>调用 ModuleRtpRtcpImpl2::OnSendingRtpFrame 判断是否可以发送音频以及RTCP收集一些信息<br>再调用 RTPSenderAudio::SendAudio 把数据发送到RTP音频发送器模块<br>&#125;<br><br><span class="hljs-type">bool</span> RTPSenderAudio::SendAudio<br>&#123;<br>判断是否开启DTMF，进行一些列特殊处理（WebRTC默认不走此逻辑）<br>构建出 RtpPacketToSend 对象，并且对packet配置所有需要的数据，比如PayloadType、TimeStamp、payloadData…<br>调用 RTPSender::SendToNetwork 将数据继续投递<br>&#125;<br><br><br><span class="hljs-type">bool</span> RTPSender::SendToNetwork<br>&#123;<br>会调用 paced_sender_-&gt;EnqueuePackets(<span class="hljs-built_in">std</span>::move(packets)) 将音频数据压入队列中<br>RTP发送器会根据网络带宽和拥塞情况进行发送速率的控制，以平滑的发送数据<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RtpPacketSenderProxy</span></span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">EnqueuePackets</span></span><br><span class="hljs-class">&#123;</span><br>调用 rtp_packet_pacer_-&gt;EnqueuePackets 将数据压入队列中<br>&#125;<br><br><br><span class="hljs-type">void</span> TaskQueuePacedSender::EnqueuePackets<br>&#123;<br>创建一个Block，将Block放入 rtc::TaskQueue task_queue_ 队列中，待执行。<br><span class="hljs-comment">//TODO 这个task_queue_ 什么时候会被执行呢？是否进行了速率控制？</span><br>Block执行时，调用 pacing_controller_.EnqueuePacket(<span class="hljs-built_in">std</span>::move(packet)); 进行将任务压入队列<br>&#125;<br><br><span class="hljs-type">void</span> PacingController::EnqueuePacket<br>&#123;<br>调用 BitrateProber::OnIncomingPacket 使用包的有效负载大小通知拥塞控制器，以便进行拥塞控制。<br>调用 PrioritizedPacketQueue::Push 将数据包压入队列中<br>&#125;<br><br><span class="hljs-type">void</span> PrioritizedPacketQueue::Push<br>&#123;<br>根据优先级进行排序<br>同时还包括了对队列大小、停留时间和定期清理的统计和管理。<br>然后把 RtpPacketToSend 转换成 QueuedPacket，并且携带一些控制配置<br>最后调用 stream_queue-&gt;EnqueuePacket 将 QueuedPacket 插入到队列中<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、本地音频流转线路（发送）【important】？"><a href="#5、本地音频流转线路（发送）【important】？" class="headerlink" title="5、本地音频流转线路（发送）【important】？"></a>5、本地音频流转线路（发送）<font color="red">【important】</font>？</h3><p>&#x2F;&#x2F; TODO 还需要看下RTP和DTLS是如何对它们进行处理的？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> PacingController::ProcessPackets<br>&#123;<br>调用 GetPendingPacket 获取 RtpPacketToSend 对象，最终调用 <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;RtpPacketToSend&gt; PrioritizedPacketQueue::Pop 获取<br>调用 <span class="hljs-type">void</span> PacketRouter::SendPacket 将<br>&#125;<br><br><span class="hljs-type">void</span> PacketRouter::SendPacket<br>&#123;<br>设置音频数据包的sequenceNumber<br>通过音频数据包的 ssrc 获取 rtp_module<br>通过rtp_module 的 ModuleRtpRtcpImpl2::TrySendPacket  尝试发送数据包<br>最后如果开启FEC，还要把数据给到FEC模块<br>&#125;<br><br><span class="hljs-type">bool</span> ModuleRtpRtcpImpl2::TrySendPacket<br>&#123;<br>进行一些参数判断<br>调用 RtpSenderEgress::SendPacket 进行数据发送<br>&#125;<br><br><br><span class="hljs-type">void</span> RtpSenderEgress::SendPacket <br>&#123;<br>对packet的extension进行一些设置<br>调用 AddPacketToTransportFeedback 将包的一些数据给到feedback模块<br>调用 SendPacketToNetwork 进行包的发布<br>如果发布成功，做一些标记<br>&#125;<br><br><span class="hljs-type">bool</span> RtpSenderEgress::SendPacketToNetwork<br>&#123;<br>调用 WebRtcVoiceMediaChannel::SendRtp 的方法进行发送<br>&#125;<br><br><span class="hljs-type">void</span> MediaChannel::SendRtp<br>&#123;<br>封装一个Block，将Block扔到 network_thread_-&gt;PostTask 队列中调用<br><br>调用 MediaChannel::SendPacket 继续发送<br>&#125;<br><br><span class="hljs-type">bool</span> MediaChannel::SendPacket <br>&#123;<br>调用 BaseChannel::SendPacket 继续发送数据<br>&#125;<br><br><br><span class="hljs-type">bool</span> BaseChannel::SendPacket <br>&#123;<br>调用 <span class="hljs-type">bool</span> SrtpTransport::SendRtpPacket 继续发送<br>&#125;<br><br><span class="hljs-type">bool</span> SrtpTransport::SendRtpPacket  <br>&#123;<br>调用 <span class="hljs-type">bool</span> RtpTransport::SendPacket 继续发送<br>&#125;<br><br><span class="hljs-type">bool</span> RtpTransport::SendPacket<br>&#123;<br>调用 <span class="hljs-type">int</span> DtlsTransport::SendPacket 继续发送<br>&#125;<br><br><br><span class="hljs-type">int</span> DtlsTransport::SendPacket<br>&#123;<br>首先会保证 DTLS处于 webrtc::DtlsTransportState::kConnected 状态<br>然后调用 ice_transport_-&gt;SendPacket 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> P2PTransportChannel::SendPacket<br>&#123;<br>调用 selected_connection_-&gt;Send 继续发送数据<br>&#125;<br><br><span class="hljs-type">int</span> ProxyConnection::Send<br>&#123;<br>调用 <span class="hljs-type">int</span> TurnPort::SendTo 继续数据发送<br>&#125;<br><br><span class="hljs-type">int</span> TurnPort::SendTo<br>&#123;<br>调用 <span class="hljs-type">int</span> TurnEntry::Send 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> TurnEntry::Send<br>&#123;<br>将音频包构建成 ByteBufferWriter 和 TurnMessage 结构<br>调用 <span class="hljs-type">int</span> TurnPort::Send 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> TurnPort::Send<br>&#123;<br>调用 socket_-&gt;SendTo 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> AsyncUDPSocket::SendTo<br>&#123;<br>将数据构建成 rtc::SentPacket 数据结构<br>调用 socket_-&gt;SendTo 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> PhysicalSocket::SendTo<br>&#123;<br>调用 DoSendTo 继续发送<br>&#125;<br><br><span class="hljs-type">int</span> PhysicalSocket::DoSendTo<br>&#123;<br>调用 ::sendto(socket, buf, len, flags, dest_addr, addrlen) 继续发送，这次真的发送出去了，太长了吧。<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6、不让WebRTC的SDK在Debug模式下，自动输出日志要怎么做？"><a href="#6、不让WebRTC的SDK在Debug模式下，自动输出日志要怎么做？" class="headerlink" title="6、不让WebRTC的SDK在Debug模式下，自动输出日志要怎么做？"></a>6、不让WebRTC的SDK在Debug模式下，自动输出日志要怎么做？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// logging.cc 文件下修改</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(NDEBUG)</span><br>constexpr LoggingSeverity kDefaultLoggingSeverity = LS_NONE;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>constexpr LoggingSeverity kDefaultLoggingSeverity = LS_NONE;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-音频数据采集1-ADM、APM、AudioState</title>
    <link href="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861/"/>
    <url>/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识AudioState、ADM"><a href="#一、认识AudioState、ADM" class="headerlink" title="一、认识AudioState、ADM"></a>一、认识AudioState、ADM</h2><h3 id="1、AudioState是干什么的？"><a href="#1、AudioState是干什么的？" class="headerlink" title="1、AudioState是干什么的？"></a>1、AudioState是干什么的？</h3><ul><li>AudioState看名字，看起来像是对音频状态的管理机，其实并不是。</li><li>AudioState是对整个音频的接口做一层封装，用来管理音频相关的所有模块。</li></ul><h3 id="2、应用层要调用底层的ADM、APM、混音是比较复杂的，WebRTC为此做了什么封装？"><a href="#2、应用层要调用底层的ADM、APM、混音是比较复杂的，WebRTC为此做了什么封装？" class="headerlink" title="2、应用层要调用底层的ADM、APM、混音是比较复杂的，WebRTC为此做了什么封装？"></a>2、应用层要调用底层的ADM、APM、混音是比较复杂的，WebRTC为此做了什么封装？</h3><ul><li>封装了 <font color="red">AudioState</font></li><li>对于音频来讲，不仅有ADM（Audio Device Module）还有APM（Audio Process Module，是用于音频前后处理的，比如回音消除、降噪、自动增益），还有混音器。</li><li>这些通过 AudioState 来调用就非常方便了。</li></ul><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861/image-20230808065425616.png" class="" title="image-20230808065425616"><h3 id="3、ADM是干什么的？它们之间的类关系是如何的？"><a href="#3、ADM是干什么的？它们之间的类关系是如何的？" class="headerlink" title="3、ADM是干什么的？它们之间的类关系是如何的？"></a>3、ADM是干什么的？它们之间的类关系是如何的？</h3><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861/image-20230808065512719.png" class="" title="image-20230808065512719"><ul><li><strong>这幅图的结构非常重要，是框架性的思想，一定要明白这几个类的关系！</strong></li><li><strong>ADM（Audio Device Module）：</strong>就是在应用层与设备硬件层中间做了一层转换。通过这层转换，应用层就不需要关心硬件层具体是怎么实现的，应用层只要调用相应的功能就可以了。</li><li>这就使得应用层与底层硬件层进行了<strong>解耦</strong>。</li></ul><h3 id="4、AudioDeviceBuffer是干什么的？AudioTransport是干什么的？两者有什么关系？"><a href="#4、AudioDeviceBuffer是干什么的？AudioTransport是干什么的？两者有什么关系？" class="headerlink" title="4、AudioDeviceBuffer是干什么的？AudioTransport是干什么的？两者有什么关系？"></a>4、AudioDeviceBuffer是干什么的？AudioTransport是干什么的？两者有什么关系？</h3><ul><li>AudioDeviceBuffer是存储来自Mac或者Windows采集到的音频数据。</li><li>AudioTransport是用来传输音频数据的。</li><li>通过底层采集的音频数据会存储在AudioDeviceBuffer中，然后需要通过AudioTransport交给上层播放或者网络传输。</li><li>而上层从网络读取的音频数据，也要通过AudioTransport才能进入AudioDeviceMac才能进行播放。</li></ul><h3 id="5、创建ADM的时机，是与哪个关键类创建的"><a href="#5、创建ADM的时机，是与哪个关键类创建的" class="headerlink" title="5、创建ADM的时机，是与哪个关键类创建的"></a>5、创建ADM的时机，是与哪个关键类创建的</h3><ul><li>实在PeerConnectionFactory初始化的创建的。</li></ul><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%861/image-20230808070236944.png" class="" title="image-20230808070236944">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-媒体协商2-编解码器信息收集</title>
    <link href="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、编解码器信息的收集"><a href="#一、编解码器信息的收集" class="headerlink" title="一、编解码器信息的收集"></a>一、编解码器信息的收集</h2><h3 id="1、学完本节要能回答以下问题？"><a href="#1、学完本节要能回答以下问题？" class="headerlink" title="1、学完本节要能回答以下问题？"></a>1、学完本节要能回答以下问题？</h3><ul><li><font color="red">AddTrack</font>如何生成Transceiver？</li><li><font color="red">payload type</font> 从哪里来？</li><li>每个 <font color="red">payload type</font> 对应的值从哪儿来？</li><li>使用的传输协议如何确定？</li></ul><h3 id="2、webRTC的入口函数是哪个？"><a href="#2、webRTC的入口函数是哪个？" class="headerlink" title="2、webRTC的入口函数是哪个？"></a>2、webRTC的入口函数是哪个？</h3><ul><li><code>CreatePeerConnectionFactory</code></li></ul><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20221125065917777.png" class="" title="image-20221125065917777"><h3 id="3、以-CreateBuildinAudioEncoderFactory-为例，介绍如何生成对应的-payload-type？"><a href="#3、以-CreateBuildinAudioEncoderFactory-为例，介绍如何生成对应的-payload-type？" class="headerlink" title="3、以 CreateBuildinAudioEncoderFactory 为例，介绍如何生成对应的 payload type？"></a>3、以 <font color="red">CreateBuildinAudioEncoderFactory</font> 为例，介绍如何生成对应的 payload type？</h3><ul><li>需要了解C++ 可变参数模板的用法，以及如何使用递归法展开可变参数模板。</li><li>make_ref_counted 是 webRTC 的内存管理体系</li><li>下面是传入的payload type类型，以可变模板参数的方式传入，从下往上调用栈</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><br>--------&gt; make_ref_counted&lt;audio_encoder_factory_template_impl::AudioEncoderFactoryT&lt;Ts...&gt;&gt;(<span class="hljs-literal">nullptr</span>)<br>------&gt; CreateAudioEncoderFactory&lt;AudioEncoderOpus, NotAdvertised&lt;AudioEncoderMultiChannelOpus&gt;,AudioEncoderG711, NotAdvertised&lt;AudioEncoderL16&gt;&gt;()<br>----&gt; webrtc::<span class="hljs-built_in">CreateBuiltinAudioEncoderFactory</span>()<br>--&gt; -[RTCPeerConnectionFactory initWithEncoderFactory:decoderFactory:]<br></code></pre></td></tr></table></figure><ul><li>核心之处</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 这边是外部获取支持的编码器信息的调用函数</span><br><span class="hljs-function">std::vector&lt;AudioCodecSpec&gt; <span class="hljs-title">GetSupportedEncoders</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    std::vector&lt;AudioCodecSpec&gt; specs;<br>    Helper&lt;Ts...&gt;::<span class="hljs-built_in">AppendSupportedEncoders</span>(&amp;specs);<br>    <span class="hljs-keyword">return</span> specs;<br>  &#125;<br><br><span class="hljs-comment">// 对具有可变模板参数进行解包</span><br><span class="hljs-comment">// Inductive case: Called with n + 1 template parameters; calls subroutines</span><br><span class="hljs-comment">// with n template parameters.</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Ts&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Helper</span>&lt;T, Ts...&gt; &#123;<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">AppendSupportedEncoders</span><span class="hljs-params">(std::vector&lt;AudioCodecSpec&gt;* specs)</span> </span>&#123;<br>    T::<span class="hljs-built_in">AppendSupportedEncoders</span>(specs);<br>    Helper&lt;Ts...&gt;::<span class="hljs-built_in">AppendSupportedEncoders</span>(specs);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 对0个参数的方法进行重载，终止可变模板参数解包的递归函数</span><br><span class="hljs-comment">// Base case: 0 template parameters.</span><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Helper</span>&lt;&gt; &#123;<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">AppendSupportedEncoders</span><span class="hljs-params">(std::vector&lt;AudioCodecSpec&gt;* specs)</span> </span>&#123;&#125;<br>  <span class="hljs-function"><span class="hljs-type">static</span> absl::optional&lt;AudioCodecInfo&gt; <span class="hljs-title">QueryAudioEncoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-type">const</span> SdpAudioFormat&amp; format)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> absl::<span class="hljs-literal">nullopt</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4、编解码器信息收集的步骤？"><a href="#4、编解码器信息收集的步骤？" class="headerlink" title="4、编解码器信息收集的步骤？"></a>4、编解码器信息收集的步骤？</h3><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20221125070735719.png" class="" title="image-20221125070735719"><ul><li>上面是完整过程，也就是核心步骤，大纲一定要记住</li></ul><h3 id="5、收集音频编解码器的时机？"><a href="#5、收集音频编解码器的时机？" class="headerlink" title="5、收集音频编解码器的时机？"></a>5、收集音频编解码器的时机？</h3><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20221125070836017.png" class="" title="image-20221125070836017"><ul><li>CompositeMediaEngine会创建音频、视频媒体引擎；这两个引擎是WebRTC中最重要的两个引擎。</li><li>通过 AudioEncoderFactoryT&lt;&gt;::GetSupportedEncoders 来获取支持的音频编解码器</li><li>此时只是完成了音视频编解码器信息收集的初级阶段。</li></ul><h3 id="6、如何将上面的收集到的编解码器信息与SDP建立联系呢？"><a href="#6、如何将上面的收集到的编解码器信息与SDP建立联系呢？" class="headerlink" title="6、如何将上面的收集到的编解码器信息与SDP建立联系呢？"></a>6、如何将上面的收集到的编解码器信息与SDP建立联系呢？</h3><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20221125070926354.png" class="" title="image-20221125070926354"><ul><li>TODO：按照上面的步骤，结合视频，进行源码解读</li></ul><h3 id="7、小结"><a href="#7、小结" class="headerlink" title="7、小结"></a>7、小结</h3><img src="/2022/11/25/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%862-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20221125071118047.png" class="" title="image-20221125071118047"><ul><li>TODO：上图非常精髓，要自己画几遍</li><li>也回答MediaEngine是什么时候创建的？就是在CreatePeerConnectionFactory中创建的。</li><li>为什么音频编解码器是分开的有两个，而视频编解码器是只有一个呢？</li><li>在 6-6 小节中有对此图的详细讲解，多听几遍吧！！！一定要多听了，讲得太好了</li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-媒体协商1-SDP详解</title>
    <link href="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、SDP基础（WebRTC的核心，必须清楚每个元素的含义）"><a href="#一、SDP基础（WebRTC的核心，必须清楚每个元素的含义）" class="headerlink" title="一、SDP基础（WebRTC的核心，必须清楚每个元素的含义）"></a>一、SDP基础（WebRTC的核心，必须清楚每个元素的含义）</h2><h3 id="1、SDP结构核心图？分为三层？"><a href="#1、SDP结构核心图？分为三层？" class="headerlink" title="1、SDP结构核心图？分为三层？"></a>1、SDP结构核心图？分为三层？</h3><ul><li>实际上每个SDP都是嵌套的方式进行定义的</li><li>最外层是会话层、里层是媒体层、媒体层又包括音频层+视频层</li></ul><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221028064251481.png" class="" title="image-20221028064251481"><h3 id="2、SDP的数据格式是怎么样的？"><a href="#2、SDP的数据格式是怎么样的？" class="headerlink" title="2、SDP的数据格式是怎么样的？"></a>2、SDP的数据格式是怎么样的？</h3><ul><li><code>&lt;key&gt; = &lt;value&gt;</code> 格式</li></ul><h3 id="3、m、a、c、v、s、o-分别是什么含义？"><a href="#3、m、a、c、v、s、o-分别是什么含义？" class="headerlink" title="3、m、a、c、v、s、o 分别是什么含义？"></a>3、<code>m、a、c、v、s、o</code> 分别是什么含义？</h3><blockquote><p>m：media，一个m表示一个媒体，可以是<code>音频</code> 或 <code>视频</code>。</p></blockquote><blockquote><p>a：attribute，表示属性，当我们顶一个某个媒体之后，要对某个媒体进行补充说明，那么就通过attribute进行补充描述。</p></blockquote><blockquote><p>c：connection，也就是连接。</p></blockquote><blockquote><p>v：version，表示当前SDP协议使用的版本，需要通信双方的版本号相同才能进行通信。</p></blockquote><blockquote><p>s：session，表示a与b进行通信就是一个会话，会话是全局的。</p></blockquote><blockquote><p>o：owner，表示谁有拥有这个会话。</p></blockquote><h3 id="4、结合一个具体的例子，进行学习。【必须知道每个字的含义】"><a href="#4、结合一个具体的例子，进行学习。【必须知道每个字的含义】" class="headerlink" title="4、结合一个具体的例子，进行学习。【必须知道每个字的含义】"></a>4、结合一个具体的例子，进行学习。【必须知道每个字的含义】</h3><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221028065232149.png" class="" title="image-20221028065232149"><blockquote><p><code>v=0</code></p><p>表示SDP协议的版本号为0，通信双方需要版本号相同才能进行通信。</p><p>第一次协商是0，那么第二次协商就是1，第三次协商就是2，这个数字是不断累加的。（TODO验证）</p></blockquote><blockquote><p><code>o=- 123123 2 IN IP4 127.0.0.1</code></p><p><code>o</code>表示会话的所有者</p><p><code>-</code>表示忽略会话所有者的名字</p><p><code>123123 2</code>一般用不到，忽略</p><p><code>IN</code>表示Internet</p><p><code>IP4 127.0.0.1</code>会话拥有者的IP地址</p></blockquote><blockquote><p><code>m=audio 9 UDP/TLS/TRP/SAVPF 111 103 104</code></p><p><code>m=audio</code> 表示这是音频媒体数据</p><p><code>9</code> 是这个音频媒体的端口号，一般用不到，只要非0就行，如果是0就表示本次媒体协商是失败的。</p><p><code>UDP/TLS/RTP/SAVPF</code> 表示媒体所使用的传输协议。</p><p><code>UDP/TLS/RTP/SAVPF</code> 底层使用UDP协议，借助TLS进行数据加密，在UDP上跑的是RTP，后面的SAVPF表示支持SRTP协议。</p><p><code>A</code>：Audio、<code>V</code>：Video、<code>P</code>：Protocol、<code>F</code>：Feedback</p><p><code>111 103 104</code> 这些是 payload type 的值，每个payload type具体代表哪个编解码器，在后面有a进行补充定义。</p></blockquote><blockquote><p><code>a=mid:0</code></p><p>其中a表示attribute，就是对前面的一个m进行扩展说明</p><p><code>mid</code>表示media id，也就是前面这个m的id是0</p></blockquote><blockquote><p><code>a=rtpmap:111 opus/48000/2</code></p><p>表示对前面一个m的rtp协议进行扩展</p><p><code>111</code>表示对payload type &#x3D; 111 的进行扩展说明</p><p><code>opus/48000/2</code> 表示 采用opus音频编解码器、采样率48000、双声道</p></blockquote><h3 id="5、WebRTC是如何确定一个candidate能否与对端进行连通的？"><a href="#5、WebRTC是如何确定一个candidate能否与对端进行连通的？" class="headerlink" title="5、WebRTC是如何确定一个candidate能否与对端进行连通的？"></a>5、WebRTC是如何确定一个candidate能否与对端进行连通的？</h3><ul><li>一方向另一方发送<code>Stun request/Stun response</code>，如何能通，就表示可用。</li></ul><h3 id="6、ICE-FULL-与-ICE-LITE-有什么区别？"><a href="#6、ICE-FULL-与-ICE-LITE-有什么区别？" class="headerlink" title="6、ICE-FULL 与 ICE-LITE 有什么区别？"></a>6、ICE-FULL 与 ICE-LITE 有什么区别？</h3><ul><li><code>区别：</code>是否双方都发送 stun request&#x2F;stun response</li><li>a&#x3D;ice-lite</li><li>没有a&#x3D;ice-lite就是ice-full</li><li>webrtc默认使用ice-full，但是目前大部分开发产品都是使用 <code>ice-lite</code></li></ul><h3 id="7、PlanB-与-UnifiedPlan-的区别？"><a href="#7、PlanB-与-UnifiedPlan-的区别？" class="headerlink" title="7、PlanB 与 UnifiedPlan 的区别？"></a>7、PlanB 与 UnifiedPlan 的区别？</h3><ul><li><code>PlanB</code>：只有一个M行，音视频用 a&#x3D;ssrc 来区分</li><li><code>UnifiedPlan</code>：多个音视频有多个M行</li><li>现在的WebRTC基本都是用UnifiedPlan和ICE-LITE。</li></ul><h2 id="二、从不同角度认识-SDP"><a href="#二、从不同角度认识-SDP" class="headerlink" title="二、从不同角度认识 SDP"></a>二、从不同角度认识 SDP</h2><h3 id="1、如果对SDP从功能上进行分类，可以如何分类？"><a href="#1、如果对SDP从功能上进行分类，可以如何分类？" class="headerlink" title="1、如果对SDP从功能上进行分类，可以如何分类？"></a>1、如果对SDP从功能上进行分类，可以如何分类？</h3><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221101063206705.png" class="" title="image-20221101063206705"><ul><li><code>a=rtpmap</code>：是对媒体信息的payload type 做进一步说明的。</li><li><code>a=fmtp</code>：format parameter 是对媒体信息参数的进一步说明。</li></ul><h3 id="2、如果是从WebRTC的代码上对SDP的分类又是如何的呢？"><a href="#2、如果是从WebRTC的代码上对SDP的分类又是如何的呢？" class="headerlink" title="2、如果是从WebRTC的代码上对SDP的分类又是如何的呢？"></a>2、如果是从WebRTC的代码上对SDP的分类又是如何的呢？</h3><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064108913.png" class="" title="image-20221102064108913"><ul><li>ContentInfo、TransportInfo、ContentGroups 中都有name，就是通过相同的name，将三个串在一起，形成一个完整的媒体信息。</li></ul><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064435201.png" class="" title="image-20221102064435201"><ul><li>由上图可知WebRTC就很容易将SDP文本构造成内存中的WebRTC类结构；</li><li>也很容易通过WebRTC类结构生成SDP的文本；</li></ul><h3 id="3、WebRTC如何生成SDP的（需要细细品味）？"><a href="#3、WebRTC如何生成SDP的（需要细细品味）？" class="headerlink" title="3、WebRTC如何生成SDP的（需要细细品味）？"></a>3、WebRTC如何生成SDP的（需要细细品味）？</h3><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064622611.png" class="" title="image-20221102064622611"><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064632367.png" class="" title="image-20221102064632367"><ul><li>AddTrack中具体做了什么事情？</li></ul><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064703986.png" class="" title="image-20221102064703986"><ul><li>从下往上的调用顺序</li></ul><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064725645.png" class="" title="image-20221102064725645"><ul><li>核心类</li></ul><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064754974.png" class="" title="image-20221102064754974"><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064801220.png" class="" title="image-20221102064801220"><img src="/2022/10/27/WebRTC%E6%BA%90%E7%A0%81repeat/day06-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%861-SDP%E8%AF%A6%E8%A7%A3/image-20221102064808016.png" class="" title="image-20221102064808016"><ul><li>RtpTransceiver实际上连接了三端：上层的应用、底层的网络传输、中间层的编解码器</li><li>有了RtpTransceiver就可以生成SDP的类关系图，然后生成SDP文档了。</li></ul><h3 id="4、梳理上面几个东西的关系？"><a href="#4、梳理上面几个东西的关系？" class="headerlink" title="4、梳理上面几个东西的关系？"></a>4、梳理上面几个东西的关系？</h3><ul><li><code>究极目标：生成SDP类关系图</code></li><li>在生成SDP类关系图之前，需要先通过 <code>AddTrack</code> 将音频、视频添加到 PeerConnection中；</li><li>有了这些track之后，在PeerConnection中就可以生成对应的RtpTransceiver；</li><li>RtpTransceiver是连接上层应用、底层网络连接、中间层编解码器的一个核心类，有了这个类，我们在生成SDP的类关系就非常轻松了；</li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day04-媒体协商</title>
    <link href="/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/"/>
    <url>/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/</url>
    
    <content type="html"><![CDATA[<h3 id="1、媒体协商起了主要哪些作用？"><a href="#1、媒体协商起了主要哪些作用？" class="headerlink" title="1、媒体协商起了主要哪些作用？"></a>1、媒体协商起了主要哪些作用？</h3><ul><li>交换双方的<font color="red">音频编解码器信息、视频编解码器信息</font></li><li>音频主要参数：采样大小、采样率、声道数</li><li>视频主要参数：帧率、分辨率</li></ul><h3 id="2、媒体协商的步骤？8个步骤，必须要能手绘。"><a href="#2、媒体协商的步骤？8个步骤，必须要能手绘。" class="headerlink" title="2、媒体协商的步骤？8个步骤，必须要能手绘。"></a>2、媒体协商的步骤？8个步骤，必须要能手绘。</h3><ul><li>目的：找到共同支持的编解码器以及编解码器相关的参数。</li></ul><img src="/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20221021065158573.png" class="" title="image-20221021065158573"><h3 id="3、媒体协商的时序图，这个流程必须很清楚。【手绘】"><a href="#3、媒体协商的时序图，这个流程必须很清楚。【手绘】" class="headerlink" title="3、媒体协商的时序图，这个流程必须很清楚。【手绘】"></a>3、媒体协商的时序图，这个流程必须很清楚。【手绘】</h3><ul><li>四个角色：<font color="red">ClientA、ClientB、Signal、Coturn</font></li></ul><img src="/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20221021065341434.png" class="" title="image-20221021065341434"><h3 id="4、思考和尝试，如何知道WebRTC处于媒体协商的那个阶段呢？（TODO）"><a href="#4、思考和尝试，如何知道WebRTC处于媒体协商的那个阶段呢？（TODO）" class="headerlink" title="4、思考和尝试，如何知道WebRTC处于媒体协商的那个阶段呢？（TODO）"></a>4、思考和尝试，如何知道WebRTC处于媒体协商的那个阶段呢？（TODO）</h3><ul><li>什么时候是Offer阶段？什么时候是Answer阶段？</li><li><code>核心点</code>：WebRTC媒体协商过程是有<font color="red">状态机</font>的，<code>状态机不合适的时候进行其他操作，会导致媒体协商失败</code>。</li></ul><img src="/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20221025065451156.png" class="" title="image-20221025065451156"><h3 id="5、传统协商存储什么问题？完美协商是怎么解决的？"><a href="#5、传统协商存储什么问题？完美协商是怎么解决的？" class="headerlink" title="5、传统协商存储什么问题？完美协商是怎么解决的？"></a>5、传统协商存储什么问题？完美协商是怎么解决的？</h3><ul><li><code>传统协商</code>：如果状态不对的时候，进行其他协商操作，会导致整个协商过程失败。</li><li><code>举例说明</code>：如果ClientA处于<code>have-local-offer</code>阶段，有收到对端的<code>Offer</code>，就会导致协商失败，因为从上图可知，只有在<code>stable</code>阶段才能接收对端的<code>Offer</code>信息。</li></ul><img src="/2022/10/21/WebRTC%E6%BA%90%E7%A0%81repeat/day04-%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20221025065931230.png" class="" title="image-20221025065931230">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day0102-初识WebRTC、WebRTC整体架构</title>
    <link href="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day00-%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day00-%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-初识WebRTC、WebRTC整体架构</title>
    <link href="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="一、day01初识WebRTC"><a href="#一、day01初识WebRTC" class="headerlink" title="一、day01初识WebRTC"></a>一、day01初识WebRTC</h2><h3 id="1、WebRTC的网络模块好在哪里？"><a href="#1、WebRTC的网络模块好在哪里？" class="headerlink" title="1、WebRTC的网络模块好在哪里？"></a>1、WebRTC的网络模块好在哪里？</h3><ul><li>保障数据的实时性（&lt;500ms）</li><li>可以实时准确的评估出带宽大小（REMB、TCC）</li><li>优秀的防拥塞控制算法（GCC）</li><li>保障网络带宽使用的公平性（TCP、GCC）</li><li>抗丢包（NACK、FEC）</li><li>防抖动、防乱序（JitterBuffer、NetEQ）</li><li>可以传输各种数据（音视频、文本、二进制数据）</li></ul><h3 id="2、WebRTC的音视频引擎强大在哪里？"><a href="#2、WebRTC的音视频引擎强大在哪里？" class="headerlink" title="2、WebRTC的音视频引擎强大在哪里？"></a>2、WebRTC的音视频引擎强大在哪里？</h3><ul><li>支持多种音视频编解码器（AV1&#x2F;VP9&#x2F;VP8、 OPUS&#x2F;ISAC）</li><li>采用了最先进的音视频编解码器（AV1、OPUS）</li><li>多种音视频格式可以互通（VP8、H264）</li><li>能够快速集成新的编解码器</li></ul><h3 id="3、WebRTC的-3A-模块是哪些？"><a href="#3、WebRTC的-3A-模块是哪些？" class="headerlink" title="3、WebRTC的 3A 模块是哪些？"></a>3、WebRTC的 3A 模块是哪些？</h3><ul><li>自动增益</li><li>回音消除</li><li>降噪</li><li>将传统算法用到了极致，不仅仅支持软件方法还支持硬件方法</li></ul><h3 id="4、WebRTC的安全性体系在哪些方面？"><a href="#4、WebRTC的安全性体系在哪些方面？" class="headerlink" title="4、WebRTC的安全性体系在哪些方面？"></a>4、WebRTC的安全性体系在哪些方面？</h3><ul><li>通过动态分配用户名&#x2F;密码保证用户的有效性</li><li>通过指纹保证证书的真实性</li><li>通过DTLS-SRTP对数据进行加密</li><li>还支持端到端数据加密</li></ul><h2 id="二、day02-认识WebRTC的架构"><a href="#二、day02-认识WebRTC的架构" class="headerlink" title="二、day02 认识WebRTC的架构"></a>二、day02 认识WebRTC的架构</h2><h3 id="1、直播一般分哪两种？"><a href="#1、直播一般分哪两种？" class="headerlink" title="1、直播一般分哪两种？"></a>1、直播一般分哪两种？</h3><ul><li>传统娱乐直播：直播购物、娱乐直播、游戏直播；RTMP&#x2F;HLS 底层都是基于 ffmpeg 来实现的</li><li>实时互动直播：音视频会议、在线互动课堂；RTP&#x2F;STRP 基于 WebRTC 实现的</li></ul><h3 id="2、两种数据的详细对比？"><a href="#2、两种数据的详细对比？" class="headerlink" title="2、两种数据的详细对比？"></a>2、两种数据的详细对比？</h3><ul><li><p>下面这个图，要自己重绘一下</p></li><li><p>至少能从三个方面吧</p></li></ul><img src="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20221019064013318.png" class="" title="image-20221019064013318"><img src="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20221019064017658.png" class="" title="image-20221019064017658"><h3 id="3、实时互动直播难点在哪里（说两点）？"><a href="#3、实时互动直播难点在哪里（说两点）？" class="headerlink" title="3、实时互动直播难点在哪里（说两点）？"></a>3、实时互动直播难点在哪里（说两点）？</h3><ul><li>对实时性要求高 （&lt; 500ms）</li><li>音视频服务质量与实时性之间是有矛盾的</li></ul><h3 id="4、一个UDP大概能带多少数据？TCP在实时性上的致命缺陷是什么？"><a href="#4、一个UDP大概能带多少数据？TCP在实时性上的致命缺陷是什么？" class="headerlink" title="4、一个UDP大概能带多少数据？TCP在实时性上的致命缺陷是什么？"></a>4、一个UDP大概能带多少数据？TCP在实时性上的致命缺陷是什么？</h3><ul><li>一个UDP包理论上能带1500字节的数据，实际上掐头去尾，也就能带 1400 字节。</li><li>TCP为什么会导致直播延迟大：<font color="red">TCP的重传超时退避机制</font></li></ul><h3 id="5、WebRTC的整体架构图？（四层，要能自己手绘出来）"><a href="#5、WebRTC的整体架构图？（四层，要能自己手绘出来）" class="headerlink" title="5、WebRTC的整体架构图？（四层，要能自己手绘出来）"></a>5、WebRTC的整体架构图？（四层，要能自己手绘出来）</h3><ul><li>灵魂图之一</li></ul><img src="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20221021064113030.png" class="" title="image-20221021064113030"><h3 id="6、WebRTC数据流转图？（灵魂图，必须能手绘）"><a href="#6、WebRTC数据流转图？（灵魂图，必须能手绘）" class="headerlink" title="6、WebRTC数据流转图？（灵魂图，必须能手绘）"></a>6、WebRTC数据流转图？（灵魂图，必须能手绘）</h3><ul><li>从接收侧的流程？</li><li>从发送侧的流程<img src="/2022/10/18/WebRTC%E6%BA%90%E7%A0%81repeat/day02-%E5%88%9D%E8%AF%86WebRTC%E3%80%81WebRTC%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20221021064210576.png" class="" title="image-20221021064210576"></li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码Repeat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-项目引入WebRTC库、进行单步调试</title>
    <link href="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/"/>
    <url>/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前面<code>day01</code>的文章已经编译生成了WebRTC.framework，如何将它引入到自己的项目中呢？</p><p>首先创建一个全新的 <code>WebrtcLearnDemo</code> 的iOS项目，配置好手机证书，然后关闭项目的 <code>bitcode</code> 设置。</p></blockquote><h2 id="一、项目引入WebRTC库（引入法）"><a href="#一、项目引入WebRTC库（引入法）" class="headerlink" title="一、项目引入WebRTC库（引入法）"></a>一、项目引入WebRTC库（引入法）</h2><h3 id="①-WebrtcLearnDemo-gt-General-gt-Frameworks"><a href="#①-WebrtcLearnDemo-gt-General-gt-Frameworks" class="headerlink" title="① WebrtcLearnDemo -&gt; General -&gt; Frameworks"></a>① <code>WebrtcLearnDemo -&gt; General -&gt; Frameworks</code></h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007105606114.png" class="" title="image-20221007105606114"><h3 id="②-设置Framework的searchPaths"><a href="#②-设置Framework的searchPaths" class="headerlink" title="② 设置Framework的searchPaths"></a>② <code>设置Framework的searchPaths</code></h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007105734200.png" class="" title="image-20221007105734200"><h3 id="③运行成功"><a href="#③运行成功" class="headerlink" title="③运行成功"></a>③运行成功</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007110654111.png" class="" title="image-20221007110654111"><h2 id="二、项目引入WebRTC库（拖入法）"><a href="#二、项目引入WebRTC库（拖入法）" class="headerlink" title="二、项目引入WebRTC库（拖入法）"></a>二、项目引入WebRTC库（拖入法）</h2><h3 id="①直接把-WebRTC-framework-拖入项目中"><a href="#①直接把-WebRTC-framework-拖入项目中" class="headerlink" title="①直接把 WebRTC.framework 拖入项目中"></a>①直接把 <code>WebRTC.framework</code> 拖入项目中</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007111023517.png" class="" title="image-20221007111023517"><h3 id="②修改Framework的引入和签名方式"><a href="#②修改Framework的引入和签名方式" class="headerlink" title="②修改Framework的引入和签名方式"></a>②修改Framework的引入和签名方式</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007112334887.png" class="" title="image-20221007112334887"><p>如果没有步操作，将会有如下报错：</p><p> <font color="red"><strong>dyld[71229]: Library not loaded: @rpath&#x2F;WebRTC.framework&#x2F;WebRTC</strong></font></p><h3 id="③运行代码成功"><a href="#③运行代码成功" class="headerlink" title="③运行代码成功"></a>③运行代码成功</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007112421660.png" class="" title="image-20221007112421660"><h2 id="三、项目引入WebRTC库（断点法一）"><a href="#三、项目引入WebRTC库（断点法一）" class="headerlink" title="三、项目引入WebRTC库（断点法一）"></a>三、项目引入WebRTC库（断点法一）</h2><h3 id="①无法WebRTC源码断点"><a href="#①无法WebRTC源码断点" class="headerlink" title="①无法WebRTC源码断点"></a>①无法WebRTC源码断点</h3><p>在上面介绍的 <code>项目引入WebRTC库（引入法）</code>  实现后，我们发现断点只能在我们自己项目中，无法进入 <code>WebRTC.framework</code> 源码进行调试。</p><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007113602745.png" class="" title="image-20221007113602745"><h3 id="②给项目设置符号断点，（具体原因在-day01中介绍过）"><a href="#②给项目设置符号断点，（具体原因在-day01中介绍过）" class="headerlink" title="②给项目设置符号断点，（具体原因在 day01中介绍过）"></a>②给项目设置<code>符号断点</code>，（具体原因在 <code>day01</code>中介绍过）</h3><p>在执行 <code>-[AppDelegate application:didFinishLaunchingWithOptions:]</code> 时自动设置source-map，<code>settings set target.source-map &quot;./../../&quot; &quot;/Users/carrot/Documents/webrtc-source/webrtc/src&quot;</code>就省得每次手动设置了。</p><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007113904301.png" class="" title="image-20221007113904301"><h3 id="③成功源码断点"><a href="#③成功源码断点" class="headerlink" title="③成功源码断点"></a>③成功源码断点</h3><p>可以看到，已经可以成功对WebRTC的源码进行单步调试了。</p><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007114136319.png" class="" title="image-20221007114136319"><h2 id="四、项目引入WebRTC库（断点法二）"><a href="#四、项目引入WebRTC库（断点法二）" class="headerlink" title="四、项目引入WebRTC库（断点法二）"></a>四、项目引入WebRTC库（断点法二）</h2><p>上面的断点法可以源码打断点，但是无法在 xcode 项目之中直接定位的源码文件。</p><h3 id="①将-all-xcodeproj-拖入项目中"><a href="#①将-all-xcodeproj-拖入项目中" class="headerlink" title="①将 all.xcodeproj 拖入项目中"></a>①将 <code>all.xcodeproj</code> 拖入项目中</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007124535612.png" class="" title="image-20221007124535612"><h3 id="②将-WebRTC-framework-引入项目中"><a href="#②将-WebRTC-framework-引入项目中" class="headerlink" title="②将 WebRTC.framework 引入项目中"></a>②将 <code>WebRTC.framework</code> 引入项目中</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007124634150.png" class="" title="image-20221007124634150"><h3 id="③给项目设置符号断点，（具体原因在-day01中介绍过）"><a href="#③给项目设置符号断点，（具体原因在-day01中介绍过）" class="headerlink" title="③给项目设置符号断点，（具体原因在 day01中介绍过）"></a>③给项目设置<code>符号断点</code>，（具体原因在 <code>day01</code>中介绍过）</h3><p>在执行 <code>-[AppDelegate application:didFinishLaunchingWithOptions:]</code> 时自动设置source-map，<code>settings set target.source-map &quot;./../../&quot; &quot;/Users/carrot/Documents/webrtc-source/webrtc/src&quot;</code>就省得每次手动设置了。</p><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007113904301.png" class="" title="image-20221007113904301"><h3 id="④可以看到，我们不仅可以断点源码，并且能在xcode直接显示源码相关文件了"><a href="#④可以看到，我们不仅可以断点源码，并且能在xcode直接显示源码相关文件了" class="headerlink" title="④可以看到，我们不仅可以断点源码，并且能在xcode直接显示源码相关文件了"></a>④可以看到，我们不仅可以断点源码，并且能在xcode直接显示源码相关文件了</h3><img src="/2022/10/08/WebRTC%E5%AE%9E%E6%88%98/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/image-20221007125003091.png" class="" title="image-20221007125003091">]]></content>
    
    
    <categories>
      
      <category>WebRTC实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-项目引入WebRTC库、进行单步调试</title>
    <link href="/2022/10/08/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%88%AB/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/"/>
    <url>/2022/10/08/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%88%AB/day02-%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5WebRTC%E5%BA%93%E3%80%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2>]]></content>
    
    
    <categories>
      
      <category>模板类别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-mac同时使用内网和外网【转载】</title>
    <link href="/2022/10/08/%E6%9D%82%E8%AE%B0/day01-mac%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91/"/>
    <url>/2022/10/08/%E6%9D%82%E8%AE%B0/day01-mac%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>在公司办公通常都会连内网，而连内网最大的限制就是不可以使用外网，那遇到问题也就不能google，而当连接无线的时候，内网的东西就不可以访问，也就不能正常办公，对于我这种小白来说，工作中遇到的问题数不胜数，又不能什么事都请教同事，这可真是让人头大~~~~</p><p>那我们是不是可以内外网同时访问呢，答案当然是可以的，解决方法本质上就是 由于<strong>内网网段的个数是有限个的，所以内网网段设置本地静态路由，即添加内网网段指向对应内网的网关，让内网网段全部走对应内网路由，默认网段全部走默认外网路由</strong><br><strong>简单说就是 访问内网网站使用内网，其余所有网站默认使用外网</strong>，这样你的电脑就可以内外网均可访问了。</p><p>这边总结一下关于mac怎么配置同时使用内网和外网，以下双网卡配置方法是针对外网用WIFI，内网用有线，但是要注意的是双网卡也可以都是有线或者都是无线，其配置思路本质也是一样的。</p><p>话不多说，请<strong>严格按照以下步骤</strong>设置：</p><p><strong>第一步：设置正确的网卡服务顺序</strong></p><p>进入 系统偏好设置 - 网络 - 设定服务顺序，拖动来进行网络优先级设置。使连接外网的网卡位于内网网卡之上。此时可以正常访问外网</p><img src="/2022/10/08/%E6%9D%82%E8%AE%B0/day01-mac%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATXJf5LiN5LqM,size_20,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><p><strong>第二步：查看内网网卡的网关地址</strong></p><p>路由器IP即为下一步设置需要用到的<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80&spm=1001.2101.3001.7020">网关地址</a><br>子网掩码下一步设置也需要用到</p><img src="/2022/10/08/%E6%9D%82%E8%AE%B0/day01-mac%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATXJf5LiN5LqM,size_20,color_FFFFFF,t_70,g_se,x_16-20230731075127287.png" class="" title="在这里插入图片描述"><p><strong>第三步：设置本地静态路由，添加内网网段指向对应内网的网关</strong></p><p>（这一步需要在MacOS的终端内执行命令，打开终端的方式参考 MacOS如何打开终端）<br>先介绍2条关于添加和删除的命令，下面有具体例子<br>添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">10.0.0.0</span> -netmask <span class="hljs-number">255.0.0.0</span> <span class="hljs-number">10.0.2.1</span><br>sudo route add -net <span class="hljs-number">30.1.0.0</span> -netmask <span class="hljs-number">255.255.0.0</span> <span class="hljs-number">10.0.2.1</span><br></code></pre></td></tr></table></figure><p>删除：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> route delete -net <span class="hljs-number">10.0.0.0</span> -netmask <span class="hljs-number">255.0.0.0</span> <span class="hljs-number">10.0.2.1</span><br>sudo route delete -net <span class="hljs-number">30.1.0.0</span> -netmask <span class="hljs-number">255.255.0.0</span> <span class="hljs-number">10.0.2.1</span><br></code></pre></td></tr></table></figure><p>net参数对应网段IP，netmask是子网掩码。最后的IP是内网网关，即上一步看到的路由器IP地址</p><p>比如内网想访问的网址是 <a href="http://10.90.20.27/fh%EF%BC%8C%E5%86%85%E7%BD%91%E7%BD%91%E5%85%B3%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%88%9A%E6%89%8D%E7%9C%8B%E5%88%B0%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8IP%E5%9C%B0%E5%9D%80%E4%B8%BA">http://10.90.20.27/fh，内网网关也就是刚才看到的路由器IP地址为</a> 172.16.84.254，则使用以下命令添加和删除<br>添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">10.90.20.0</span> -netmask <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">172.16.84.254</span><br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> route delete -net <span class="hljs-number">10.90.20.0</span> -netmask <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">172.16.84.254</span><br></code></pre></td></tr></table></figure><p>其实不妨把10网段的全部网址都设置一下，（主要就是注意一下网段(10.0.0.0)和子网掩码(255.0.0.0)对应关系就好），用以下命令添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">10.0.0.0</span> -netmask <span class="hljs-number">255.0.0.0</span> <span class="hljs-number">172.16.84.254</span><br></code></pre></td></tr></table></figure><p>至此内外网路由是已经配置好了。</p><p>第四步：配置内网域名和内网DNS解析</p><p>在MacOS系统中，不支持同时添加内网和外网DNS服务器地址到外网网卡来起到解析内网地址的作用，因此我们要把内网域名和对应的ip地址写到&#x2F;etc&#x2F;hosts文件中进行本地解析。</p><p>较为方便的方法是：先关闭外网网卡，进入纯内网模式，ping内网域名得到内网IP地址，再将IP地址和域名写入到hosts中，操作步骤如下。</p><p>通过ping命令，获取对应域名的IP地址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">MacBook-Pro:root#<span class="hljs-built_in"> ping </span>aaa.bbb.com<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>aaa.bbb.com (10.12.8.25): 56 data bytes<br>64 bytes <span class="hljs-keyword">from</span> 10.12.8.25: <span class="hljs-attribute">icmp_seq</span>=0 <span class="hljs-attribute">ttl</span>=61 <span class="hljs-attribute">time</span>=15.934 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.12.8.25: <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=61 <span class="hljs-attribute">time</span>=16.219 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.12.8.25: <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=61 <span class="hljs-attribute">time</span>=15.713 ms<br>64 bytes <span class="hljs-keyword">from</span> 10.12.8.25: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=61 <span class="hljs-attribute">time</span>=15.755 ms<br></code></pre></td></tr></table></figure><p>将IP地址和对应的域名写入 &#x2F;etc&#x2F;hosts 文件中</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">MacBook-Pro:root# echo <span class="hljs-string">&quot;10.12.8.25 aaa.bbb.com&quot;</span> &gt;&gt;<span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>细心一点，一定要注意不要写错了！！</p><p>至此，就已经完成配置完成啦，此时你的mac就可以内外网均可访问了，但是要注意重启后，需要重新设置。</p><p>————————————————<br>版权声明：本文为CSDN博主「ni_darling」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_44637703/article/details/121626312">https://blog.csdn.net/weixin_44637703/article/details/121626312</a></p>]]></content>
    
    
    <categories>
      
      <category>Mac电脑技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac电脑技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-源码下载、编译、断点调试AppRTCMobile</title>
    <link href="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/"/>
    <url>/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境：Xcode13.2、macOS Big Sur 11.6.1</p></blockquote><h2 id="一、源码下载"><a href="#一、源码下载" class="headerlink" title="一、源码下载"></a>一、源码下载</h2><blockquote><p>在音视频领域中，WebRTC可以说是一个绕不开的宝库，包括了 <font color="red">音视频采集、编码、传输、解码、渲染</font>的全过程。</p></blockquote><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>因为众所周知的原因，要下载WebRTC的源码是需要代理工具的。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">export https_proxy=http://127.0.0.1:7890 <br>http_proxy=http://127.0.0.1:7890 <br>all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h3 id="安装工具-depot-tools"><a href="#安装工具-depot-tools" class="headerlink" title="安装工具 depot_tools"></a>安装工具 depot_tools</h3><p>git clone 获取 depot_tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git<br></code></pre></td></tr></table></figure><p>将depot_tools的路径配置到环境变量中(仅单次生效，后续可以加入其它地方，永久生效)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=$PWD/depot_tools:$PATH<br></code></pre></td></tr></table></figure><h3 id="下载WebRTC源码"><a href="#下载WebRTC源码" class="headerlink" title="下载WebRTC源码"></a>下载WebRTC源码</h3><p>源码比较大，大概需要2小时左右</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir webrtc<br>cd webrtc<br>fetch --nohooks webrtc_ios<br>gclient sync<br></code></pre></td></tr></table></figure><h3 id="切换到指定版本分支（视情况而定）"><a href="#切换到指定版本分支（视情况而定）" class="headerlink" title="切换到指定版本分支（视情况而定）"></a>切换到指定版本分支（视情况而定）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可用版本分支</span><br>git branch -r<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到m79分支</span><br>git checkout branch-heads/m79<br>gclient sync<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者强制切换到指定commit（b484ec0082948ae086c2ba4142b4d2bf8bc4dd4b是m79最后一次提交的commit <span class="hljs-built_in">id</span>）</span><br>gclient sync -r b484ec0082948ae086c2ba4142b4d2bf8bc4dd4b --force<br></code></pre></td></tr></table></figure><h3 id="最终代码结构如下图"><a href="#最终代码结构如下图" class="headerlink" title="最终代码结构如下图"></a>最终代码结构如下图</h3><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007094357959.png" class="" title="image-20221007094357959"><h2 id="二、源码编译生成iOS版本的WebRTC-framework"><a href="#二、源码编译生成iOS版本的WebRTC-framework" class="headerlink" title="二、源码编译生成iOS版本的WebRTC.framework"></a>二、源码编译生成iOS版本的WebRTC.framework</h2><h3 id="编译指令："><a href="#编译指令：" class="headerlink" title="编译指令："></a>编译指令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编译不带证书版本</span><br>gn gen out/ios_symbol_export --args=&#x27;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; ios_enable_code_signing=false rtc_enable_symbol_export=true rtc_include_tests=false&#x27; --ide=xcode<br>ninja -C out/ios-release<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取证书名（暂时保证仅有唯一一个证书，让WebRTC自动选择）</span><br>security find-identity -v -p codesigning<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译带证书版本</span><br>gn gen out/ios_symbol_export --args=&#x27;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; ios_enable_code_signing=true rtc_enable_symbol_export=true rtc_include_tests=false&#x27; --ide=xcode<br><br></code></pre></td></tr></table></figure><h3 id="最终目录结构如下图："><a href="#最终目录结构如下图：" class="headerlink" title="最终目录结构如下图："></a>最终目录结构如下图：</h3><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007095405591.png" class="" title="image-20221007095405591"><h3 id="关键参数解读："><a href="#关键参数解读：" class="headerlink" title="关键参数解读："></a>关键参数解读：</h3><p><code>rtc_enable_symbol_export=true</code>：设置此参数将OC类暴露出来，全局可以访问，不加此参数后续可能会出现错误<font color="red">Undefined Undefined symbol: <em>OBJC_CLASS</em>$_RTCDefaultVideoDecoderFactory</font>，从生成的WebRTC.framework中的machO文件分析，可得如下结果，发现是访问作用域问题。</p><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007095925533.png" class="" title="image-20221007095925533"><h2 id="三、断点调试AppRTCMobile"><a href="#三、断点调试AppRTCMobile" class="headerlink" title="三、断点调试AppRTCMobile"></a>三、断点调试AppRTCMobile</h2><h3 id="①运行-all-xcodeproj-文件"><a href="#①运行-all-xcodeproj-文件" class="headerlink" title="①运行 all.xcodeproj 文件"></a>①运行 <code>all.xcodeproj</code> 文件</h3><h3 id="②如下报错："><a href="#②如下报错：" class="headerlink" title="②如下报错："></a>②如下报错：</h3><p><font color="red"> The Legacy Build System will be removed in a future release. You can configure the selected build system and this deprecation message in File &gt; Project Settings.</font></p><p>根据提示设置一下即可；</p><h3 id="③接着运行，报错："><a href="#③接着运行，报错：" class="headerlink" title="③接着运行，报错："></a>③接着运行，报错：</h3><p><font color="red">bundleID 错误</font></p><p>根据提示做出下图的修改即可，最终改成 <code>com.google.AppRTCMobile</code></p><h3 id="④接着运行，成功后手机上效果如下图："><a href="#④接着运行，成功后手机上效果如下图：" class="headerlink" title="④接着运行，成功后手机上效果如下图："></a>④接着运行，成功后手机上效果如下图：</h3><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007100722364.png" class="" title="image-20221007100722364"><h3 id="⑤demo无法加断点进行单步调试"><a href="#⑤demo无法加断点进行单步调试" class="headerlink" title="⑤demo无法加断点进行单步调试"></a>⑤demo无法加断点进行单步调试</h3><p>找到下面代码增加断点，会发现一旦运行，断点不生效，并且断点变成虚颜色。</p><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007101156323.png" class="" title="image-20221007101156323"><h3 id="⑥查找断点不生效的原因"><a href="#⑥查找断点不生效的原因" class="headerlink" title="⑥查找断点不生效的原因"></a>⑥查找断点不生效的原因</h3><p>虽然能生成 xcode 工程，但是本质上还是用gn编译的，所以如果想用 xcode 源码调试，其实就相当于用 xcode 调试一个从其他地方编译的 app，直接运行加断点，会发现无法走到对应的断点。</p><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007101615895.png" class="" title="image-20221007101615895"><p>无法加断点，大概率是因为 DWARF 有问题。用 dwarfdump 查看一下 <code>AppRTCMobile</code> 的二进制文件符号信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd <span class="hljs-regexp">/Users/</span>carrot<span class="hljs-regexp">/Documents/</span>webrtc-<span class="hljs-keyword">source</span><span class="hljs-regexp">/webrtc/</span>src<span class="hljs-regexp">/out/i</span>os_symbol_export/AppRTCMobile.app<br><br>dsymutil -out=test.dSYM AppRTCMobile<br>dwarfdump test.dSYM -o test.txt<br></code></pre></td></tr></table></figure><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007102110680.png" class="" title="image-20221007102110680"><p>可以看到行号、函数名、文件名都有。不过其中的 <code>DW_AT_decl_line</code> 是相对路径，所以猜测这里可能是路径问题，导致xcode找不到源码，所以无法调试。</p><p>那么有没有办法将 <code>DW_AT_decl_line</code> 改成绝对路径试试呢？其实是可以的，可以使用 <code>lldb</code> 设置一下 <code>source map</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行 app、然后Debug-&gt;Pause 让程序进入进入调试模式；通过下面指令，把相对目录换成绝对路径。</span><br>(lldb) settings set target.source-map &quot;./../../&quot; &quot;/Users/carrot/Documents/webrtc-source/webrtc/src&quot;<br></code></pre></td></tr></table></figure><p><code>重新添加</code>断点，可以发现断点生效了（偶然不生效，可以考虑重启电脑试试） ^_^</p><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007102834861.png" class="" title="image-20221007102834861"><h3 id="⑦每次运行断点比较麻烦，可以给xcode添加符号断点"><a href="#⑦每次运行断点比较麻烦，可以给xcode添加符号断点" class="headerlink" title="⑦每次运行断点比较麻烦，可以给xcode添加符号断点"></a>⑦每次运行断点比较麻烦，可以给xcode添加符号断点</h3><p>比如在执行 <code>-[ARDAppDelegate application:didFinishLaunchingWithOptions:]</code> 时自动设置source-map，<code>settings set target.source-map &quot;./../../&quot; &quot;/Users/carrot/Documents/webrtc-source/webrtc/src&quot;</code>就省得每次手动设置了。</p><img src="/2022/10/07/WebRTC%E5%AE%9E%E6%88%98/day01-%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95AppRTCMobile/image-20221007103236826.png" class="" title="image-20221007103236826"><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://segmentfault.com/a/1190000041179228">https://segmentfault.com/a/1190000041179228</a></p><p><a href="https://wxdut.com/16610132450450.html">https://wxdut.com/16610132450450.html</a></p>]]></content>
    
    
    <categories>
      
      <category>WebRTC实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量之四、FEC</title>
    <link href="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/"/>
    <url>/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="五、FEC"><a href="#五、FEC" class="headerlink" title="五、FEC"></a>五、FEC</h2><h3 id="1、什么是FEC？"><a href="#1、什么是FEC？" class="headerlink" title="1、什么是FEC？"></a>1、什么是FEC？</h3><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073843908.png" class="" title="image-20220915073843908"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073846676.png" class="" title="image-20220915073846676"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073849247.png" class="" title="image-20220915073849247"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073851833.png" class="" title="image-20220915073851833"><h3 id="2、FEC的原理是什么？"><a href="#2、FEC的原理是什么？" class="headerlink" title="2、FEC的原理是什么？"></a>2、FEC的原理是什么？</h3><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073857671.png" class="" title="image-20220915073857671"><blockquote><p>其实就是Data1和Data2进行异或操作（系统为0，不同为1），产生一个新的包R。</p><p>当Data1丢失时，可以通过 Data2和R进行异或操作，恢复 Data1的数据。</p><p>这就是两个包的FEC</p></blockquote><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073920197.png" class="" title="image-20220915073920197"><blockquote><p> 那么三个包怎么办呢？其实也一样</p><p>1、2、3异或生成冗余包R1；如果3丢了，可以通过1、2、R1恢复3的数据</p><p>但是如果4、5都丢失了，就无法恢复了。</p><p>有没有办法让4、5也能恢复呢？看下图</p></blockquote><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073938174.png" class="" title="image-20220915073938174"><blockquote><p>增加纵向的冗余包C1、C2、C3 这样抗丢包性就更强多了。</p><p>缺点：产生了更多的冗余包、并且实现复杂度也高了很多。</p></blockquote><h3 id="3、那么媒体包的分组与生成FEC的包数由谁决定呢？"><a href="#3、那么媒体包的分组与生成FEC的包数由谁决定呢？" class="headerlink" title="3、那么媒体包的分组与生成FEC的包数由谁决定呢？"></a>3、那么媒体包的分组与生成FEC的包数由谁决定呢？</h3><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915073959809.png" class="" title="image-20220915073959809"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074002490.png" class="" title="image-20220915074002490"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074005890.png" class="" title="image-20220915074005890"><ul><li>kFecRateTable作用：用于确定我们多少个媒体包进行分组，对这一组的数据进行FEC处理。</li><li>PacketMaskRandomTbl作用：它用于确定我们对这一组的媒体包，采用什么样的保护策略，并且产生多少个冗余包数据。</li></ul><h3 id="4、WebRTC中FEC的创建？"><a href="#4、WebRTC中FEC的创建？" class="headerlink" title="4、WebRTC中FEC的创建？"></a>4、WebRTC中FEC的创建？</h3><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074022746.png" class="" title="image-20220915074022746"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074025603.png" class="" title="image-20220915074025603"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074028289.png" class="" title="image-20220915074028289"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074031186.png" class="" title="image-20220915074031186"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074034702.png" class="" title="image-20220915074034702"><h3 id="5、WebRTC如何为媒体包产生冗余数据？"><a href="#5、WebRTC如何为媒体包产生冗余数据？" class="headerlink" title="5、WebRTC如何为媒体包产生冗余数据？"></a>5、WebRTC如何为媒体包产生冗余数据？</h3><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074041348.png" class="" title="image-20220915074041348"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074044270.png" class="" title="image-20220915074044270"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074047035.png" class="" title="image-20220915074047035"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074049838.png" class="" title="image-20220915074049838"><h3 id="5、认识WebRTC中FEC的保护因子是什么？"><a href="#5、认识WebRTC中FEC的保护因子是什么？" class="headerlink" title="5、认识WebRTC中FEC的保护因子是什么？"></a>5、认识WebRTC中FEC的保护因子是什么？</h3><ul><li>保护因子的作用：是对一组媒体包产生多少个FEC包</li></ul><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074101106.png" class="" title="image-20220915074101106"><ul><li>WebRTC的丢包率是以256个为分母进行计算的，也就是256个包中丢了多少个包。</li></ul><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074110424.png" class="" title="image-20220915074110424"><ul><li>上面就是WebRTC通过保护因子产生冗余包的个数</li><li>那么保护因子是从哪里来的呢？</li></ul><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074125356.png" class="" title="image-20220915074125356"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074128647.png" class="" title="image-20220915074128647"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074131204.png" class="" title="image-20220915074131204"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074134499.png" class="" title="image-20220915074134499"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074137559.png" class="" title="image-20220915074137559"><img src="/2022/09/18/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E5%9B%9B/image-20220915074140162.png" class="" title="image-20220915074140162">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量之三、Pacer、JitterBufferr</title>
    <link href="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/"/>
    <url>/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="三、认识Pacer"><a href="#三、认识Pacer" class="headerlink" title="三、认识Pacer"></a>三、认识Pacer</h2><h3 id="1、Pacer的作用是什么？"><a href="#1、Pacer的作用是什么？" class="headerlink" title="1、Pacer的作用是什么？"></a>1、Pacer的作用是什么？</h3><ul><li>让数据在网络上发送得更平滑，防止因数据的突增导致网络发生拥塞。</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073211215.png" class="" title="image-20220915073211215"><h3 id="2、Pacer是什么时候创建的？"><a href="#2、Pacer是什么时候创建的？" class="headerlink" title="2、Pacer是什么时候创建的？"></a>2、Pacer是什么时候创建的？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073223661.png" class="" title="image-20220915073223661"><ul><li>这种流程图，也是超级棒啊</li></ul><h3 id="3、关于Pacer的两个重要函数、两种工作模式？"><a href="#3、关于Pacer的两个重要函数、两种工作模式？" class="headerlink" title="3、关于Pacer的两个重要函数、两种工作模式？"></a>3、关于Pacer的两个重要函数、两种工作模式？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073238172.png" class="" title="image-20220915073238172"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073241618.png" class="" title="image-20220915073241618"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073245124.png" class="" title="image-20220915073245124"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073248137.png" class="" title="image-20220915073248137"><ul><li>WebRTC如何处理是否需要发送保活包？当没有音视频数据时，才需要发送保活包。</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073255149.png" class="" title="image-20220915073255149"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073258438.png" class="" title="image-20220915073258438"><h3 id="4、认识Pacer中非常重要的数据结构-RoundBobinPacketQueue。"><a href="#4、认识Pacer中非常重要的数据结构-RoundBobinPacketQueue。" class="headerlink" title="4、认识Pacer中非常重要的数据结构 RoundBobinPacketQueue。"></a>4、认识Pacer中非常重要的数据结构 RoundBobinPacketQueue。</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073304626.png" class="" title="image-20220915073304626"><ul><li>对这个结构体，在 12-20 小节中有详细介绍</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073314869.png" class="" title="image-20220915073314869"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073317996.png" class="" title="image-20220915073317996"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073321456.png" class="" title="image-20220915073321456"><h3 id="5、认识Pacer中的-IntervalBudget-，它的作用是什么？"><a href="#5、认识Pacer中的-IntervalBudget-，它的作用是什么？" class="headerlink" title="5、认识Pacer中的 IntervalBudget ，它的作用是什么？"></a>5、认识Pacer中的 <code>IntervalBudget</code> ，它的作用是什么？</h3><ul><li>IntervalBudget的作用：控制每次发送数据码流的大小。</li><li>有了目标码率，为什么还要intervalBudget？</li><li>之所以要intervalBudget，是因为我们WebRTC的拥塞控制获取的目标码率是以【秒】为单位的。</li><li>而比如时间周期每5毫秒要发送多少数据量，就是由intervalBudget控制的。</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073352591.png" class="" title="image-20220915073352591"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073355372.png" class="" title="image-20220915073355372"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073358116.png" class="" title="image-20220915073358116"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073401429.png" class="" title="image-20220915073401429"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073404013.png" class="" title="image-20220915073404013"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073406822.png" class="" title="image-20220915073406822"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073410056.png" class="" title="image-20220915073410056"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073413349.png" class="" title="image-20220915073413349"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073416157.png" class="" title="image-20220915073416157"><h3 id="6、WebRTC如何向Pacer中插入数据包？"><a href="#6、WebRTC如何向Pacer中插入数据包？" class="headerlink" title="6、WebRTC如何向Pacer中插入数据包？"></a>6、WebRTC如何向Pacer中插入数据包？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073423193.png" class="" title="image-20220915073423193"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073425901.png" class="" title="image-20220915073425901"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073430660.png" class="" title="image-20220915073430660"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073433856.png" class="" title="image-20220915073433856"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073436911.png" class="" title="image-20220915073436911"><h2 id="四、JitterBuffer"><a href="#四、JitterBuffer" class="headerlink" title="四、JitterBuffer"></a>四、JitterBuffer</h2><h3 id="1、认识JitterBuffer类的关系图？"><a href="#1、认识JitterBuffer类的关系图？" class="headerlink" title="1、认识JitterBuffer类的关系图？"></a>1、认识JitterBuffer类的关系图？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073511274.png" class="" title="image-20220915073511274"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073514475.png" class="" title="image-20220915073514475"><blockquote><p>收到视频数据后，<br>① 先给到 RtpVideoStreamReceiver 再交由 PacketBuffer 组成一帧数据， 然后还给 RtpVideoStreamReceiver；</p><p>②再由 RtpVideoStreamReceiver 把这一帧数据给到 RtpFrameReferenceFinder 来找这一帧的依赖帧，找到所有依赖帧后，再还给 RtpVideoStreamReceiver；</p><p>③ RtpVideoStreamReceiver 再把数据保存到 Internal::VideoReceiveStream 中，这里面的数据帧就是一个个可以进行解码的数据帧了。</p><p>【掌握】上面的架构一定要掌握，才能继续看实现细节。</p></blockquote><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073533358.png" class="" title="image-20220915073533358"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073537194.png" class="" title="image-20220915073537194"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073539861.png" class="" title="image-20220915073539861"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073542837.png" class="" title="image-20220915073542837"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073546596.png" class="" title="image-20220915073546596"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073549633.png" class="" title="image-20220915073549633"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073552549.png" class="" title="image-20220915073552549"><h3 id="3、WebRTC中-如何查找完整帧的？"><a href="#3、WebRTC中-如何查找完整帧的？" class="headerlink" title="3、WebRTC中 如何查找完整帧的？"></a>3、WebRTC中 如何查找完整帧的？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073600453.png" class="" title="image-20220915073600453"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073603727.png" class="" title="image-20220915073603727"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073606714.png" class="" title="image-20220915073606714"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073609613.png" class="" title="image-20220915073609613"><h3 id="4、WebRTC中RtpFrameReferenceFinder的作用是什么？"><a href="#4、WebRTC中RtpFrameReferenceFinder的作用是什么？" class="headerlink" title="4、WebRTC中RtpFrameReferenceFinder的作用是什么？"></a>4、WebRTC中RtpFrameReferenceFinder的作用是什么？</h3><ul><li>RtpFrameReferenceFinder的作用：查找解码帧的参考帧</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073621322.png" class="" title="image-20220915073621322"><ul><li>这个GOP就体现了一个GOP中可能有多个I帧，但是仅有一个IDR帧。</li><li>【注意】WebRTC编码出的数据流一般只包含I帧和P帧，通常不包含B帧。所以查找参考帧只要看前面一帧数据</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073631046.png" class="" title="image-20220915073631046"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073634077.png" class="" title="image-20220915073634077"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073636853.png" class="" title="image-20220915073636853"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073640039.png" class="" title="image-20220915073640039"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073642840.png" class="" title="image-20220915073642840"><h3 id="4、WebRTC中RtpFrameReferenceFinder的如何查找参考帧的？"><a href="#4、WebRTC中RtpFrameReferenceFinder的如何查找参考帧的？" class="headerlink" title="4、WebRTC中RtpFrameReferenceFinder的如何查找参考帧的？"></a>4、WebRTC中RtpFrameReferenceFinder的如何查找参考帧的？</h3><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073648981.png" class="" title="image-20220915073648981"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073651929.png" class="" title="image-20220915073651929"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073654592.png" class="" title="image-20220915073654592"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073657252.png" class="" title="image-20220915073657252"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073700529.png" class="" title="image-20220915073700529"><ul><li>在实时通信流中，一般包含B帧，所以非关机键帧的参考帧就是前面一帧。</li></ul><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073707842.png" class="" title="image-20220915073707842"><h3 id="5、WebRTC中的FrameBuffer"><a href="#5、WebRTC中的FrameBuffer" class="headerlink" title="5、WebRTC中的FrameBuffer"></a>5、WebRTC中的FrameBuffer</h3><p>一旦进入FrameBuffer的帧，随时都可能被解码，播放。</p><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073720871.png" class="" title="image-20220915073720871"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073723693.png" class="" title="image-20220915073723693"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073726826.png" class="" title="image-20220915073726826"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073730929.png" class="" title="image-20220915073730929"><img src="/2022/09/15/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%89/image-20220915073733969.png" class="" title="image-20220915073733969">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量之二</title>
    <link href="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/"/>
    <url>/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="二、丢包相关的内容"><a href="#二、丢包相关的内容" class="headerlink" title="二、丢包相关的内容"></a>二、丢包相关的内容</h2><h3 id="1、NACK的作用是什么？RTX的作用是什么？"><a href="#1、NACK的作用是什么？RTX的作用是什么？" class="headerlink" title="1、NACK的作用是什么？RTX的作用是什么？"></a>1、NACK的作用是什么？RTX的作用是什么？</h3><ul><li>NACK：用于通知丢了哪些包</li><li>RTX：用于重传丢失的包</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084401515.png" class="" title="image-20220912084401515"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084412966.png" class="" title="image-20220912084412966"><blockquote><p>图中媒体协商阶段解读：这个视频媒体流使用的是VP8、可以使用NACK通知丢包、 96和97是关联关系、97是96的丢包重传流</p><p>【必须掌握】这图是纲领</p></blockquote><h3 id="2、WebRTC接收端如何判断是否发生了丢包？"><a href="#2、WebRTC接收端如何判断是否发生了丢包？" class="headerlink" title="2、WebRTC接收端如何判断是否发生了丢包？"></a>2、WebRTC接收端如何判断是否发生了丢包？</h3><ul><li>通过对收到包进行重拍之后，发现Sequence number依然不连续，那就是发生了丢包</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084829288.png" class="" title="image-20220912084829288"><h3 id="3、WebRTC是如何给包做排序的？有一个关键函数是什么？"><a href="#3、WebRTC是如何给包做排序的？有一个关键函数是什么？" class="headerlink" title="3、WebRTC是如何给包做排序的？有一个关键函数是什么？"></a>3、WebRTC是如何给包做排序的？有一个关键函数是什么？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084905867.png" class="" title="image-20220912084905867"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084909034.png" class="" title="image-20220912084909034"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084912425.png" class="" title="image-20220912084912425"><ul><li>关键点：理解AheadOf的函数名字的含义</li></ul><h3 id="4、NACK的调用栈？"><a href="#4、NACK的调用栈？" class="headerlink" title="4、NACK的调用栈？"></a>4、NACK的调用栈？</h3><ul><li>从下往上阅读</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084932932.png" class="" title="image-20220912084932932"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084943818.png" class="" title="image-20220912084943818"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084947525.png" class="" title="image-20220912084947525"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912084950945.png" class="" title="image-20220912084950945"><h3 id="4、NACK模块如何判断是否丢包的代码逻辑"><a href="#4、NACK模块如何判断是否丢包的代码逻辑" class="headerlink" title="4、NACK模块如何判断是否丢包的代码逻辑"></a>4、NACK模块如何判断是否丢包的代码逻辑</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085001851.png" class="" title="image-20220912085001851"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085004796.png" class="" title="image-20220912085004796"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085007507.png" class="" title="image-20220912085007507"><ul><li>keyframe_list只缓冲10000个包，超过之后，会把最老的那个删除掉</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085017249.png" class="" title="image-20220912085017249"><ul><li>recovered_list只缓冲10000个包，超过之后，会把最老的那个删除掉</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085025383.png" class="" title="image-20220912085025383"><ul><li>上面是nack的最核心代码</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085033777.png" class="" title="image-20220912085033777"><ul><li>nack_list只缓冲10000个包，超过之后，会把最老的那个删除掉</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085045181.png" class="" title="image-20220912085045181"><h3 id="6、【上面仅仅找到可疑的丢包】那么nack如何找到真正的丢包？"><a href="#6、【上面仅仅找到可疑的丢包】那么nack如何找到真正的丢包？" class="headerlink" title="6、【上面仅仅找到可疑的丢包】那么nack如何找到真正的丢包？"></a>6、【上面仅仅找到可疑的丢包】那么nack如何找到真正的丢包？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085056014.png" class="" title="image-20220912085056014"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085059585.png" class="" title="image-20220912085059585"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085103029.png" class="" title="image-20220912085103029"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085106602.png" class="" title="image-20220912085106602"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085111145.png" class="" title="image-20220912085111145"><ul><li>关键点还是会等待一个RTT时间，防止丢失的包仅仅只是乱序导致的。</li></ul><h3 id="7、VP8是如何判断关键帧？"><a href="#7、VP8是如何判断关键帧？" class="headerlink" title="7、VP8是如何判断关键帧？"></a>7、VP8是如何判断关键帧？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085204350.png" class="" title="image-20220912085204350"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085210056.png" class="" title="image-20220912085210056"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085216609.png" class="" title="image-20220912085216609"><p>【12-14】有对VP8 Payload描述符的详细解释，需要时回来取</p><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085225085.png" class="" title="image-20220912085225085"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085229729.png" class="" title="image-20220912085229729"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085233509.png" class="" title="image-20220912085233509"><ul><li>介绍完 VP8的Description，我们再看下VP8的 Payload Header</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085243598.png" class="" title="image-20220912085243598"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085246848.png" class="" title="image-20220912085246848"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085250868.png" class="" title="image-20220912085250868"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085254255.png" class="" title="image-20220912085254255"><blockquote><p>判断VP8的关键帧：每个RTP包中，描述符的（S位置1 &amp;&amp; PID&#x3D;0）这些包，拿到这些的Header中的（P位置为1）就是关键帧。</p></blockquote><h3 id="8、NACK的格式是怎么样的？"><a href="#8、NACK的格式是怎么样的？" class="headerlink" title="8、NACK的格式是怎么样的？"></a>8、NACK的格式是怎么样的？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085312133.png" class="" title="image-20220912085312133"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085315909.png" class="" title="image-20220912085315909"><ul><li>抓包查看NACK的包</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085324459.png" class="" title="image-20220912085324459"><h3 id="9、WebRTC接收Nack的调用栈是怎么样的？"><a href="#9、WebRTC接收Nack的调用栈是怎么样的？" class="headerlink" title="9、WebRTC接收Nack的调用栈是怎么样的？"></a>9、WebRTC接收Nack的调用栈是怎么样的？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085333151.png" class="" title="image-20220912085333151"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085336080.png" class="" title="image-20220912085336080"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085339993.png" class="" title="image-20220912085339993"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085344063.png" class="" title="image-20220912085344063"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085348012.png" class="" title="image-20220912085348012"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085351492.png" class="" title="image-20220912085351492"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085355793.png" class="" title="image-20220912085355793"><h3 id="10、WebRTC的RTX协议格式是怎么样的？RTX的作用是什么？"><a href="#10、WebRTC的RTX协议格式是怎么样的？RTX的作用是什么？" class="headerlink" title="10、WebRTC的RTX协议格式是怎么样的？RTX的作用是什么？"></a>10、WebRTC的RTX协议格式是怎么样的？RTX的作用是什么？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085404325.png" class="" title="image-20220912085404325"><ul><li>收到RTX包后，如何判断它重传的是哪个包？</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085412776.png" class="" title="image-20220912085412776"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085416805.png" class="" title="image-20220912085416805"><ul><li>我们实际操作一下，如何找到RTX包</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085425244.png" class="" title="image-20220912085425244"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085429168.png" class="" title="image-20220912085429168"><ul><li>从上图中，我们可以找到RTX包，也就是重传包</li><li>那么如何找到我们NACK包，然后让这两者对应起来呢？</li></ul><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085440032.png" class="" title="image-20220912085440032"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085445401.png" class="" title="image-20220912085445401"><h3 id="11、WebRTC如何发送RTX包的呢？"><a href="#11、WebRTC如何发送RTX包的呢？" class="headerlink" title="11、WebRTC如何发送RTX包的呢？"></a>11、WebRTC如何发送RTX包的呢？</h3><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085456772.png" class="" title="image-20220912085456772"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085500585.png" class="" title="image-20220912085500585"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085503923.png" class="" title="image-20220912085503923"><blockquote><p>发送过程：WebRTC就是根据NACK从历史记录中找到对应的包，然后判断是否开启RTX功能，然后将丢失的包重新打包成RTX包，发送出去</p></blockquote><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085513779.png" class="" title="image-20220912085513779"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085516978.png" class="" title="image-20220912085516978"><img src="/2022/09/14/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%BA%8C/image-20220912085520076.png" class="" title="image-20220912085520076">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-WebRTC服务质量之一</title>
    <link href="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/"/>
    <url>/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识RTP、RTCP"><a href="#一、认识RTP、RTCP" class="headerlink" title="一、认识RTP、RTCP"></a>一、认识RTP、RTCP</h2><h3 id="1、章节概述，对day12的知识要点概述"><a href="#1、章节概述，对day12的知识要点概述" class="headerlink" title="1、章节概述，对day12的知识要点概述"></a>1、章节概述，对day12的知识要点概述</h3><blockquote><p>本章节的内容，都是WebRTC的精华，也是面试最高频的问题。建议反复观看，优先消化理解。</p></blockquote><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911155051371.png" class="" title="image-20220911155051371"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911155058428.png" class="" title="image-20220911155058428"><h3 id="2、你更愿意是线上听课，还是线下听课？试试通信的目标是什么？"><a href="#2、你更愿意是线上听课，还是线下听课？试试通信的目标是什么？" class="headerlink" title="2、你更愿意是线上听课，还是线下听课？试试通信的目标是什么？"></a>2、你更愿意是线上听课，还是线下听课？试试通信的目标是什么？</h3><ul><li>线上听课容易收到 <code>技术、设备、网络</code> 等影响，其实效果远远没有线下好。</li><li>试试通信的目标：尽可能逼近或达到面对面交流的效果。</li></ul><h3 id="3、为了极可能达到面对面的交流效果，有哪几个重要指标？"><a href="#3、为了极可能达到面对面的交流效果，有哪几个重要指标？" class="headerlink" title="3、为了极可能达到面对面的交流效果，有哪几个重要指标？"></a>3、为了极可能达到面对面的交流效果，有哪几个重要指标？</h3><ul><li>实时通信的延迟指标</li><li>音频服务质量</li><li>视频服务质量</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180433875.png" class="" title="image-20220911180433875"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180437659.png" class="" title="image-20220911180437659"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180441941.png" class="" title="image-20220911180441941"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180445689.png" class="" title="image-20220911180445689"><h3 id="4、-时延-和-音视频质量-之间是否存在矛盾？矛盾的解决思路是什么？"><a href="#4、-时延-和-音视频质量-之间是否存在矛盾？矛盾的解决思路是什么？" class="headerlink" title="4、 时延 和 音视频质量 之间是否存在矛盾？矛盾的解决思路是什么？"></a>4、 <code>时延</code> 和 <code>音视频质量</code> 之间是否存在矛盾？矛盾的解决思路是什么？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180544206.png" class="" title="image-20220911180544206"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180548456.png" class="" title="image-20220911180548456"><h3 id="4、RTP在网络协议的哪一层？"><a href="#4、RTP在网络协议的哪一层？" class="headerlink" title="4、RTP在网络协议的哪一层？"></a>4、RTP在网络协议的哪一层？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180624280.png" class="" title="image-20220911180624280"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180630597.png" class="" title="image-20220911180630597"><blockquote><p>RTP其实和UDP很相似，都是一个一个包传输的，但是UDP是无法保证包的顺序的，那么WebRTC是如何保证RTP的顺序呢？</p><p>每个包都有一个 <code>sequence number</code>，借助 <code>sequence number</code> 来保证每一个包在发送端和接收端的顺序。</p></blockquote><h3 id="6、认识RTP的头信息包含哪些？"><a href="#6、认识RTP的头信息包含哪些？" class="headerlink" title="6、认识RTP的头信息包含哪些？"></a>6、认识RTP的头信息包含哪些？</h3><ul><li>V：表示RTC协议的版本号，一般是2</li><li>P：代表是否有填充数据</li><li>X：代表RTP中是否有扩展头</li><li>CC：Contribute Source，表示对于我们这个数据来说，它是由哪些源共同生成的。比如多人视频，声音是三个组合而成的CC就是3。</li><li>M：代表视频帧分包之后的最后一个帧（标记位）</li><li>PT：Payload Type，表示这个数据的负载类型是什么？比如音频opus是111、视频是127</li><li>Sequence Number：主要是接收到视频数据之后，保证我们乱序的包能够进行排序。</li><li>TimeStamp：表示我们这个包产生的时间戳。对于一个视频帧，可能被分成多个RTP包，但是这些所有的RTP包中TimeStamp都是相同的。随着时间的流逝，不同帧的timeStamp都是递增的。</li><li>SSRC：用来区分不同的流，比PT更加准确。比如一个客户端同事共享了桌面视频流和摄像头视频流，这时候PT是相同的，我们就可以通过SSRC来进行区分了。</li><li>CSRC：代表我们这个数据，是由几个贡献者共同共享的。</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911180831934.png" class="" title="image-20220911180831934"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181514023.png" class="" title="image-20220911181514023"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181517328.png" class="" title="image-20220911181517328"><h3 id="7、WebRTC是如何对视频进行分包的？"><a href="#7、WebRTC是如何对视频进行分包的？" class="headerlink" title="7、WebRTC是如何对视频进行分包的？"></a>7、WebRTC是如何对视频进行分包的？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181608752.png" class="" title="image-20220911181608752"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181611696.png" class="" title="image-20220911181611696"><ul><li>对于一个视频帧，通常比较大，需要分成十几个包进行传输。</li><li>我们看到104包的M位是1，代表是一帧数据的结束位。所以从100~104包中，103包丢了。</li><li>WebRTC会等待很小的一段时间，如果103来了，那么就会组成一个完整的视频帧；如果很小一段时间内，103还是未收到，那么WebRTC就会丢弃这一帧的数据，去组装下一帧的数据。</li></ul><h3 id="8、什么情况下代表RTP有扩展头数据？初识RTP扩展头里面有哪些信息？"><a href="#8、什么情况下代表RTP有扩展头数据？初识RTP扩展头里面有哪些信息？" class="headerlink" title="8、什么情况下代表RTP有扩展头数据？初识RTP扩展头里面有哪些信息？"></a>8、什么情况下代表RTP有扩展头数据？初识RTP扩展头里面有哪些信息？</h3><ul><li>如果RTP头的X位是1，那么代表这个RTP包有扩展头。</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181934637.png" class="" title="image-20220911181934637"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181939521.png" class="" title="image-20220911181939521"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911181943004.png" class="" title="image-20220911181943004"><h3 id="9、详细讲解扩展头的每个字段含义？"><a href="#9、详细讲解扩展头的每个字段含义？" class="headerlink" title="9、详细讲解扩展头的每个字段含义？"></a>9、详细讲解扩展头的每个字段含义？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182006353.png" class="" title="image-20220911182006353"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182011800.png" class="" title="image-20220911182011800"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182018005.png" class="" title="image-20220911182018005"><ul><li>length&#x3D;3表示后面的扩展数据长度是 3*4&#x3D;12字节</li><li>在①中 L&#x3D;0 表示后面的数据data的长度是 (L+1) &#x3D; 1字节</li><li>在②中 L&#x3D;1 表示后面的数据data的长度是 (L+1) &#x3D; 2字节</li><li>在③中 L&#x3D;2 表示后面的数据data的长度是 (L+1) &#x3D; 3字节，但是数据实际只有2个字节，所以用 <code>0(pad)</code>进行了填充</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182038347.png" class="" title="image-20220911182038347"><ul><li>两字节的扩展头里面的 <code>L=0</code> 含义是代表后面数据的实际长度，<code>L=0</code>就是后面无数据了。（注意和前面一字节的扩展头区分开来）</li></ul><h3 id="10、WebRTC用到的扩展头？"><a href="#10、WebRTC用到的扩展头？" class="headerlink" title="10、WebRTC用到的扩展头？"></a>10、WebRTC用到的扩展头？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182058845.png" class="" title="image-20220911182058845"><ul><li>每一个扩展项的说明，都在源码的注释里面有说明</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182109957.png" class="" title="image-20220911182109957"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182113213.png" class="" title="image-20220911182113213"><ul><li>【重要】但凡有一个看不懂，都可以倒回去看看 12-4 章节的内容，一定要熟知</li></ul><h3 id="11、RTCP的协议在网络协议的哪一层？与IP包、UDP包有什么关系？"><a href="#11、RTCP的协议在网络协议的哪一层？与IP包、UDP包有什么关系？" class="headerlink" title="11、RTCP的协议在网络协议的哪一层？与IP包、UDP包有什么关系？"></a>11、RTCP的协议在网络协议的哪一层？与IP包、UDP包有什么关系？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911182142750.png" class="" title="image-20220911182142750"><h3 id="12、RTCP-Header中包含哪些字段，分别是什么含义？"><a href="#12、RTCP-Header中包含哪些字段，分别是什么含义？" class="headerlink" title="12、RTCP Header中包含哪些字段，分别是什么含义？"></a>12、RTCP Header中包含哪些字段，分别是什么含义？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183139973.png" class="" title="image-20220911183139973"><ul><li>V：version，版本号</li><li>P：是否有填充位，一般是因为字节对齐需要。</li><li>Count：表示我们这个RTCP协议中包含的ReportBlock有多少个？</li><li>Type：根据功能的不同，有不同的RTCP的Type</li><li>Length：表示我们这个RTCP的数据有多长，数值为（N-1）个4字节</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183348616.png" class="" title="image-20220911183348616"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183404924.png" class="" title="image-20220911183404924"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183410244.png" class="" title="image-20220911183410244"><h3 id="13、重点认识-SR-这种RTCP包？"><a href="#13、重点认识-SR-这种RTCP包？" class="headerlink" title="13、重点认识 SR 这种RTCP包？"></a>13、重点认识 SR 这种RTCP包？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183437801.png" class="" title="image-20220911183437801"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183444662.png" class="" title="image-20220911183444662"><ul><li>NTP TImeStamp：是我们真实世界中的真实时间，通过这个时间我们做音视频同步，因为不同的源它们的NTP时间是一样的。</li><li>RTP TimeStamp：它是一个相对时间，只针对我们这一路流起作用；当有多路流时，它们是相互没有关系的。</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183502979.png" class="" title="image-20220911183502979"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183509230.png" class="" title="image-20220911183509230"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183514237.png" class="" title="image-20220911183514237"><h3 id="13、重点认识RR这种RTCP包"><a href="#13、重点认识RR这种RTCP包" class="headerlink" title="13、重点认识RR这种RTCP包"></a>13、重点认识RR这种RTCP包</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183539397.png" class="" title="image-20220911183539397"><ul><li>RR的作用，就是为了告诉对方，我接收了多少包，丢了多少包；结构与SR类型类似。</li><li>SR和RR重要的作用都是发送Report Block</li></ul><h3 id="14、重点认识RTCP中SDES格式是什么？在WebRTC中有什么作用？"><a href="#14、重点认识RTCP中SDES格式是什么？在WebRTC中有什么作用？" class="headerlink" title="14、重点认识RTCP中SDES格式是什么？在WebRTC中有什么作用？"></a>14、重点认识RTCP中SDES格式是什么？在WebRTC中有什么作用？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183556020.png" class="" title="image-20220911183556020"><ul><li>SC：SDES Item Count，表示后面的SDES Items 的个数</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183606833.png" class="" title="image-20220911183606833"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183610948.png" class="" title="image-20220911183610948"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183614316.png" class="" title="image-20220911183614316"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183618004.png" class="" title="image-20220911183618004"><ul><li>RTCP中SDES作用：主要就是为了确认CNAME和SSRC之间的关系，如果产生重复冲突，就能通过SDES重新建立CNAME和SSRC的关系。</li></ul><h3 id="14、其他类型的RTCP报文：BYE报文"><a href="#14、其他类型的RTCP报文：BYE报文" class="headerlink" title="14、其他类型的RTCP报文：BYE报文"></a>14、其他类型的RTCP报文：BYE报文</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183632892.png" class="" title="image-20220911183632892"><ul><li>BYE中可以指定接收端需要关闭那个SSRC中的流</li><li>RTCP中的APP报文</li><li>如果我们需要自己实现对RTCP的控制时，就可以使用APP这个报文</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183647134.png" class="" title="image-20220911183647134"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183650900.png" class="" title="image-20220911183650900"><h3 id="16、RTPFB报文格式是什么？作用是什么"><a href="#16、RTPFB报文格式是什么？作用是什么" class="headerlink" title="16、RTPFB报文格式是什么？作用是什么?"></a>16、RTPFB报文格式是什么？作用是什么?</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183701739.png" class="" title="image-20220911183701739"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183705042.png" class="" title="image-20220911183705042"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183707690.png" class="" title="image-20220911183707690"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183711064.png" class="" title="image-20220911183711064"><ul><li>FMT：Feedback Message Type</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183720256.png" class="" title="image-20220911183720256"><h3 id="17、什么是Compound-RTCP呢？"><a href="#17、什么是Compound-RTCP呢？" class="headerlink" title="17、什么是Compound RTCP呢？"></a>17、什么是Compound RTCP呢？</h3><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183728271.png" class="" title="image-20220911183728271"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183731464.png" class="" title="image-20220911183731464"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183736043.png" class="" title="image-20220911183736043"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183739983.png" class="" title="image-20220911183739983"><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183743359.png" class="" title="image-20220911183743359"><ul><li>上图的Compound RTCP都是由SR + SDES组成的</li></ul><img src="/2022/09/11/WebRTC%E6%BA%90%E7%A0%81/day12-WebRTC%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%E4%B9%8B%E4%B8%80/image-20220911183754135.png" class="" title="image-20220911183754135">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-深入理解WebRTC网络传输之三</title>
    <link href="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/"/>
    <url>/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="三、收集各种candidate"><a href="#三、收集各种candidate" class="headerlink" title="三、收集各种candidate"></a>三、收集各种candidate</h2><h3 id="1、STUN存在的目的是什么？"><a href="#1、STUN存在的目的是什么？" class="headerlink" title="1、STUN存在的目的是什么？"></a>1、STUN存在的目的是什么？</h3><ul><li>进行NAT穿越</li></ul><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161013652.png" class="" title="image-20220904161013652"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161017011.png" class="" title="image-20220904161017011"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161020464.png" class="" title="image-20220904161020464"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161023544.png" class="" title="image-20220904161023544"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161028105.png" class="" title="image-20220904161028105"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161031139.png" class="" title="image-20220904161031139"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161034276.png" class="" title="image-20220904161034276"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161038071.png" class="" title="image-20220904161038071"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161041702.png" class="" title="image-20220904161041702"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161044970.png" class="" title="image-20220904161044970"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161048154.png" class="" title="image-20220904161048154"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161051899.png" class="" title="image-20220904161051899"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161055085.png" class="" title="image-20220904161055085"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161058535.png" class="" title="image-20220904161058535"><h3 id="2、WebRTC发送stun的过程？"><a href="#2、WebRTC发送stun的过程？" class="headerlink" title="2、WebRTC发送stun的过程？"></a>2、WebRTC发送stun的过程？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161107212.png" class="" title="image-20220904161107212"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161111712.png" class="" title="image-20220904161111712"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161115756.png" class="" title="image-20220904161115756"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161119329.png" class="" title="image-20220904161119329"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161123118.png" class="" title="image-20220904161123118"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161126946.png" class="" title="image-20220904161126946"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161716364.png" class="" title="image-20220904161716364"><h3 id="3、WebRTC-收集-SrflxCandidate-的过程？"><a href="#3、WebRTC-收集-SrflxCandidate-的过程？" class="headerlink" title="3、WebRTC 收集 SrflxCandidate 的过程？"></a>3、WebRTC 收集 SrflxCandidate 的过程？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161724690.png" class="" title="image-20220904161724690"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161728714.png" class="" title="image-20220904161728714"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161732338.png" class="" title="image-20220904161732338"><h3 id="4、认识-TRUN-协议？"><a href="#4、认识-TRUN-协议？" class="headerlink" title="4、认识 TRUN 协议？"></a>4、认识 TRUN 协议？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161743038.png" class="" title="image-20220904161743038"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161746271.png" class="" title="image-20220904161746271"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161749887.png" class="" title="image-20220904161749887"><h3 id="5、WebRTC如何收集TCP类型的Candidate？"><a href="#5、WebRTC如何收集TCP类型的Candidate？" class="headerlink" title="5、WebRTC如何收集TCP类型的Candidate？"></a>5、WebRTC如何收集TCP类型的Candidate？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161756965.png" class="" title="image-20220904161756965"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161759866.png" class="" title="image-20220904161759866"><h3 id="6、WebRTC如何将获得Candidate抛给上层的呢？"><a href="#6、WebRTC如何将获得Candidate抛给上层的呢？" class="headerlink" title="6、WebRTC如何将获得Candidate抛给上层的呢？"></a>6、WebRTC如何将获得Candidate抛给上层的呢？</h3><ul><li>首先抛给上层的目的，就是让上层能够进行网络信息的交换</li></ul><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161814632.png" class="" title="image-20220904161814632"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161818174.png" class="" title="image-20220904161818174"><h3 id="7、WebRTC中网络连接的建立？"><a href="#7、WebRTC中网络连接的建立？" class="headerlink" title="7、WebRTC中网络连接的建立？"></a>7、WebRTC中网络连接的建立？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161825822.png" class="" title="image-20220904161825822"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161829914.png" class="" title="image-20220904161829914"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161839223.png" class="" title="image-20220904161839223"><ul><li>有三种方式会创建出connection对象，WebRTC会创建出很多connection对象，但是最终大部分会被裁剪</li></ul><h3 id="8、WebRTC-如何对-Connection-进行排序？"><a href="#8、WebRTC-如何对-Connection-进行排序？" class="headerlink" title="8、WebRTC 如何对 Connection 进行排序？"></a>8、WebRTC 如何对 Connection 进行排序？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161854636.png" class="" title="image-20220904161854636"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161858592.png" class="" title="image-20220904161858592"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161902021.png" class="" title="image-20220904161902021"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161905499.png" class="" title="image-20220904161905499"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161909737.png" class="" title="image-20220904161909737"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161912827.png" class="" title="image-20220904161912827"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161916017.png" class="" title="image-20220904161916017"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161919381.png" class="" title="image-20220904161919381"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161922777.png" class="" title="image-20220904161922777"><h3 id="9、WebRTC-如何选择-Connection-ev"><a href="#9、WebRTC-如何选择-Connection-ev" class="headerlink" title="9、WebRTC 如何选择 Connection_ev ?"></a>9、WebRTC 如何选择 Connection_ev ?</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161929497.png" class="" title="image-20220904161929497"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161932519.png" class="" title="image-20220904161932519"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161935587.png" class="" title="image-20220904161935587"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161939749.png" class="" title="image-20220904161939749"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161943210.png" class="" title="image-20220904161943210"><h3 id="10、WebRTC-如何对connection进行裁剪？"><a href="#10、WebRTC-如何对connection进行裁剪？" class="headerlink" title="10、WebRTC 如何对connection进行裁剪？"></a>10、WebRTC 如何对connection进行裁剪？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161951786.png" class="" title="image-20220904161951786"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161955354.png" class="" title="image-20220904161955354"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904161959599.png" class="" title="image-20220904161959599"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162003720.png" class="" title="image-20220904162003720"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162006712.png" class="" title="image-20220904162006712"><h3 id="10、ICE提名的意义是什么？WebRTC-如何进行-ICE-提名？"><a href="#10、ICE提名的意义是什么？WebRTC-如何进行-ICE-提名？" class="headerlink" title="10、ICE提名的意义是什么？WebRTC 如何进行 ICE 提名？"></a>10、ICE提名的意义是什么？WebRTC 如何进行 ICE 提名？</h3><blockquote><p>由于ICE会收集到很多Candidate，并且可以与对端的Candidate形成许多CandidatePair，如果针对于每个Pair都做检测，会花很长时间，因此有了ICE提名。</p></blockquote><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162019559.png" class="" title="image-20220904162019559"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162022375.png" class="" title="image-20220904162022375"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162025439.png" class="" title="image-20220904162025439"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162029251.png" class="" title="image-20220904162029251"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162032725.png" class="" title="image-20220904162032725"><h3 id="12、ICE-FULL-和-ICE-LITE-有什么作用？有什么区别？"><a href="#12、ICE-FULL-和-ICE-LITE-有什么作用？有什么区别？" class="headerlink" title="12、ICE-FULL 和 ICE-LITE 有什么作用？有什么区别？"></a>12、ICE-FULL 和 ICE-LITE 有什么作用？有什么区别？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162039951.png" class="" title="image-20220904162039951"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162043385.png" class="" title="image-20220904162043385"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162048253.png" class="" title="image-20220904162048253"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162052319.png" class="" title="image-20220904162052319"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162056311.png" class="" title="image-20220904162056311"><h3 id="13、WebRTC如何进行连通性检测？"><a href="#13、WebRTC如何进行连通性检测？" class="headerlink" title="13、WebRTC如何进行连通性检测？"></a>13、WebRTC如何进行连通性检测？</h3><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162107995.png" class="" title="image-20220904162107995"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162111684.png" class="" title="image-20220904162111684"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162115141.png" class="" title="image-20220904162115141"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162118436.png" class="" title="image-20220904162118436"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162122426.png" class="" title="image-20220904162122426"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162126498.png" class="" title="image-20220904162126498"><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162129845.png" class="" title="image-20220904162129845"><h3 id="14、WebRTC中网络传输类的创建与数据传输？"><a href="#14、WebRTC中网络传输类的创建与数据传输？" class="headerlink" title="14、WebRTC中网络传输类的创建与数据传输？"></a>14、WebRTC中网络传输类的创建与数据传输？</h3><blockquote><p>前面学习了：Connection对象的创建、排序、选择、裁剪、连通性检测</p></blockquote><img src="/2022/09/05/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%89/image-20220904162144732.png" class="" title="image-20220904162144732"><blockquote><p>上图可知道两个重要知识点</p><p>①WebRTC底层网络对象是如何一步一步创建出来的，总的入口点是 <code>PeerConnection</code></p><p>②本地采集的数据，是通过哪些对象分发出去的。入口点是 <code>BaseChannel</code>，出口点是 <code>SocketDispatcher</code>。</p><p>③远端传入的数据是，如何传递给WebRTC上层进行播放的。首先会收到一个读事件，然后给到 <code>SocketDispatcher</code>，最后一层层给到上层。</p><p>【这幅图非常非常关键，不理解可以结合视频继续理解】</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-深入理解WebRTC网络传输之二</title>
    <link href="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/"/>
    <url>/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="二、ICE、Candidate"><a href="#二、ICE、Candidate" class="headerlink" title="二、ICE、Candidate"></a>二、ICE、Candidate</h2><h3 id="1、ICE的全称是什么？作用是什么？"><a href="#1、ICE的全称是什么？作用是什么？" class="headerlink" title="1、ICE的全称是什么？作用是什么？"></a>1、ICE的全称是什么？作用是什么？</h3><ul><li><code>Interactive Connectivity Establishment</code></li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160012808.png" class="" title="image-20220904160012808"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160019088.png" class="" title="image-20220904160019088"><ul><li>ICE架构图，三台机器所有的连接方式</li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160029251.png" class="" title="image-20220904160029251"><ul><li>图中包括①内网线路 ②p2p线路 ③TURN线路</li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160039515.png" class="" title="image-20220904160039515"><ul><li>先收集candidate 2、再对candidate进行排序 3、最后进行连通性检测</li></ul><h3 id="2、什么是candidate？"><a href="#2、什么是candidate？" class="headerlink" title="2、什么是candidate？"></a>2、什么是candidate？</h3><ul><li>每一个candate是一个网络地址信息</li><li>它包括：协议、IP、端口 和 类型</li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160159233.png" class="" title="image-20220904160159233"><h3 id="3、对于WebRTC来说，它是如何收集candidate的呢？"><a href="#3、对于WebRTC来说，它是如何收集candidate的呢？" class="headerlink" title="3、对于WebRTC来说，它是如何收集candidate的呢？"></a>3、对于WebRTC来说，它是如何收集candidate的呢？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160222201.png" class="" title="image-20220904160222201"><blockquote><p>什么是网卡？</p><p>为什么有时候一个电脑只有一个网卡</p><p>为什么有时候一个电脑有多个网卡，对应有多个IP地址呢？</p><p>Host类型的地址：从网卡上收集到的就是Host类型的地址</p><p>Sflex类型：就是通过NAT对外部暴露的IP地址</p><p>Relay地址：就是通过NAT无法进行穿越连接的时候，就需要中转服务器地址，这就是Relay地址</p></blockquote><h3 id="4、对于WebRTC来讲，candidate有哪几种类型以及优先级如何呢？"><a href="#4、对于WebRTC来讲，candidate有哪几种类型以及优先级如何呢？" class="headerlink" title="4、对于WebRTC来讲，candidate有哪几种类型以及优先级如何呢？"></a>4、对于WebRTC来讲，candidate有哪几种类型以及优先级如何呢？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160425027.png" class="" title="image-20220904160425027"><ul><li>重点理解什么是 <code>Prflx</code> 对端映射候选者地址</li><li><code>Prflx</code> 对端映射候选者地址：当我们获取另外三种地址后，需要通过信令服务器把这三种地址交给对端；另一端获取到这些candidate信息之后，就可以尝试对我们进行连接；在连接的过程中如果发现两端直接存在NAT，并且对端给我们返回的源地址是一个未知地址，这就说明对端在穿越NAT的过程中，NAT又给它重新分配了一个地址，这就叫做<code>Prflx地址</code></li><li>candidate优先级：Host &gt; Srflx &gt; Prflx &gt; Relay</li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160444009.png" class="" title="image-20220904160444009"><h3 id="4、在了解WebRTC具体如何收集Candidate之前，我们需要认识一个重要的类-PortAllocator"><a href="#4、在了解WebRTC具体如何收集Candidate之前，我们需要认识一个重要的类-PortAllocator" class="headerlink" title="4、在了解WebRTC具体如何收集Candidate之前，我们需要认识一个重要的类 PortAllocator"></a>4、在了解WebRTC具体如何收集Candidate之前，我们需要认识一个重要的类 <code>PortAllocator</code></h3><ul><li>PortAllocator作用：就像它的命名一般，是用于分配端口号的</li></ul><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160508477.png" class="" title="image-20220904160508477"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160512502.png" class="" title="image-20220904160512502"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160515783.png" class="" title="image-20220904160515783"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160518732.png" class="" title="image-20220904160518732"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160521948.png" class="" title="image-20220904160521948"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160525860.png" class="" title="image-20220904160525860"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160529949.png" class="" title="image-20220904160529949"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160533136.png" class="" title="image-20220904160533136"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160536403.png" class="" title="image-20220904160536403"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160540280.png" class="" title="image-20220904160540280"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160543543.png" class="" title="image-20220904160543543"><h3 id="5、认识PortAllocatorSession对象？"><a href="#5、认识PortAllocatorSession对象？" class="headerlink" title="5、认识PortAllocatorSession对象？"></a>5、认识PortAllocatorSession对象？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160551975.png" class="" title="image-20220904160551975"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160555225.png" class="" title="image-20220904160555225"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160559422.png" class="" title="image-20220904160559422"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160603348.png" class="" title="image-20220904160603348"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160607620.png" class="" title="image-20220904160607620"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160610769.png" class="" title="image-20220904160610769"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160614583.png" class="" title="image-20220904160614583"><h3 id="6、认识-AllocationSequence-对象的创建过程？"><a href="#6、认识-AllocationSequence-对象的创建过程？" class="headerlink" title="6、认识 AllocationSequence 对象的创建过程？"></a>6、认识 AllocationSequence 对象的创建过程？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160626339.png" class="" title="image-20220904160626339"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160635083.png" class="" title="image-20220904160635083"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160638993.png" class="" title="image-20220904160638993"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160643002.png" class="" title="image-20220904160643002"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160646322.png" class="" title="image-20220904160646322"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160657401.png" class="" title="image-20220904160657401"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160700937.png" class="" title="image-20220904160700937"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160704028.png" class="" title="image-20220904160704028"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160707352.png" class="" title="image-20220904160707352"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160710680.png" class="" title="image-20220904160710680"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160714858.png" class="" title="image-20220904160714858"><ul><li>AllocationSequence作用：就是用于创建Candidate</li></ul><h3 id="7、WebRTC如何收集-Candidate-？"><a href="#7、WebRTC如何收集-Candidate-？" class="headerlink" title="7、WebRTC如何收集 Candidate ？"></a>7、WebRTC如何收集 <code>Candidate</code> ？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160728180.png" class="" title="image-20220904160728180"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160732083.png" class="" title="image-20220904160732083"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160734948.png" class="" title="image-20220904160734948"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160739031.png" class="" title="image-20220904160739031"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160742940.png" class="" title="image-20220904160742940"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160746554.png" class="" title="image-20220904160746554"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160751563.png" class="" title="image-20220904160751563"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160755088.png" class="" title="image-20220904160755088"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160758357.png" class="" title="image-20220904160758357"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160802530.png" class="" title="image-20220904160802530"><h3 id="8、获取本地Candidate的过程？"><a href="#8、获取本地Candidate的过程？" class="headerlink" title="8、获取本地Candidate的过程？"></a>8、获取本地Candidate的过程？</h3><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160811744.png" class="" title="image-20220904160811744"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160815304.png" class="" title="image-20220904160815304"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160818666.png" class="" title="image-20220904160818666"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160821697.png" class="" title="image-20220904160821697"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160824796.png" class="" title="image-20220904160824796"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160828332.png" class="" title="image-20220904160828332"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160832009.png" class="" title="image-20220904160832009"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160835381.png" class="" title="image-20220904160835381"><img src="/2022/09/04/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%BA%8C/image-20220904160838751.png" class="" title="image-20220904160838751"><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-深入理解WebRTC网络传输之一</title>
    <link href="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/"/>
    <url>/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、初始WebRTC的网络"><a href="#一、初始WebRTC的网络" class="headerlink" title="一、初始WebRTC的网络"></a>一、初始WebRTC的网络</h2><h3 id="1、本章重点协议和重点内容概述？"><a href="#1、本章重点协议和重点内容概述？" class="headerlink" title="1、本章重点协议和重点内容概述？"></a>1、本章重点协议和重点内容概述？</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155238186.png" class="" title="image-20220904155238186"><ul><li><font color="red">RTP协议：</font>对于音视频数据，需要打成RTP包进行传输</li><li><font color="red">DTLS协议：</font>主要是对数据的加密</li></ul><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155357128.png" class="" title="image-20220904155357128"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155404936.png" class="" title="image-20220904155404936"><p>2、WebRTC对网络设备管理的<code>核心类</code>是哪一个？WebRTC如何进行网络设备管理的？</p><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155442679.png" class="" title="image-20220904155442679"><blockquote><p>MdnsResponderProvider：<br>①很久以前WebRTC是交换所有真实的ip地址，那么黑客拿到这些地址就很可能对本机进行攻击。<br>②为了防止这种攻击，WebRTC就提出了 <code>mdns</code> 的技术，尤其在浏览器端。通过 <code>mdns</code> 可以隐藏真实ip地址。</p></blockquote><h3 id="3、-创建-Networks-的过程？"><a href="#3、-创建-Networks-的过程？" class="headerlink" title="3、 创建 Networks 的过程？"></a>3、 创建 Networks 的过程？</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155549433.png" class="" title="image-20220904155549433"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155554128.png" class="" title="image-20220904155554128"><ul><li>MeybeStartGathering：这是一个重要的方法，用于开始收集candidate信息</li></ul><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155608268.png" class="" title="image-20220904155608268"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155612190.png" class="" title="image-20220904155612190"><h3 id="4、Windows下读取网卡信息的重要API"><a href="#4、Windows下读取网卡信息的重要API" class="headerlink" title="4、Windows下读取网卡信息的重要API?"></a>4、Windows下读取网卡信息的重要API?</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155626621.png" class="" title="image-20220904155626621"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155631791.png" class="" title="image-20220904155631791"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155636591.png" class="" title="image-20220904155636591"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155642177.png" class="" title="image-20220904155642177"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155648531.png" class="" title="image-20220904155648531"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155652180.png" class="" title="image-20220904155652180"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155657035.png" class="" title="image-20220904155657035"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155703693.png" class="" title="image-20220904155703693"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155707790.png" class="" title="image-20220904155707790"><h3 id="5、【Windows下】CreateNetworks源码解读？"><a href="#5、【Windows下】CreateNetworks源码解读？" class="headerlink" title="5、【Windows下】CreateNetworks源码解读？"></a>5、【Windows下】CreateNetworks源码解读？</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155717192.png" class="" title="image-20220904155717192"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155721550.png" class="" title="image-20220904155721550"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155725819.png" class="" title="image-20220904155725819"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155730954.png" class="" title="image-20220904155730954"><h3 id="6、获取本地默认IP地址和端口（为什么要获取默认的呢）？"><a href="#6、获取本地默认IP地址和端口（为什么要获取默认的呢）？" class="headerlink" title="6、获取本地默认IP地址和端口（为什么要获取默认的呢）？"></a>6、获取本地默认IP地址和端口（为什么要获取默认的呢）？</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155747295.png" class="" title="image-20220904155747295"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155755011.png" class="" title="image-20220904155755011"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155758944.png" class="" title="image-20220904155758944"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155803035.png" class="" title="image-20220904155803035"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155807215.png" class="" title="image-20220904155807215"><blockquote><p>老的sockaddr 结构体只有16字节，新的有128字节。我们目前WebRTC体系中都要进行转换，【新】转【老】为什么不会造成数据越界读取呢？</p></blockquote><h3 id="7、【源码分析】获得本地ip地址和端口？"><a href="#7、【源码分析】获得本地ip地址和端口？" class="headerlink" title="7、【源码分析】获得本地ip地址和端口？"></a>7、【源码分析】获得本地ip地址和端口？</h3><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155830726.png" class="" title="image-20220904155830726"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155834877.png" class="" title="image-20220904155834877"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155838371.png" class="" title="image-20220904155838371"><img src="/2022/09/03/WebRTC%E6%BA%90%E7%A0%81/day11-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%B9%8B%E4%B8%80/image-20220904155842622.png" class="" title="image-20220904155842622"><ul><li>如何获取默认IP地址：其实就是和谷歌的8.8.8.8地址进行连接，看下端口和ip地址是多少</li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09-音频引擎</title>
    <link href="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/"/>
    <url>/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="1、章节概述，知道学完本章能知道些什么？"><a href="#1、章节概述，知道学完本章能知道些什么？" class="headerlink" title="1、章节概述，知道学完本章能知道些什么？"></a>1、章节概述，知道学完本章能知道些什么？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073222523.png" class="" title="image-20220920073222523"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073227377.png" class="" title="image-20220920073227377"><h3 id="2、音频引擎类关系图？"><a href="#2、音频引擎类关系图？" class="headerlink" title="2、音频引擎类关系图？"></a>2、音频引擎类关系图？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073243176.png" class="" title="image-20220920073243176"><ul><li><code>adm</code>：AudioDeviceModule，通过它我们可以从设备中读取数据，还可以将数据写入到扬声器中。</li><li><code>encoder_factory</code>：我们最终的编码器就是通过它创建出来的。</li><li><code>decoder_factory</code>：我们最终的解码器就是通过它创建出来的。</li><li><code>audio_mixer</code>：混音器，是将多路流混成一路流，最终通过扬声器播放出来。</li><li><code>apm</code>：处理三A问题，自动增益、降噪、回音消除。</li><li><code>audio_state</code>：字面意思是音频状态的管理，实际上是对音频流的管理。</li><li><code>send_codecs</code>：是一个列表，它里面包含了WebRTC所支持的所有编码器。列表中的每一项就是一个编码器，比如Opus</li><li><code>revc_codecs</code>：是一个列表，它里面包含了WebRTC所支持的所有解码器。列表中的每一项就是一个解码器。</li><li><code>channels</code>：也是一个列表，包含了WebRTC所有使用的通道，其中每一项是一个WebRtcVoiceMediaChannel，表示在SDP中的每一个m行都是一个channel，有音频channel、视频channel、数据channel。</li><li><code>WebRtcVoiceEngine</code>是一个全局的，所以不管有多少个peerid，最终形成了多少路流，每一个流都会是一个channel，它会将所有的流都汇总到channels中</li><li>【这数据架构上的东西，一定要熟记于心】</li></ul><h3 id="3、音频引擎数据流转图？"><a href="#3、音频引擎数据流转图？" class="headerlink" title="3、音频引擎数据流转图？"></a>3、音频引擎数据流转图？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073402094.png" class="" title="image-20220920073402094"><ul><li>WebRTC分三层：Session层、引擎层、设备层。其中引擎层是最为关键的一层。</li><li>【这幅流程图，对应 9-2有详细讲解，要能自己完全说出来整个流程】</li><li>对于AudioEngine和VideoEngine来讲是全局唯一的</li></ul><h3 id="4、创建音频引擎的过程？"><a href="#4、创建音频引擎的过程？" class="headerlink" title="4、创建音频引擎的过程？"></a>4、创建音频引擎的过程？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073423595.png" class="" title="image-20220920073423595"><ul><li><p>入口函数：initializePeerConnection</p></li><li><p>MediaEngineDepenDecies：是一个参数合集，将参数打包到一起，传递方便，扩展性好。</p></li><li><p>【这个图也要能自说自话，在9-3章节】</p></li><li><p>然后根据上面的流程图，去走一遍代码流程。</p></li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073440075.png" class="" title="image-20220920073440075"><h3 id="5、音频引擎初始化的过程？"><a href="#5、音频引擎初始化的过程？" class="headerlink" title="5、音频引擎初始化的过程？"></a>5、音频引擎初始化的过程？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073448676.png" class="" title="image-20220920073448676"><ul><li>对上述流程进行代码走读</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073501239.png" class="" title="image-20220920073501239"><ul><li>重点是【WebRTC是如何收集音频解码器的】</li></ul><h3 id="6、AduioState对象的作用是什么？创建过程是怎么样的？"><a href="#6、AduioState对象的作用是什么？创建过程是怎么样的？" class="headerlink" title="6、AduioState对象的作用是什么？创建过程是怎么样的？"></a>6、AduioState对象的作用是什么？创建过程是怎么样的？</h3><ul><li><p>AudioState作用：从名字上看是控制音频状态的，实际上是用来控制音频流的。</p></li><li><p>里面主要有两个模块ADM、AudioTransport</p></li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073523888.png" class="" title="image-20220920073523888"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073526911.png" class="" title="image-20220920073526911"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073529982.png" class="" title="image-20220920073529982"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073533262.png" class="" title="image-20220920073533262"><ul><li>【自己源码分析，AudioState的创建过程】</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073543705.png" class="" title="image-20220920073543705"><h3 id="7、WebRTC如何获取采集到的音频数据？"><a href="#7、WebRTC如何获取采集到的音频数据？" class="headerlink" title="7、WebRTC如何获取采集到的音频数据？"></a>7、WebRTC如何获取采集到的音频数据？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073550764.png" class="" title="image-20220920073550764"><ul><li>无论是给扬声器的播放的声音，还是从麦克风采集到的声音，都有会经过AudioDeviceBuffer这个过程。</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073559878.png" class="" title="image-20220920073559878"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073602713.png" class="" title="image-20220920073602713"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073605521.png" class="" title="image-20220920073605521"><ul><li>【源码分析】获取采集到的数据</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073613059.png" class="" title="image-20220920073613059"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073616593.png" class="" title="image-20220920073616593"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073620207.png" class="" title="image-20220920073620207"><blockquote><p>总结：①创建AudioDeviceBuffer ②会将AudioTransport注册到AudioDeviceBuffer中 ③当通过系统的音频采集线程采集到音频后，会交由AudioDeviceBuffer处理，会通过回调对象将数据回调给音频引擎层；</p></blockquote><h3 id="8、Channel、Stream与编码器之间的关系？"><a href="#8、Channel、Stream与编码器之间的关系？" class="headerlink" title="8、Channel、Stream与编码器之间的关系？"></a>8、Channel、Stream与编码器之间的关系？</h3><ul><li>在Session层(也就是api层)，一个stream里面可以有多少track。</li><li>一个Session层的track，对应引擎层中的channel，不同于在引擎层中会把音频、视频的cahnnel分开来存储。</li><li>在引擎层中的channel又可以包括很多个stream(这里的stream和session层中的stream不是同一个概念)，既有发送的stream又有接收的stream。</li><li>所以说引擎层中的channel是双向的，既有流入的stram也有发出的stream。</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073651732.png" class="" title="image-20220920073651732"><ul><li>在call层，又包含了channelSend，它的作用是用于连接音频编码器的。</li><li>在call层，又包含了channelReceive，它的作用是用于连接音频解码器的。</li><li>引擎层的stream和Call层的stream是一一对应的。</li></ul><h3 id="9、ChannelSend与音频编码器是如何连接的？"><a href="#9、ChannelSend与音频编码器是如何连接的？" class="headerlink" title="9、ChannelSend与音频编码器是如何连接的？"></a>9、ChannelSend与音频编码器是如何连接的？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073707642.png" class="" title="image-20220920073707642"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073711036.png" class="" title="image-20220920073711036"><ul><li><p>ChannelReceive 与 音频解码器的关系？</p></li><li><p>【这两张图核心轨迹关系图，需要掌握】</p></li></ul><h3 id="10、WebRTC创建音频编码器？"><a href="#10、WebRTC创建音频编码器？" class="headerlink" title="10、WebRTC创建音频编码器？"></a>10、WebRTC创建音频编码器？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073736466.png" class="" title="image-20220920073736466"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073739456.png" class="" title="image-20220920073739456"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073742368.png" class="" title="image-20220920073742368"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073745931.png" class="" title="image-20220920073745931"><ul><li>【借助上面流程图，对源码进行阅读理解】</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073758383.png" class="" title="image-20220920073758383"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073810109.png" class="" title="image-20220920073810109"><ul><li>找到第一个最合适的codec就返回，所以我们需要把优先选择的解码器名字，放在前面。</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073818218.png" class="" title="image-20220920073818218"><h3 id="11、WebRTC是如何创建Opus编码器的？"><a href="#11、WebRTC是如何创建Opus编码器的？" class="headerlink" title="11、WebRTC是如何创建Opus编码器的？"></a>11、WebRTC是如何创建Opus编码器的？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073825731.png" class="" title="image-20220920073825731"><ul><li>webrtc_opus：当我们使用单通道或者双通道进行通信时，选择webrtc_opus。（这也是最常见的选择）</li><li>webrtc_multiopus：超过两个通道的编码器，就选择这个了。</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073835571.png" class="" title="image-20220920073835571"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073838852.png" class="" title="image-20220920073838852"><ul><li>【根据上面的逻辑，进行源码解读】</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073847451.png" class="" title="image-20220920073847451"><ul><li>【如果追踪不到，可以结合9-9进行结合理解】</li></ul><h3 id="12、WebRTC的音频是如何编码的？"><a href="#12、WebRTC的音频是如何编码的？" class="headerlink" title="12、WebRTC的音频是如何编码的？"></a>12、WebRTC的音频是如何编码的？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073900297.png" class="" title="image-20220920073900297"><ul><li>根据上面的流程图，【源码分析】结合9-10理解音频编码的过程。</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073909672.png" class="" title="image-20220920073909672"><h3 id="13、音频解码器的创建过程？"><a href="#13、音频解码器的创建过程？" class="headerlink" title="13、音频解码器的创建过程？"></a>13、音频解码器的创建过程？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073916608.png" class="" title="image-20220920073916608"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073919844.png" class="" title="image-20220920073919844"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073923221.png" class="" title="image-20220920073923221"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073926264.png" class="" title="image-20220920073926264"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073929581.png" class="" title="image-20220920073929581"><ul><li>NetEq与Decoder之间的关系</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073936703.png" class="" title="image-20220920073936703"><ul><li>【源码分析】根据上面介绍的知识，对源码进行跟踪，具体可以结合 9-11 进行理解</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073945982.png" class="" title="image-20220920073945982"><h3 id="14、WebRTC音频解码的过程？"><a href="#14、WebRTC音频解码的过程？" class="headerlink" title="14、WebRTC音频解码的过程？"></a>14、WebRTC音频解码的过程？</h3><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073952558.png" class="" title="image-20220920073952558"><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920073956061.png" class="" title="image-20220920073956061"><ul><li>主要看右边的过程</li><li>根据上面的图，进行【源码分析】</li></ul><img src="/2022/08/28/WebRTC%E6%BA%90%E7%A0%81/day09-%E9%9F%B3%E9%A2%91%E5%BC%95%E6%93%8E/image-20220920074014812.png" class="" title="image-20220920074014812">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-视频数据采集</title>
    <link href="/2022/08/19/WebRTC%E6%BA%90%E7%A0%81/day08-%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    <url>/2022/08/19/WebRTC%E6%BA%90%E7%A0%81/day08-%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-音频数据采集</title>
    <link href="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    <url>/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频设备的初始化"><a href="#一、音频设备的初始化" class="headerlink" title="一、音频设备的初始化"></a>一、音频设备的初始化</h2><h3 id="1、ADM的全称是什么？"><a href="#1、ADM的全称是什么？" class="headerlink" title="1、ADM的全称是什么？"></a>1、ADM的全称是什么？</h3><ul><li>Audio Device Module，音频设备模块</li><li>掌握以下是 Audio Device Module 的类关系图</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074429949.png" class="" title="image-20220826074429949"><h3 id="2、创建ADM的时机"><a href="#2、创建ADM的时机" class="headerlink" title="2、创建ADM的时机"></a>2、创建ADM的时机</h3><ul><li>总结一句话：就是我们在创建 <code>PeerConnectionFactory</code> 的时候，就会创建 ADM 对象</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074520651.png" class="" title="image-20220826074520651"><h3 id="3、创建ADM的核心过程"><a href="#3、创建ADM的核心过程" class="headerlink" title="3、创建ADM的核心过程"></a>3、创建ADM的核心过程</h3><ul><li>注意点：会看到两次创建 <code>MMDevice COM 组件</code> 的过程，第一次是为了检测平台是否支持，是否能用。第二次才是真正的创建</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074551719.png" class="" title="image-20220826074551719"><h3 id="4、认识Windows下的-Core-Audio"><a href="#4、认识Windows下的-Core-Audio" class="headerlink" title="4、认识Windows下的 Core Audio"></a>4、认识Windows下的 <code>Core Audio</code></h3><ul><li><p>Windows下的 <code>Core Audio</code>是比较底层的API，WebRTC就需要这种比较底层的API，可以尽量达到低延迟的效果。</p><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074613195.png" class="" title="image-20220826074613195"></li></ul><h3 id="5、了解-音频设备的种类【主要两种】"><a href="#5、了解-音频设备的种类【主要两种】" class="headerlink" title="5、了解 音频设备的种类【主要两种】"></a>5、了解 音频设备的种类【主要两种】</h3><ul><li>一定要分清楚 <code>音频适配器设备</code> vs <code>音频终端设备</code></li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074632646.png" class="" title="image-20220826074632646"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074637383.png" class="" title="image-20220826074637383"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074641370.png" class="" title="image-20220826074641370"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074645366.png" class="" title="image-20220826074645366"><h3 id="6、Core-Audio-API的种类【了解即可】"><a href="#6、Core-Audio-API的种类【了解即可】" class="headerlink" title="6、Core Audio API的种类【了解即可】"></a>6、Core Audio API的种类【了解即可】</h3><ul><li>有独享声音和主音量，这两个概念</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074705344.png" class="" title="image-20220826074705344"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074714160.png" class="" title="image-20220826074714160"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074717878.png" class="" title="image-20220826074717878"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074721348.png" class="" title="image-20220826074721348"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074726857.png" class="" title="image-20220826074726857"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074730319.png" class="" title="image-20220826074730319"><h3 id="7、初始化ADM的流程图，后续看代码帮助理解的关键图"><a href="#7、初始化ADM的流程图，后续看代码帮助理解的关键图" class="headerlink" title="7、初始化ADM的流程图，后续看代码帮助理解的关键图"></a>7、初始化ADM的流程图，后续看代码帮助理解的关键图</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074739289.png" class="" title="image-20220826074739289"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074744624.png" class="" title="image-20220826074744624"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074749260.png" class="" title="image-20220826074749260"><h3 id="8、初始化扬声器"><a href="#8、初始化扬声器" class="headerlink" title="8、初始化扬声器"></a>8、初始化扬声器</h3><ul><li>重点理解：speaker 一般指的就是<code>扬声器</code></li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074756799.png" class="" title="image-20220826074756799"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074800186.png" class="" title="image-20220826074800186"><h3 id="9、WebRTC设置channel个数"><a href="#9、WebRTC设置channel个数" class="headerlink" title="9、WebRTC设置channel个数"></a>9、WebRTC设置channel个数</h3><ul><li>数据要给扬声器，首先要把数据缓存在一个<code>buffer</code>中，然后扬声器再从<code>buffer</code>中读取数据，播放出来</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074821704.png" class="" title="image-20220826074821704"><h3 id="10、-ADM初始化之InitMicrophone"><a href="#10、-ADM初始化之InitMicrophone" class="headerlink" title="10、 ADM初始化之InitMicrophone"></a>10、 ADM初始化之InitMicrophone</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074837399.png" class="" title="image-20220826074837399"><h2 id="二、接下来就是借助上面已经初始化好的设备，进行播放和采集了"><a href="#二、接下来就是借助上面已经初始化好的设备，进行播放和采集了" class="headerlink" title="二、接下来就是借助上面已经初始化好的设备，进行播放和采集了"></a>二、接下来就是借助上面已经初始化好的设备，进行播放和采集了</h2><h3 id="1、理解AudioState"><a href="#1、理解AudioState" class="headerlink" title="1、理解AudioState"></a>1、理解AudioState</h3><ul><li>总结：AudioState是连接上层页面以及底层音频设备的中间层</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074901348.png" class="" title="image-20220826074901348"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074906484.png" class="" title="image-20220826074906484"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074910136.png" class="" title="image-20220826074910136"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074915523.png" class="" title="image-20220826074915523"><h3 id="2、上面是WebRTC多人同时通信的两种架构-Mesh架构-和-SFU架构"><a href="#2、上面是WebRTC多人同时通信的两种架构-Mesh架构-和-SFU架构" class="headerlink" title="2、上面是WebRTC多人同时通信的两种架构 Mesh架构 和 SFU架构"></a>2、上面是WebRTC多人同时通信的两种架构 Mesh架构 和 SFU架构</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074931890.png" class="" title="image-20220826074931890"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074935103.png" class="" title="image-20220826074935103"><h3 id="3、Engine、PC、Channel、stream-对象之间的关系？"><a href="#3、Engine、PC、Channel、stream-对象之间的关系？" class="headerlink" title="3、Engine、PC、Channel、stream 对象之间的关系？"></a>3、Engine、PC、Channel、stream 对象之间的关系？</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074954007.png" class="" title="image-20220826074954007"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826074956972.png" class="" title="image-20220826074956972"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075000012.png" class="" title="image-20220826075000012"><h3 id="4、WebRTC是如何播放声音的？"><a href="#4、WebRTC是如何播放声音的？" class="headerlink" title="4、WebRTC是如何播放声音的？"></a>4、WebRTC是如何播放声音的？</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075007094.png" class="" title="image-20220826075007094"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075010541.png" class="" title="image-20220826075010541"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075013598.png" class="" title="image-20220826075013598"><ul><li>总结：<ul><li>①创建ADM对象以及初始化是在PeerconnectionFactory的initialize中进行的</li><li>②而声音播放的逻辑实在媒体协商之后，调用setRemoteDescription的时候，再其内部执行的</li></ul></li></ul><h3 id="5、InitPlay-的基础知识"><a href="#5、InitPlay-的基础知识" class="headerlink" title="5、InitPlay 的基础知识"></a>5、InitPlay 的基础知识</h3><ul><li>IsInitialized 这个名字不错，学会来</li></ul><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075041245.png" class="" title="image-20220826075041245"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075050830.png" class="" title="image-20220826075050830"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075054423.png" class="" title="image-20220826075054423"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075057120.png" class="" title="image-20220826075057120"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075101323.png" class="" title="image-20220826075101323"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075106206.png" class="" title="image-20220826075106206"><h3 id="6、播放声音的基础API"><a href="#6、播放声音的基础API" class="headerlink" title="6、播放声音的基础API"></a>6、播放声音的基础API</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075114697.png" class="" title="image-20220826075114697"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075118267.png" class="" title="image-20220826075118267"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075121263.png" class="" title="image-20220826075121263"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075129237.png" class="" title="image-20220826075129237"><h3 id="7、播放声音的流程？"><a href="#7、播放声音的流程？" class="headerlink" title="7、播放声音的流程？"></a>7、播放声音的流程？</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075136708.png" class="" title="image-20220826075136708"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075140431.png" class="" title="image-20220826075140431"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075144069.png" class="" title="image-20220826075144069"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075147767.png" class="" title="image-20220826075147767"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075151540.png" class="" title="image-20220826075151540"><h3 id="8、再次认识音频DMO组件"><a href="#8、再次认识音频DMO组件" class="headerlink" title="8、再次认识音频DMO组件"></a>8、再次认识音频DMO组件</h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075158308.png" class="" title="image-20220826075158308"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075201116.png" class="" title="image-20220826075201116"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075203610.png" class="" title="image-20220826075203610"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075221576.png" class="" title="image-20220826075221576"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075236773.png" class="" title="image-20220826075236773"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075244600.png" class="" title="image-20220826075244600"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075248821.png" class="" title="image-20220826075248821"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075252316.png" class="" title="image-20220826075252316"><h3 id="9、认识-InitRecording"><a href="#9、认识-InitRecording" class="headerlink" title="9、认识 InitRecording"></a>9、认识 <code>InitRecording</code></h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075300312.png" class="" title="image-20220826075300312"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075303047.png" class="" title="image-20220826075303047"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075306033.png" class="" title="image-20220826075306033"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075308904.png" class="" title="image-20220826075308904"><h3 id="10、认识-StartRecording"><a href="#10、认识-StartRecording" class="headerlink" title="10、认识 StartRecording"></a>10、认识 <code>StartRecording</code></h3><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075315971.png" class="" title="image-20220826075315971"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075321474.png" class="" title="image-20220826075321474"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075324285.png" class="" title="image-20220826075324285"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075327265.png" class="" title="image-20220826075327265"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075333720.png" class="" title="image-20220826075333720"><img src="/2022/08/18/WebRTC%E6%BA%90%E7%A0%81/day07-%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/image-20220826075340420.png" class="" title="image-20220826075340420">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day05-深入理解WebRTC的线程模型</title>
    <link href="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、线程的基础知识"><a href="#一、线程的基础知识" class="headerlink" title="一、线程的基础知识"></a>一、线程的基础知识</h2><h3 id="1、本章主要内容"><a href="#1、本章主要内容" class="headerlink" title="1、本章主要内容"></a>1、本章主要内容</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815071212363.png" class="" title="image-20220815071212363"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815071220431.png" class="" title="image-20220815071220431"><h3 id="2、计算机组成原理"><a href="#2、计算机组成原理" class="headerlink" title="2、计算机组成原理"></a>2、计算机组成原理</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073252208.png" class="" title="image-20220815073252208"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073337468.png" class="" title="image-20220815073337468"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073343926.png" class="" title="image-20220815073343926"><h3 id="3、多线程的好处与坏处？多线程带了哪些问题？"><a href="#3、多线程的好处与坏处？多线程带了哪些问题？" class="headerlink" title="3、多线程的好处与坏处？多线程带了哪些问题？"></a>3、多线程的好处与坏处？多线程带了哪些问题？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073405375.png" class="" title="image-20220815073405375"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073441593.png" class="" title="image-20220815073441593"><h3 id="4、如何解决多线程带来的问题？"><a href="#4、如何解决多线程带来的问题？" class="headerlink" title="4、如何解决多线程带来的问题？"></a>4、如何解决多线程带来的问题？</h3><ul><li>加锁</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073513306.png" class="" title="image-20220815073513306"><h3 id="5、Objective-C和WebRTC中的线程模型是什么？"><a href="#5、Objective-C和WebRTC中的线程模型是什么？" class="headerlink" title="5、Objective-C和WebRTC中的线程模型是什么？"></a>5、Objective-C和WebRTC中的线程模型是什么？</h3><ul><li>休眠唤醒循环执行任务线程模型</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073648293.png" class="" title="image-20220815073648293"><h2 id="二、WebRTC中的线程模型"><a href="#二、WebRTC中的线程模型" class="headerlink" title="二、WebRTC中的线程模型"></a>二、WebRTC中的线程模型</h2><h3 id="1、认识Thread类？"><a href="#1、认识Thread类？" class="headerlink" title="1、认识Thread类？"></a>1、认识Thread类？</h3><ul><li>crit_：是临界区，是防止存取或读取数据时发生<font color="red">错乱</font></li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073744344.png" class="" title="image-20220815073744344"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815073752486.png" class="" title="image-20220815073752486"><h3 id="2、关于-Thread的几个要点？"><a href="#2、关于-Thread的几个要点？" class="headerlink" title="2、关于 Thread的几个要点？"></a>2、关于 Thread的几个要点？</h3><ul><li>WebRTC中的线程是<font color="red">以事件驱动的</font></li><li><font color="red">事件驱动</font>比<font color="red">轮询</font>的方式，效率高很多</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074100020.png" class="" title="image-20220815074100020"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074110825.png" class="" title="image-20220815074110825"><h3 id="3、WebRTC中-Thead-类到底长什么样？"><a href="#3、WebRTC中-Thead-类到底长什么样？" class="headerlink" title="3、WebRTC中 Thead 类到底长什么样？"></a>3、WebRTC中 Thead 类到底长什么样？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074218528.png" class="" title="image-20220815074218528"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074227838.png" class="" title="image-20220815074227838"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074237035.png" class="" title="image-20220815074237035"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074243689.png" class="" title="image-20220815074243689"><blockquote><p>Thread类是非常庞杂的，总结起来Thread类就包含三大部分，理解这个<font color="red">非常重要</font>，不然就会面对Thread一脸懵逼</p></blockquote><ul><li>一大类是与队列相关的</li><li>一大类是与事件相关的</li><li>一大类是与线程相关的</li></ul><h3 id="4、认识线程管理类，ThreadManager类【重要】"><a href="#4、认识线程管理类，ThreadManager类【重要】" class="headerlink" title="4、认识线程管理类，ThreadManager类【重要】"></a>4、认识线程管理类，ThreadManager类【重要】</h3><ul><li>以下的图，对理解ThreadManager起到了至关重要的作用</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074533549.png" class="" title="image-20220815074533549"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074543208.png" class="" title="image-20220815074543208"><h3 id="5、认识thread-local-storage"><a href="#5、认识thread-local-storage" class="headerlink" title="5、认识thread local storage"></a>5、认识thread local storage</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074627969.png" class="" title="image-20220815074627969"><h3 id="6、源码阅读，理解ThreadManager-和-thread-local-storage"><a href="#6、源码阅读，理解ThreadManager-和-thread-local-storage" class="headerlink" title="6、源码阅读，理解ThreadManager 和 thread local storage"></a>6、源码阅读，理解ThreadManager 和 thread local storage</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074643232.png" class="" title="image-20220815074643232"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074649491.png" class="" title="image-20220815074649491"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074701954.png" class="" title="image-20220815074701954"><h3 id="7、WebRTC的所有线程都是由三大线程创建的，那么WebRTC的三大线程分别是哪些呢？"><a href="#7、WebRTC的所有线程都是由三大线程创建的，那么WebRTC的三大线程分别是哪些呢？" class="headerlink" title="7、WebRTC的所有线程都是由三大线程创建的，那么WebRTC的三大线程分别是哪些呢？"></a>7、WebRTC的所有线程都是由三大线程创建的，那么WebRTC的三大线程分别是哪些呢？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074734300.png" class="" title="image-20220815074734300"><h3 id="8、从代码中查看并熟悉这三个线程？"><a href="#8、从代码中查看并熟悉这三个线程？" class="headerlink" title="8、从代码中查看并熟悉这三个线程？"></a>8、从代码中查看并熟悉这三个线程？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074745533.png" class="" title="image-20220815074745533"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074757999.png" class="" title="image-20220815074757999"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074809579.png" class="" title="image-20220815074809579"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074818282.png" class="" title="image-20220815074818282"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074827167.png" class="" title="image-20220815074827167"><ul><li>从上图可知，WebRTC把当前线程当成了信令线程</li><li>跟进去看看</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074850334.png" class="" title="image-20220815074850334"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074858564.png" class="" title="image-20220815074858564"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074905954.png" class="" title="image-20220815074905954"><h2 id="三、WebRTC中的线程：线程运行、接口宏"><a href="#三、WebRTC中的线程：线程运行、接口宏" class="headerlink" title="三、WebRTC中的线程：线程运行、接口宏"></a>三、WebRTC中的线程：线程运行、接口宏</h2><h3 id="1、WebRTC是跨平台的，那么它在Windows和mac上创建线程的实现方式有什么不同呢？"><a href="#1、WebRTC是跨平台的，那么它在Windows和mac上创建线程的实现方式有什么不同呢？" class="headerlink" title="1、WebRTC是跨平台的，那么它在Windows和mac上创建线程的实现方式有什么不同呢？"></a>1、WebRTC是跨平台的，那么它在Windows和mac上创建线程的实现方式有什么不同呢？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074943317.png" class="" title="image-20220815074943317"><ul><li>以上是win平台的线程创建的代码</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815074956662.png" class="" title="image-20220815074956662"><ul><li>以上是mac平台下创建线程的代码</li></ul><h3 id="2、三大线程运行的基本逻辑【重要】"><a href="#2、三大线程运行的基本逻辑【重要】" class="headerlink" title="2、三大线程运行的基本逻辑【重要】"></a>2、三大线程运行的基本逻辑【重要】</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075021348.png" class="" title="image-20220815075021348"><h3 id="3、从实际代码的角度，理解上面两点知识点"><a href="#3、从实际代码的角度，理解上面两点知识点" class="headerlink" title="3、从实际代码的角度，理解上面两点知识点"></a>3、从实际代码的角度，理解上面两点知识点</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075040204.png" class="" title="image-20220815075040204"><ul><li>我们创建的线程对象，什么时候与我们的线程进行绑定的呢？</li><li>就是下面这个时机（也就是ThreadManager和Thread绑定时机）</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075114194.png" class="" title="image-20220815075114194"><ul><li>一定是在这个线程已经启动，执行线程函数的时候才进行绑定的</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075150133.png" class="" title="image-20220815075150133"><ul><li>以上我们看到了经典的while(true)循环，也就是线程的执行逻辑</li></ul><h3 id="4、不同平台处理事件的API？"><a href="#4、不同平台处理事件的API？" class="headerlink" title="4、不同平台处理事件的API？"></a>4、不同平台处理事件的API？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075205347.png" class="" title="image-20220815075205347"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075216615.png" class="" title="image-20220815075216615"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075224169.png" class="" title="image-20220815075224169"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075232378.png" class="" title="image-20220815075232378"><h3 id="5、对上面的知识进行小结，小结的内容要掌握一下。"><a href="#5、对上面的知识进行小结，小结的内容要掌握一下。" class="headerlink" title="5、对上面的知识进行小结，小结的内容要掌握一下。"></a>5、对上面的知识进行小结，小结的内容要掌握一下。</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220815075258232.png" class="" title="image-20220815075258232"><h2 id="三、WebRTC线程事件处理"><a href="#三、WebRTC线程事件处理" class="headerlink" title="三、WebRTC线程事件处理"></a>三、WebRTC线程事件处理</h2><h3 id="1、事件是如何协调线程工作的呢？"><a href="#1、事件是如何协调线程工作的呢？" class="headerlink" title="1、事件是如何协调线程工作的呢？"></a>1、事件是如何协调线程工作的呢？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063424033.png" class="" title="image-20220816063424033"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063433125.png" class="" title="image-20220816063433125"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063441254.png" class="" title="image-20220816063441254"><h3 id="2、认识Get函数"><a href="#2、认识Get函数" class="headerlink" title="2、认识Get函数"></a>2、认识Get函数</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063503528.png" class="" title="image-20220816063503528"><h3 id="3、认识Get函数中的wait函数？"><a href="#3、认识Get函数中的wait函数？" class="headerlink" title="3、认识Get函数中的wait函数？"></a>3、认识Get函数中的wait函数？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063536578.png" class="" title="image-20220816063536578"><h2 id="四、接口宏"><a href="#四、接口宏" class="headerlink" title="四、接口宏"></a>四、接口宏</h2><h3 id="1、WebRTC中常见的接口，都是借助接口宏实现的"><a href="#1、WebRTC中常见的接口，都是借助接口宏实现的" class="headerlink" title="1、WebRTC中常见的接口，都是借助接口宏实现的"></a>1、WebRTC中常见的接口，都是借助接口宏实现的</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063633745.png" class="" title="image-20220816063633745"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063648849.png" class="" title="image-20220816063648849"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063700441.png" class="" title="image-20220816063700441"><h3 id="2、实现自定义接口"><a href="#2、实现自定义接口" class="headerlink" title="2、实现自定义接口"></a>2、实现自定义接口</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063725960.png" class="" title="image-20220816063725960"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063734349.png" class="" title="image-20220816063734349"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063746584.png" class="" title="image-20220816063746584"><h3 id="3、思考为什么WebRTC要把接口设计得这么复杂？"><a href="#3、思考为什么WebRTC要把接口设计得这么复杂？" class="headerlink" title="3、思考为什么WebRTC要把接口设计得这么复杂？"></a>3、思考为什么WebRTC要把接口设计得这么复杂？</h3><ul><li>代理层将【应用层】和【WebRTC核心库】做了一层隔离</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063826434.png" class="" title="image-20220816063826434"><h3 id="4、思考WebRTC这样隔离有什么好处呢？"><a href="#4、思考WebRTC这样隔离有什么好处呢？" class="headerlink" title="4、思考WebRTC这样隔离有什么好处呢？"></a>4、思考WebRTC这样隔离有什么好处呢？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063908231.png" class="" title="image-20220816063908231"><h3 id="5、接口类关系图，这些图要学会来画"><a href="#5、接口类关系图，这些图要学会来画" class="headerlink" title="5、接口类关系图，这些图要学会来画"></a>5、接口类关系图，这些图要学会来画</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063931784.png" class="" title="image-20220816063931784"><h3 id="6、观察PeerConnectionFactory这个宏展开的样子，从而理解接口宏"><a href="#6、观察PeerConnectionFactory这个宏展开的样子，从而理解接口宏" class="headerlink" title="6、观察PeerConnectionFactory这个宏展开的样子，从而理解接口宏"></a>6、观察PeerConnectionFactory这个宏展开的样子，从而理解接口宏</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816063954882.png" class="" title="image-20220816063954882"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064005700.png" class="" title="image-20220816064005700"><h3 id="7、WebRTC接口调用过程？"><a href="#7、WebRTC接口调用过程？" class="headerlink" title="7、WebRTC接口调用过程？"></a>7、WebRTC接口调用过程？</h3><ul><li>为什么能搞出这么厉害的图</li><li>太强了，一定要学会来</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064025336.png" class="" title="image-20220816064025336"><h3 id="8、结合实际代码进行分析和链路跟踪"><a href="#8、结合实际代码进行分析和链路跟踪" class="headerlink" title="8、结合实际代码进行分析和链路跟踪"></a>8、结合实际代码进行分析和链路跟踪</h3><ul><li>首先找到两个重要的宏</li><li>BEGIN_GINALING_PROXY_MAP</li><li>BEGIN_PROXY_MAP</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064120677.png" class="" title="image-20220816064120677"><ul><li>再看RPOXY_MAP_BOILERPLATE这个宏</li><li>定义了宏的名字，还有别名</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064151719.png" class="" title="image-20220816064151719"><ul><li>再看WORKER_PROXY_MAP_BOILERPLATE 这个宏</li><li>主要是处理构造函数</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064210666.png" class="" title="image-20220816064210666"><ul><li>再看第三个子宏，REFCOUNTED_PROXY_MAP_BOILERPLATE</li><li>这个宏用于析构函数的定义</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064224778.png" class="" title="image-20220816064224778"><ul><li>END_ROXY_MAP，只定义了一个类花括号的结束，这个很好理解</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064236941.png" class="" title="image-20220816064236941"><ul><li>PROXY_METHOD0 ，最后一个数字代表参数格式，这个宏主要用于定义方法</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064247355.png" class="" title="image-20220816064247355"><h3 id="9、思考：我们从应用层调用到WebRTC的核心层，需要经过这么漫长的过程，大概11步，会不会影响WebRTC的调用效率呢？"><a href="#9、思考：我们从应用层调用到WebRTC的核心层，需要经过这么漫长的过程，大概11步，会不会影响WebRTC的调用效率呢？" class="headerlink" title="9、思考：我们从应用层调用到WebRTC的核心层，需要经过这么漫长的过程，大概11步，会不会影响WebRTC的调用效率呢？"></a>9、思考：我们从应用层调用到WebRTC的核心层，需要经过这么漫长的过程，大概11步，会不会影响WebRTC的调用效率呢？</h3><ul><li>其实不会，因为经过WebRTC的优化，实际上只要经过两三个步骤，就调用到了WebRTC的核心层</li></ul><h3 id="10、在宏定义的学习过程中，我们看到post方法，该方法主要作用是什么呢？"><a href="#10、在宏定义的学习过程中，我们看到post方法，该方法主要作用是什么呢？" class="headerlink" title="10、在宏定义的学习过程中，我们看到post方法，该方法主要作用是什么呢？"></a>10、在宏定义的学习过程中，我们看到post方法，该方法主要作用是什么呢？</h3><ul><li>post方法：进行线程的切换</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064320874.png" class="" title="image-20220816064320874"><h3 id="11、在WebRTC中线程切换主要有哪些方法？"><a href="#11、在WebRTC中线程切换主要有哪些方法？" class="headerlink" title="11、在WebRTC中线程切换主要有哪些方法？"></a>11、在WebRTC中线程切换主要有哪些方法？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064330644.png" class="" title="image-20220816064330644"><ul><li>post和postTask是异步调用</li><li>send和invoke 是同步调用</li></ul><h3 id="12、学习post方法的细节"><a href="#12、学习post方法的细节" class="headerlink" title="12、学习post方法的细节"></a>12、学习post方法的细节</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064351368.png" class="" title="image-20220816064351368"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064355736.png" class="" title="image-20220816064355736"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064359257.png" class="" title="image-20220816064359257"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3WebRTC%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/image-20220816064404509.png" class="" title="image-20220816064404509">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-WebRTC媒体协商</title>
    <link href="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/"/>
    <url>/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识SDP"><a href="#一、认识SDP" class="headerlink" title="一、认识SDP"></a>一、认识SDP</h2><h3 id="1、为什么要选择SDP格式作为WebRTC的传输格式？"><a href="#1、为什么要选择SDP格式作为WebRTC的传输格式？" class="headerlink" title="1、为什么要选择SDP格式作为WebRTC的传输格式？"></a>1、为什么要选择SDP格式作为WebRTC的传输格式？</h3><ul><li>与XML相比较，SDP采用key-value的模式，数据存放比较紧凑，网络传输更加节约带宽</li><li>SDP采用key-value模式，也更容易读写数据</li></ul><h3 id="2、SDP的结构图，太棒了！"><a href="#2、SDP的结构图，太棒了！" class="headerlink" title="2、SDP的结构图，太棒了！"></a>2、SDP的结构图，太棒了！</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821085122868.png" class="" title="image-20220821085122868"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821085227377.png" class="" title="image-20220821085227377"><ul><li><p>m：就是media，表示媒体曾</p></li><li><p>a：就是attribute，表示属性</p></li><li><p>c：就是connection，表示连接</p></li><li><p>v：就是version，代表SDP的版本，SDP的版本要一致才能进行协商</p></li><li><p>s：就是Session，表示会话，会话是一个全局的</p></li><li><p>0：就是ower，表示谁拥有这个会话</p></li></ul><h3 id="3、结合具体例子，学习SDP"><a href="#3、结合具体例子，学习SDP" class="headerlink" title="3、结合具体例子，学习SDP"></a>3、结合具体例子，学习SDP</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821085444989.png" class="" title="image-20220821085444989"><ul><li>后面详细分析SDP的时候，可以倒回来学习一下6-2章节</li></ul><h3 id="4、什么ICE-FULL？什么是ICE-LITE？"><a href="#4、什么ICE-FULL？什么是ICE-LITE？" class="headerlink" title="4、什么ICE-FULL？什么是ICE-LITE？"></a>4、什么ICE-FULL？什么是ICE-LITE？</h3><ul><li><p>目前通常采取 <font color="red">ICE-LITE模式</font></p></li><li><p>表示客户端与服务端双方发送candidate的时候，是进行双向还是单向的问题</p></li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821085655333.png" class="" title="image-20220821085655333"><p>5、什么是 <font color="red">PlanB</font>？什么是<font color="red">UnifiedPlan</font>？</p><ul><li>就是当一个WebRTC有多个音频轨道的时候，用什么方式来区分而已。</li><li>目前最新版本的WebRTC基本都是使用 <font color="red">UnifiedPlan</font> 来进行传输。</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821090514813.png" class="" title="image-20220821090514813"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821090958900.png" class="" title="image-20220821090958900"><h3 id="6、老师小节"><a href="#6、老师小节" class="headerlink" title="6、老师小节"></a>6、老师小节</h3><ul><li>对于SDP中的每个字段，都要非常清除其含义，只有这样，才能学好WebRTC</li><li>只有了解了SDP中的每个信息，才能在阅读代码的时候，游刃有余</li></ul><h3 id="7、SDP的内容【从功能上】归纳整理，这图太强了吧？"><a href="#7、SDP的内容【从功能上】归纳整理，这图太强了吧？" class="headerlink" title="7、SDP的内容【从功能上】归纳整理，这图太强了吧？"></a>7、SDP的内容【从功能上】归纳整理，这图太强了吧？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821091859540.png" class="" title="image-20220821091859540"><h3 id="8、SDP的内容【从WebRTC角度】归纳整理，这图太强了吧？"><a href="#8、SDP的内容【从WebRTC角度】归纳整理，这图太强了吧？" class="headerlink" title="8、SDP的内容【从WebRTC角度】归纳整理，这图太强了吧？"></a>8、SDP的内容【从WebRTC角度】归纳整理，这图太强了吧？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821092002572.png" class="" title="image-20220821092002572"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821092012349.png" class="" title="image-20220821092012349"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821092017425.png" class="" title="image-20220821092017425"><h2 id="二、WebRTC生成SDP的过程"><a href="#二、WebRTC生成SDP的过程" class="headerlink" title="二、WebRTC生成SDP的过程"></a>二、WebRTC生成SDP的过程</h2><h3 id="1、WebRTC如何确定SDP的媒体信息？"><a href="#1、WebRTC如何确定SDP的媒体信息？" class="headerlink" title="1、WebRTC如何确定SDP的媒体信息？"></a>1、WebRTC如何确定SDP的媒体信息？</h3><ul><li>WebRTC通过 <code>addTrack</code> 拿到媒体信息</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102408714.png" class="" title="image-20220821102408714"><h3 id="2、Addtrack-具体做了什么事情呢？"><a href="#2、Addtrack-具体做了什么事情呢？" class="headerlink" title="2、Addtrack 具体做了什么事情呢？"></a>2、<code>Addtrack</code> 具体做了什么事情呢？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102441787.png" class="" title="image-20220821102441787"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102449496.png" class="" title="image-20220821102449496"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102456496.png" class="" title="image-20220821102456496"><h3 id="3、从整体上看WebRTC的Session层"><a href="#3、从整体上看WebRTC的Session层" class="headerlink" title="3、从整体上看WebRTC的Session层"></a>3、从整体上看WebRTC的Session层</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102517457.png" class="" title="image-20220821102517457"><ul><li>自己能绘制这样的图，就算掌握了</li><li>每一个 TtpTransceiver 就对应SDP中的一个 m 行</li><li>RtpTransceiver 连着三端：上层的应用端、底层的传输端、中间的编解码器</li></ul><h3 id="4、下面几个问题解答？"><a href="#4、下面几个问题解答？" class="headerlink" title="4、下面几个问题解答？"></a>4、下面几个问题解答？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102542271.png" class="" title="image-20220821102542271"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102547759.png" class="" title="image-20220821102547759"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102553061.png" class="" title="image-20220821102553061"><h3 id="5、编解码器信息的收集二"><a href="#5、编解码器信息的收集二" class="headerlink" title="5、编解码器信息的收集二"></a>5、编解码器信息的收集二</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102610427.png" class="" title="image-20220821102610427"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102614194.png" class="" title="image-20220821102614194"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102619796.png" class="" title="image-20220821102619796"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102624591.png" class="" title="image-20220821102624591"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102630350.png" class="" title="image-20220821102630350"><h3 id="6、课程小节"><a href="#6、课程小节" class="headerlink" title="6、课程小节"></a>6、课程小节</h3><ul><li>前两个步骤都只是收集信息，什么时候开始将收集的信息生成SDP呢？</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102639441.png" class="" title="image-20220821102639441"><h2 id="三、-createOffer源码分析"><a href="#三、-createOffer源码分析" class="headerlink" title="三、 createOffer源码分析"></a>三、 createOffer源码分析</h2><h3 id="1、在创建offer的之前有一个特别重要的点，就是生成证书"><a href="#1、在创建offer的之前有一个特别重要的点，就是生成证书" class="headerlink" title="1、在创建offer的之前有一个特别重要的点，就是生成证书"></a>1、在创建offer的<code>之前</code>有一个特别重要的点，就是<code>生成证书</code></h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102710268.png" class="" title="image-20220821102710268"><h3 id="2、WebRTC如何保证-createOffer必定在setLocalSDP之前执行呢？"><a href="#2、WebRTC如何保证-createOffer必定在setLocalSDP之前执行呢？" class="headerlink" title="2、WebRTC如何保证 createOffer必定在setLocalSDP之前执行呢？"></a>2、WebRTC如何保证 createOffer必定在setLocalSDP之前执行呢？</h3><ul><li>WebRTC内部是通过队列，来讲媒体协商的信息进行顺序化</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102734876.png" class="" title="image-20220821102734876"><ul><li>四个媒体协商，都是有顺序的，就是通过上面的队列进行保证的</li></ul><h3 id="3、createOffer创建过程图，太棒了"><a href="#3、createOffer创建过程图，太棒了" class="headerlink" title="3、createOffer创建过程图，太棒了"></a>3、createOffer创建过程图，太棒了</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102753302.png" class="" title="image-20220821102753302"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102759479.png" class="" title="image-20220821102759479"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102803055.png" class="" title="image-20220821102803055"><h3 id="4、createOffer的源码流程跟踪"><a href="#4、createOffer的源码流程跟踪" class="headerlink" title="4、createOffer的源码流程跟踪"></a>4、createOffer的源码流程跟踪</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102814134.png" class="" title="image-20220821102814134"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102818413.png" class="" title="image-20220821102818413"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102824286.png" class="" title="image-20220821102824286"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102827462.png" class="" title="image-20220821102827462"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102833661.png" class="" title="image-20220821102833661"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102836761.png" class="" title="image-20220821102836761"><h3 id="四、-SetLocalDescription源码分析"><a href="#四、-SetLocalDescription源码分析" class="headerlink" title="四、 SetLocalDescription源码分析"></a>四、 SetLocalDescription源码分析</h3><h4 id="1、setLocalDescription的调用栈，图很棒啊"><a href="#1、setLocalDescription的调用栈，图很棒啊" class="headerlink" title="1、setLocalDescription的调用栈，图很棒啊"></a>1、setLocalDescription的调用栈，图很棒啊</h4><ul><li>每一个transceiver都对应sdp中的一个m行</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102855305.png" class="" title="image-20220821102855305"><h3 id="2、几个Channel的含义理解"><a href="#2、几个Channel的含义理解" class="headerlink" title="2、几个Channel的含义理解"></a>2、几个Channel的含义理解</h3><ul><li>这个图也太强了吧，是什么水平，能画出来这么帅的图</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102908936.png" class="" title="image-20220821102908936"><h3 id="3、建立音视频流水线"><a href="#3、建立音视频流水线" class="headerlink" title="3、建立音视频流水线"></a>3、建立音视频流水线</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102927936.png" class="" title="image-20220821102927936"><h3 id="4、Session层的理解"><a href="#4、Session层的理解" class="headerlink" title="4、Session层的理解"></a>4、Session层的理解</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102935949.png" class="" title="image-20220821102935949"><h3 id="5、SetLocalDescription代码走读"><a href="#5、SetLocalDescription代码走读" class="headerlink" title="5、SetLocalDescription代码走读"></a>5、SetLocalDescription代码走读</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821102958257.png" class="" title="image-20220821102958257"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103003230.png" class="" title="image-20220821103003230"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103013018.png" class="" title="image-20220821103013018"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103017745.png" class="" title="image-20220821103017745"><h2 id="四、candidte的收集"><a href="#四、candidte的收集" class="headerlink" title="四、candidte的收集"></a>四、candidte的收集</h2><h3 id="1、WebRTC什么时候开始收集candidate？"><a href="#1、WebRTC什么时候开始收集candidate？" class="headerlink" title="1、WebRTC什么时候开始收集candidate？"></a>1、WebRTC什么时候开始收集candidate？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103050556.png" class="" title="image-20220821103050556"><p>2、candidate收集过程的调用栈</p><ul><li>这种方式去仔细阅读某个方法，是不是挺好的？</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103102720.png" class="" title="image-20220821103102720"><h3 id="3、candidate收集过程的代码走读"><a href="#3、candidate收集过程的代码走读" class="headerlink" title="3、candidate收集过程的代码走读"></a>3、candidate收集过程的代码走读</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103110610.png" class="" title="image-20220821103110610"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103114334.png" class="" title="image-20220821103114334"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103117676.png" class="" title="image-20220821103117676"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103122612.png" class="" title="image-20220821103122612"><h3 id="4、生成SDP信息的位置在哪里？"><a href="#4、生成SDP信息的位置在哪里？" class="headerlink" title="4、生成SDP信息的位置在哪里？"></a>4、生成SDP信息的位置在哪里？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103131120.png" class="" title="image-20220821103131120"><h3 id="5、JsepSessionDescription的类关系图？"><a href="#5、JsepSessionDescription的类关系图？" class="headerlink" title="5、JsepSessionDescription的类关系图？"></a>5、JsepSessionDescription的类关系图？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103141613.png" class="" title="image-20220821103141613"><h3 id="5、WebRTC生成SDP信息的代码走读？"><a href="#5、WebRTC生成SDP信息的代码走读？" class="headerlink" title="5、WebRTC生成SDP信息的代码走读？"></a>5、WebRTC生成SDP信息的代码走读？</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103149254.png" class="" title="image-20220821103149254"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103151830.png" class="" title="image-20220821103151830"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103155805.png" class="" title="image-20220821103155805"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103159907.png" class="" title="image-20220821103159907"><h3 id="6、解析SDP的代码走读（和生成SDP类似，可以自己总结一个调用栈）"><a href="#6、解析SDP的代码走读（和生成SDP类似，可以自己总结一个调用栈）" class="headerlink" title="6、解析SDP的代码走读（和生成SDP类似，可以自己总结一个调用栈）"></a>6、解析SDP的代码走读（和生成SDP类似，可以自己总结一个调用栈）</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103208942.png" class="" title="image-20220821103208942"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103212374.png" class="" title="image-20220821103212374"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103215743.png" class="" title="image-20220821103215743"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103220959.png" class="" title="image-20220821103220959"><h3 id="7、源码分析-createAnswer"><a href="#7、源码分析-createAnswer" class="headerlink" title="7、源码分析-createAnswer"></a>7、源码分析-createAnswer</h3><ul><li>生成Answer之前也要先创建证书</li></ul><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103307035.png" class="" title="image-20220821103307035"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103311725.png" class="" title="image-20220821103311725"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103318915.png" class="" title="image-20220821103318915"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103321550.png" class="" title="image-20220821103321550"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103328685.png" class="" title="image-20220821103328685"><h3 id="8、setRemoteDescription"><a href="#8、setRemoteDescription" class="headerlink" title="8、setRemoteDescription"></a>8、setRemoteDescription</h3><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103345839.png" class="" title="image-20220821103345839"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103348485.png" class="" title="image-20220821103348485"><img src="/2022/08/15/WebRTC%E6%BA%90%E7%A0%81/day06-WebRTC%E5%AA%92%E4%BD%93%E5%8D%8F%E5%95%86/image-20220821103353549.png" class="" title="image-20220821103353549">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day04-开启WebRTC源码分析之路</title>
    <link href="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识官方提供的demo"><a href="#一、认识官方提供的demo" class="headerlink" title="一、认识官方提供的demo"></a>一、认识官方提供的demo</h2><h3 id="1、学习WebRTC要牢牢抓住哪个demo？为什么？"><a href="#1、学习WebRTC要牢牢抓住哪个demo？为什么？" class="headerlink" title="1、学习WebRTC要牢牢抓住哪个demo？为什么？"></a>1、学习WebRTC要牢牢抓住哪个demo？为什么？</h3><ul><li>抓住：peerConnection_client 这个demo【只有Windows环境有】</li><li>原因：因为这个demo几乎囊括了WebRTC所有主要用法</li></ul><h3 id="2、peerconnection-client-的主要工作流程是什么？"><a href="#2、peerconnection-client-的主要工作流程是什么？" class="headerlink" title="2、peerconnection_client 的主要工作流程是什么？"></a>2、peerconnection_client 的主要工作流程是什么？</h3><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815065720677.png" class="" title="image-20220815065720677"><h3 id="3、peerconnection-client-类关系图"><a href="#3、peerconnection-client-类关系图" class="headerlink" title="3、peerconnection_client 类关系图"></a>3、peerconnection_client 类关系图</h3><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815065751100.png" class="" title="image-20220815065751100"><h3 id="4、peerconnection-client-的时序图"><a href="#4、peerconnection-client-的时序图" class="headerlink" title="4、peerconnection_client 的时序图"></a>4、peerconnection_client 的时序图</h3><ul><li>这些图真的太棒了，很容易帮助理解东西</li><li>一定要学会来怎么绘制这些图</li></ul><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815065959477.png" class="" title="image-20220815065959477"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070015114.png" class="" title="image-20220815070015114"><h3 id="5、媒体协商的步骤，一共8个步骤，一定要学会来！"><a href="#5、媒体协商的步骤，一共8个步骤，一定要学会来！" class="headerlink" title="5、媒体协商的步骤，一共8个步骤，一定要学会来！"></a>5、媒体协商的步骤，一共8个步骤，一定要学会来！</h3><ul><li>下面这两个图也太棒了</li></ul><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070125005.png" class="" title="image-20220815070125005"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070348527.png" class="" title="image-20220815070348527"><h3 id="6、传统协商存在什么问题？如何解决？（暂时了解吧，好像还没用到）"><a href="#6、传统协商存在什么问题？如何解决？（暂时了解吧，好像还没用到）" class="headerlink" title="6、传统协商存在什么问题？如何解决？（暂时了解吧，好像还没用到）"></a>6、传统协商存在什么问题？如何解决？（暂时了解吧，好像还没用到）</h3><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070641167.png" class="" title="image-20220815070641167"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070650570.png" class="" title="image-20220815070650570"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070701533.png" class="" title="image-20220815070701533"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070712749.png" class="" title="image-20220815070712749"><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070718373.png" class="" title="image-20220815070718373"><h3 id="7、信令处理时序图"><a href="#7、信令处理时序图" class="headerlink" title="7、信令处理时序图"></a>7、信令处理时序图</h3><ul><li>图太好了</li></ul><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070756560.png" class="" title="image-20220815070756560"><h3 id="8、WebRTC-Native-开发过程"><a href="#8、WebRTC-Native-开发过程" class="headerlink" title="8、WebRTC Native 开发过程"></a>8、WebRTC Native 开发过程</h3><ul><li>图也是超级棒</li></ul><img src="/2022/07/28/WebRTC%E6%BA%90%E7%A0%81/day04-%E5%BC%80%E5%90%AFWebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/image-20220815070903392.png" class="" title="image-20220815070903392">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day03-WebRTC源码环境</title>
    <link href="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC整体架构"><a href="#一、WebRTC整体架构" class="headerlink" title="一、WebRTC整体架构"></a>一、WebRTC整体架构</h2><h3 id="1、【重要】WebRTC的架构图"><a href="#1、【重要】WebRTC的架构图" class="headerlink" title="1、【重要】WebRTC的架构图"></a>1、【重要】WebRTC的架构图</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220727074051056.png" class="" title="image-20220727074051056"><h3 id="2、【重要】WebRTC的数据流转图"><a href="#2、【重要】WebRTC的数据流转图" class="headerlink" title="2、【重要】WebRTC的数据流转图"></a>2、【重要】WebRTC的数据流转图</h3><ul><li>RTCP包是用于控制RTP包的</li><li>RTP包里面都是媒体数据</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220727074121906.png" class="" title="image-20220727074121906"><h2 id="二、WebRTC资料路径"><a href="#二、WebRTC资料路径" class="headerlink" title="二、WebRTC资料路径"></a>二、WebRTC资料路径</h2><h3 id="1、哪里获取WebRTC的源码？"><a href="#1、哪里获取WebRTC的源码？" class="headerlink" title="1、哪里获取WebRTC的源码？"></a>1、哪里获取WebRTC的源码？</h3><ul><li><a href="https://webrtc.googlesource.com/src/+/refs/heads/main">通过官网获取</a></li><li><a href="https://webrtc.org.cn/mirror/">通过声网镜像获取</a></li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220815064121684.png" class="" title="image-20220815064121684"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220815064130960.png" class="" title="image-20220815064130960"><h3 id="2、记一个音视频参考文章"><a href="#2、记一个音视频参考文章" class="headerlink" title="2、记一个音视频参考文章"></a>2、记一个音视频参考文章</h3><ul><li>avdancedu.com</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220815064246826.png" class="" title="image-20220815064246826"><h3 id="3、认识depot-tools-、gn、ninjia（说出大体功能即可）"><a href="#3、认识depot-tools-、gn、ninjia（说出大体功能即可）" class="headerlink" title="3、认识depot_tools 、gn、ninjia（说出大体功能即可）"></a>3、认识depot_tools 、gn、ninjia（说出大体功能即可）</h3><ul><li><p>depot_tools： Google 官方提供的一个用来 <font color="red">checkout 、 compile 、 run 和 submit</font> 的工具集，可以帮助我们更好的学习和调试 Chromium 代码</p></li><li><p>gn：它与cmake功能相同</p></li><li><p>ninjia：它与make功能相同</p></li></ul><h2 id="三、Mac下编译WebRTC（Mac和iOS版本）"><a href="#三、Mac下编译WebRTC（Mac和iOS版本）" class="headerlink" title="三、Mac下编译WebRTC（Mac和iOS版本）"></a>三、<a href="https://segmentfault.com/a/1190000041179228">Mac下编译WebRTC（Mac和iOS版本）</a></h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>随着新冠疫情的影响，这两年音视频的需求呈爆发式增长。在音视频领域中，WebRTC可以说是一个绕不开宝库，包括了音视频采集、编解码、传输、渲染的全过程。本文主要记录下在Mac平台上编译WebRTC Mac和iOS版本的全过程。</p><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><p>因为众所周知的原因，要下载WebRTC的源码是需要代理工具的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_porxy</span>=<span class="hljs-string">&quot;http://127.0.0.1:21087&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_porxy</span>=<span class="hljs-string">&quot;http://127.0.0.1:21087&quot;</span><br></code></pre></td></tr></table></figure><h4 id="安装工具depot-tools"><a href="#安装工具depot-tools" class="headerlink" title="安装工具depot_tools"></a>安装工具depot_tools</h4><p>git clone获取depot_tools</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//</span>chromium.googlesource.com<span class="hljs-regexp">/chromium/</span>tools/depot_tools.git<br></code></pre></td></tr></table></figure><p>将depot_tools的路径配置到环境变量中(只是当次生效)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PWD</span>/depot_tools:$PATH<br></code></pre></td></tr></table></figure><h4 id="下载webrtc源码"><a href="#下载webrtc源码" class="headerlink" title="下载webrtc源码"></a>下载webrtc源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> webrtc<br><span class="hljs-built_in">cd</span> webrtc<br>fetch --nohooks webrtc_ios<br>gclient <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>Mac版本：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> src<br>gn gen out/mac-release <span class="hljs-params">--args=</span>&#x27;target_os=<span class="hljs-string">&quot;mac&quot;</span> target_cpu=<span class="hljs-string">&quot;x64&quot;</span> is_debug=<span class="hljs-literal">false</span> use_rtti=<span class="hljs-literal">true</span> is_component_build=<span class="hljs-literal">false</span> rtc_use_h264=<span class="hljs-literal">false</span> rtc_include_tests=<span class="hljs-literal">false</span>&#x27; <span class="hljs-params">--ide=xcode</span><br>ninja -C out/mac-release<br></code></pre></td></tr></table></figure><p>iOS版本(不带证书)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd src<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译不带证书版本</span><br>gn gen out/ios-release --args=&#x27;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; is_debug=false use_rtti=true is_component_build=false ios_enable_code_signing=false proprietary_codecs=false rtc_use_h264=false rtc_include_tests=false&#x27; --ide=xcode<br>ninja -C out/ios-release<br></code></pre></td></tr></table></figure><p>iOS版本(带证书)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd src<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取证书名</span><br>security find-identity -v -p codesigning<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译带证书版本（我没成功，每次报证书<span class="hljs-built_in">id</span>不对）</span><br>gn gen out/ios-release-sign --args=&#x27;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; is_debug=false use_rtti=true is_component_build=false  ios_code_signing_identity=&quot;你的整数id&quot; proprietary_codecs=false rtc_use_h264=false rtc_include_tests=false&#x27; --ide=xcode<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最终成功编译的语句（保证电脑上只有一个证书，去keychian中删除，让它内部自动选择）</span><br>gn gen out/ios-release-sign --args=&#x27;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot; ios_enable_code_signing=true rtc_include_tests=false&#x27; --ide=xcode<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行 APPRTCMobile，需要根据xcode提示，更改一下BundleID</span><br></code></pre></td></tr></table></figure><p>编译成功后会在src\out\xxxx\下生成all.xcworkspace文件。打开就可以构建、调试webrtc的项目。其中APPRTCMobile是谷歌提供的示例demo，可以在Mac下直接编译运行。</p><p>运行成功，手机上会出现以下app和运行成功的界面：</p><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220925095507770.png" class="" title="image-20220925095507770"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day03-WebRTC%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/image-20220925095513846.png" class="" title="image-20220925095513846">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-WebRTC的整体认知</title>
    <link href="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC学习前言"><a href="#一、WebRTC学习前言" class="headerlink" title="一、WebRTC学习前言"></a>一、WebRTC学习前言</h2><h3 id="1、WebRTC源码的代码量是什么级别？"><a href="#1、WebRTC源码的代码量是什么级别？" class="headerlink" title="1、WebRTC源码的代码量是什么级别？"></a>1、WebRTC源码的代码量是什么级别？</h3><ul><li>WebRTC有 <code>100多万</code> 行代码</li></ul><h3 id="2、音视频的起源？"><a href="#2、音视频的起源？" class="headerlink" title="2、音视频的起源？"></a>2、音视频的起源？</h3><ul><li>千里眼与顺风耳（想象）</li><li>1876年贝尔发明了电话（音频的起源）</li><li>1872年“奔跑的马”（为了证明🐴在奔跑时，四条腿是否出现腾空，借助一组照片，也是视频的起源）</li></ul><h3 id="3、WebRTC由何而来？"><a href="#3、WebRTC由何而来？" class="headerlink" title="3、WebRTC由何而来？"></a>3、WebRTC由何而来？</h3><ul><li>缘起GIPS的独门秘籍</li><li>Google收购GIPS，为了实现浏览器直播的宏大愿景，创建了WebRTC</li><li>WebRTC现在就是音视频网络传输界的霸主</li></ul><h3 id="4、【重要】传统直播和实时互动直播的区别（技术路线、最终形态上分析）？"><a href="#4、【重要】传统直播和实时互动直播的区别（技术路线、最终形态上分析）？" class="headerlink" title="4、【重要】传统直播和实时互动直播的区别（技术路线、最终形态上分析）？"></a>4、【重要】传统直播和实时互动直播的区别（技术路线、最终形态上分析）？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727064848021.png" class="" title="image-20220727064848021"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727065058365.png" class="" title="image-20220727065058365"><h3 id="5、【重要】两种技术的对比？"><a href="#5、【重要】两种技术的对比？" class="headerlink" title="5、【重要】两种技术的对比？"></a>5、【重要】两种技术的对比？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727065259838.png" class="" title="image-20220727065259838"><h2 id="二、实时互动直播的难点在哪里？"><a href="#二、实时互动直播的难点在哪里？" class="headerlink" title="二、实时互动直播的难点在哪里？"></a>二、实时互动直播的难点在哪里？</h2><h3 id="1、对实时要求性高，每个延迟度让用户的体验如何？"><a href="#1、对实时要求性高，每个延迟度让用户的体验如何？" class="headerlink" title="1、对实时要求性高，每个延迟度让用户的体验如何？"></a>1、对实时要求性高，每个延迟度让用户的体验如何？</h3><ul><li>传统直播：<code>平均延迟在3秒以上</code></li><li>实时互动直播：<code>延迟在500毫秒以内</code></li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727065501848.png" class="" title="image-20220727065501848"><h3 id="2、TCP与UDP之争？"><a href="#2、TCP与UDP之争？" class="headerlink" title="2、TCP与UDP之争？"></a>2、TCP与UDP之争？</h3><ul><li><p>如果说UDP做到极致是不是就是自己实现了一套TCP呢？<code>否</code></p></li><li><p>tcp的<code>ack机制和超时重传机制</code>，就限制了tcp是无法做到500毫秒以下的延迟性的</p></li><li><p>因此实时互动直播都是选择借助 <code>UDP</code> 进行包传输</p></li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070001320.png" class="" title="image-20220727070001320"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070013911.png" class="" title="image-20220727070013911"><h3 id="3、音视频服务质量与实时性之间的矛盾是什么？"><a href="#3、音视频服务质量与实时性之间的矛盾是什么？" class="headerlink" title="3、音视频服务质量与实时性之间的矛盾是什么？"></a>3、音视频服务质量与实时性之间的矛盾是什么？</h3><ul><li>如果想要提高音视频服务质量，那么就要保证数据包的完整性和数据足够保真，而就会给实时性带来很大挑战。</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070211566.png" class="" title="image-20220727070211566"><h3 id="4、实时互动直播为什么还要解决回音、噪音等问题？"><a href="#4、实时互动直播为什么还要解决回音、噪音等问题？" class="headerlink" title="4、实时互动直播为什么还要解决回音、噪音等问题？"></a>4、实时互动直播为什么还要解决回音、噪音等问题？</h3><ul><li>回音消除（之前好像对此认识存在误区）</li><li>降噪</li><li>自动增益</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070316704.png" class="" title="image-20220727070316704"><h3 id="5、两种直播的技术要求对比？"><a href="#5、两种直播的技术要求对比？" class="headerlink" title="5、两种直播的技术要求对比？"></a>5、两种直播的技术要求对比？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070419012.png" class="" title="image-20220727070419012"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070444375.png" class="" title="image-20220727070444375"><h2 id="三、几个重要指标和评测方法？"><a href="#三、几个重要指标和评测方法？" class="headerlink" title="三、几个重要指标和评测方法？"></a>三、几个重要指标和评测方法？</h2><h3 id="1、实时互动直播的三个重要指标？"><a href="#1、实时互动直播的三个重要指标？" class="headerlink" title="1、实时互动直播的三个重要指标？"></a>1、实时互动直播的三个重要指标？</h3><ul><li>实时通信延迟指标</li><li>音频服务质量评测指标</li><li>视频服务质量评测指标</li></ul><h3 id="2、对实时通信延迟指标的理解？"><a href="#2、对实时通信延迟指标的理解？" class="headerlink" title="2、对实时通信延迟指标的理解？"></a>2、对实时通信延迟指标的理解？</h3><ul><li><code>谨记：</code> 实时互动直播，端到端的延迟评估必须小于500毫秒</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070636172.png" class="" title="image-20220727070636172"><h3 id="3、实时性最简单的评估方案？"><a href="#3、实时性最简单的评估方案？" class="headerlink" title="3、实时性最简单的评估方案？"></a>3、实时性最简单的评估方案？</h3><ul><li>放一个电子表，对比观看端看到的时间和真实时间的差距，就能大致评估延迟性了。</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727070906374.png" class="" title="image-20220727070906374"><h3 id="4、视频质量评测方案？"><a href="#4、视频质量评测方案？" class="headerlink" title="4、视频质量评测方案？"></a>4、视频质量评测方案？</h3><ul><li>也是一般始终主观评测，同时可以借助码流大小辅助评估</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071021231.png" class="" title="image-20220727071021231"><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071029799.png" class="" title="image-20220727071029799"><h2 id="四、为什么实时互动直播需要使用WebRTC？"><a href="#四、为什么实时互动直播需要使用WebRTC？" class="headerlink" title="四、为什么实时互动直播需要使用WebRTC？"></a>四、为什么实时互动直播需要使用WebRTC？</h2><h3 id="1、视频直播架构（大方面）"><a href="#1、视频直播架构（大方面）" class="headerlink" title="1、视频直播架构（大方面）"></a>1、视频直播架构（大方面）</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071121779.png" class="" title="image-20220727071121779"><h3 id="2、细化音视频直播架构？"><a href="#2、细化音视频直播架构？" class="headerlink" title="2、细化音视频直播架构？"></a>2、细化音视频直播架构？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071154392.png" class="" title="image-20220727071154392"><h3 id="3、进一步细化音视频直播架构？"><a href="#3、进一步细化音视频直播架构？" class="headerlink" title="3、进一步细化音视频直播架构？"></a>3、进一步细化音视频直播架构？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071317662.png" class="" title="image-20220727071317662"><h3 id="4、最终细化后的音视频直播架构？"><a href="#4、最终细化后的音视频直播架构？" class="headerlink" title="4、最终细化后的音视频直播架构？"></a>4、最终细化后的音视频直播架构？</h3><ul><li><code>补充</code>：电话使用的是  g.711 编码</li></ul><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071341870.png" class="" title="image-20220727071341870"><h3 id="5、自研系统与WebRTC的比较？"><a href="#5、自研系统与WebRTC的比较？" class="headerlink" title="5、自研系统与WebRTC的比较？"></a>5、自研系统与WebRTC的比较？</h3><img src="/2022/07/25/WebRTC%E6%BA%90%E7%A0%81/day02-WebRTC%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/image-20220727071447890.png" class="" title="image-20220727071447890">]]></content>
    
    
    <categories>
      
      <category>WebRTC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day17-【实战】iOS端的WebRTC代码实现思路</title>
    <link href="/2022/07/18/WebRTC%E5%85%A5%E9%97%A8/day17iOS%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%AF%B9%E7%AB%AF/"/>
    <url>/2022/07/18/WebRTC%E5%85%A5%E9%97%A8/day17iOS%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%AF%B9%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="一、单方面准备阶段（设备A）"><a href="#一、单方面准备阶段（设备A）" class="headerlink" title="一、单方面准备阶段（设备A）"></a>一、单方面准备阶段（设备A）</h2><h3 id="1、创建-RTCPeerConnectionFactory-工厂类"><a href="#1、创建-RTCPeerConnectionFactory-工厂类" class="headerlink" title="1、创建 RTCPeerConnectionFactory 工厂类"></a>1、创建 <code>RTCPeerConnectionFactory</code> 工厂类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs objective-c">- (void)createPeerConnectionFactory &#123;<br>    //设置SSL传输<br>    [RTCPeerConnectionFactory initialize];<br>    <br>    //如果点对点工厂为空<br>    if (!factory)<br>    &#123;<br>        RTCDefaultVideoDecoderFactory* decoderFactory = [[RTCDefaultVideoDecoderFactory alloc] init];<br>        RTCDefaultVideoEncoderFactory* encoderFactory = [[RTCDefaultVideoEncoderFactory alloc] init];<br>        NSArray* codecs = [encoderFactory supportedCodecs];<br>        [encoderFactory setPreferredCodec:codecs[2]];<br>        <br>        factory = [[RTCPeerConnectionFactory alloc] initWithEncoderFactory: encoderFactory<br>                                                            decoderFactory: decoderFactory];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、初始化本地音视频流"><a href="#2、初始化本地音视频流" class="headerlink" title="2、初始化本地音视频流"></a>2、初始化本地音视频流</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void) captureLocalMedia &#123;<br>    NSDictionary* mandatoryConstraints = @&#123;&#125;;<br>    RTCMediaConstraints* constraints =<br>    [[RTCMediaConstraints alloc] initWithMandatoryConstraints:mandatoryConstraints<br>                                          optionalConstraints:nil];<br>    <br>    RTCAudioSource* audioSource = [factory audioSourceWithConstraints: constraints];<br>    //self.audioTrack = [factory audioTrackWithTrackId:@&quot;ARDAMSa0&quot;];<br>    audioTrack = [factory audioTrackWithSource:audioSource trackId:@&quot;ADRAMSa0&quot;];<br>    <br>    NSArray&lt;AVCaptureDevice* &gt;* captureDevices = [RTCCameraVideoCapturer captureDevices];<br>    AVCaptureDevicePosition position = AVCaptureDevicePositionFront;<br>    AVCaptureDevice* device = captureDevices[0];<br>    for (AVCaptureDevice* obj in captureDevices) &#123;<br>        if (obj.position == position) &#123;<br>            device = obj;<br>            break;<br>        &#125;<br>    &#125;<br>    <br>    //检测摄像头权限<br>    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];<br>    if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied) &#123;<br>        NSLog(@&quot;相机访问受限&quot;);<br>        return;<br>    &#125;<br>    <br>    if (device) &#123;<br>        RTCVideoSource* videoSource = [factory videoSource];<br>        capture = [[RTCCameraVideoCapturer alloc] initWithDelegate:videoSource];<br>        AVCaptureDeviceFormat* format = [[RTCCameraVideoCapturer supportedFormatsForDevice:device] lastObject];<br>        CGFloat fps = [[format videoSupportedFrameRateRanges] firstObject].maxFrameRate;<br>        videoTrack = [factory videoTrackWithSource:videoSource trackId:@&quot;ARDAMSv0&quot;];<br>        self.localVideoView.captureSession = capture.captureSession;<br>        [capture startCaptureWithDevice:device<br>                                     format:format<br>                                        fps:fps];<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这时候屏幕上应该可以看到自己的视频流在播放了。</li></ul><h3 id="3、初始化SocketIO，并-connect-连接到信令服务器"><a href="#3、初始化SocketIO，并-connect-连接到信令服务器" class="headerlink" title="3、初始化SocketIO，并 connect 连接到信令服务器"></a>3、初始化SocketIO，并 <code>connect</code> 连接到信令服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void)createConnect: (NSString*) addr &#123;<br>    NSLog(@&quot;the server addr is %@&quot;, addr);<br>    /*<br>     log 是否打印日志<br>     forcePolling  是否强制使用轮询<br>     reconnectAttempts 重连次数，-1表示一直重连<br>     reconnectWait 重连间隔时间<br>     forceWebsockets 是否强制使用websocket<br>     */<br>    NSURL* url = [[NSURL alloc] initWithString:addr];<br>    manager = [[SocketManager alloc] initWithSocketURL:url<br>                                                config:@&#123;@&quot;log&quot;: @YES,<br>                                                         @&quot;forcePolling&quot;:@YES,<br>                                                         @&quot;forceWebsockets&quot;:@NO,<br>                                                         @&quot;reconnectAttempts&quot;:@(5),<br>                                                         @&quot;reconnectWait&quot;:@(1)<br>                                                         &#125;];<br>    socket = manager.defaultSocket;<br>    <br>    [socket on:@&quot;connect&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket connected&quot;);<br>        [self.delegate connected];<br>    &#125;];<br>    <br>    [socket on:@&quot;error&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket connect_error&quot;);<br>        [self.delegate connect_error];<br>    &#125;];<br>    <br>    [socket on:@&quot;reconnectAttempt&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket reconnectAttempt&quot;);<br>        [self.delegate reconnectAttempt];<br>    &#125;];<br>   <br>    [socket on:@&quot;joined&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;joined room(%@)&quot;, room);<br>        <br>        [self.delegate joined:room];<br>        <br>    &#125;];<br>    <br>    [socket on:@&quot;leaved&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;leaved room(%@)&quot;, room);<br>        <br>        [self.delegate leaved:room];<br>    &#125;];<br>    <br>    [socket on:@&quot;full&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;room(%@) is full&quot;, room);<br>        [self.delegate full:room];<br>    &#125;];<br>    <br>    [socket on:@&quot;otherjoin&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSString* uid = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;other user(%@) has been joined into room(%@)&quot;, room, uid);<br>        [self.delegate otherjoin:room User:uid];<br>    &#125;];<br>    <br>    [socket on:@&quot;bye&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSString* uid = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;user(%@) has leaved from room(%@)&quot;, room, uid);<br>        [self.delegate byeFrom:room User:uid];<br>    &#125;];<br>    <br>    [socket on:@&quot;message&quot; callback:^(NSArray * data, SocketAckEmitter * ack)&#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSDictionary* msg = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;onMessage, room(%@), data(%@)&quot;, room, msg);<br>        <br>        NSString* type = msg[@&quot;type&quot;];<br>        if( [type isEqualToString:@&quot;offer&quot;])&#123;<br>            [self.delegate offer: room message: msg];<br>        &#125;else if( [type isEqualToString:@&quot;answer&quot;])&#123;<br>            [self.delegate answer:room message: msg];<br>        &#125;else if( [type isEqualToString:@&quot;candidate&quot;])&#123;<br>            [self.delegate candidate:room message: msg];<br>        &#125;else &#123;<br>            NSLog(@&quot;the msg is invalid!&quot;);<br>        &#125;<br>    &#125;];<br>    <br>    // 连接超时时间设置为3秒<br>    [socket connectWithTimeoutAfter: 3.0 withHandler:^(void)&#123;<br>        NSLog(@&quot;socket connect_timeout 3.0s&quot;);<br>        [self.delegate connect_timeout];<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、设备A发送-join-指令给服务器，并收到-joined-指令后，会创建-RTCPeerConnection-对象"><a href="#4、设备A发送-join-指令给服务器，并收到-joined-指令后，会创建-RTCPeerConnection-对象" class="headerlink" title="4、设备A发送 join 指令给服务器，并收到 joined 指令后，会创建 RTCPeerConnection 对象"></a>4、设备A发送 <code>join</code> 指令给服务器，并收到 <code>joined</code> 指令后，会创建 <code>RTCPeerConnection</code> 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (RTCPeerConnection *)createPeerConnection &#123;<br>    //得到ICEServer<br>    if (!ICEServers) &#123;<br>        ICEServers = [NSMutableArray array];<br>        [ICEServers addObject:[self defaultSTUNServer]];<br>    &#125;<br><br>    //用工厂来创建连接<br>    RTCConfiguration* configuration = [[RTCConfiguration alloc] init];<br>    [configuration setIceServers:ICEServers];<br>    RTCPeerConnection* conn = [factory<br>                                     peerConnectionWithConfiguration:configuration<br>                                                         constraints:[self defaultPeerConnContraints]<br>                                                            delegate:self];<br>    <br>    NSArray&lt;NSString*&gt;* mediaStreamLabels = @[@&quot;ARDAMS&quot;];<br>    [conn addTrack:videoTrack streamIds:mediaStreamLabels];<br>    [conn addTrack:audioTrack streamIds:mediaStreamLabels];<br><br>    return conn;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、有另一个设备（设备B）加入房间阶段-媒体协商"><a href="#二、有另一个设备（设备B）加入房间阶段-媒体协商" class="headerlink" title="二、有另一个设备（设备B）加入房间阶段 - 媒体协商"></a>二、有另一个设备（设备B）加入房间阶段 - 媒体协商</h2><h3 id="1、A端会触发-otherjoin-信令，此刻有两个peerConnection，进入媒体协商阶段（创建offer、设置localOffer、发送offer）"><a href="#1、A端会触发-otherjoin-信令，此刻有两个peerConnection，进入媒体协商阶段（创建offer、设置localOffer、发送offer）" class="headerlink" title="1、A端会触发 otherjoin 信令，此刻有两个peerConnection，进入媒体协商阶段（创建offer、设置localOffer、发送offer）"></a>1、A端会触发 <code>otherjoin</code> 信令，此刻有两个peerConnection，进入媒体协商阶段（创建offer、设置localOffer、发送offer）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">// 约束信息<br>- (RTCMediaConstraints*)defaultPeerConnContraints &#123;<br>    RTCMediaConstraints* mediaConstraints =<br>    [[RTCMediaConstraints alloc] initWithMandatoryConstraints:@&#123;<br>                                                                kRTCMediaConstraintsOfferToReceiveAudio:kRTCMediaConstraintsValueTrue,<br>                                                                kRTCMediaConstraintsOfferToReceiveVideo:kRTCMediaConstraintsValueTrue<br>                                                                &#125;<br>                                          optionalConstraints:@&#123; @&quot;DtlsSrtpKeyAgreement&quot; : @&quot;true&quot; &#125;];<br>    return mediaConstraints;<br>&#125;<br><br>// 创建offer<br>- (void)doStartCall &#123;<br>    NSLog(@&quot;Start Call, Wait ...&quot;);<br>    [self addLogToScreen: @&quot;Start Call, Wait ...&quot;];<br>    if (!peerConnection) &#123;<br>        peerConnection = [self createPeerConnection];<br>    &#125;<br>    <br>    [peerConnection offerForConstraints:[self defaultPeerConnContraints]<br>                      completionHandler:^(RTCSessionDescription * _Nullable sdp, NSError * _Nullable error) &#123;<br>                          if(error)&#123;<br>                              NSLog(@&quot;Failed to create offer SDP, err=%@&quot;, error);<br>                          &#125; else &#123;<br>                              __weak RTCPeerConnection* weakPeerConnction = self-&gt;peerConnection;<br>                              [self setLocalOffer: weakPeerConnction withSdp: sdp];<br>                          &#125;<br>                      &#125;];<br>&#125;<br><br>// 发送offer给对端<br>- (void)setLocalOffer:(RTCPeerConnection*)pc withSdp:(RTCSessionDescription*) sdp&#123;<br>    <br>    [pc setLocalDescription:sdp completionHandler:^(NSError * _Nullable error) &#123;<br>        if (!error) &#123;<br>            NSLog(@&quot;Successed to set local offer sdp!&quot;);<br>        &#125;else&#123;<br>            NSLog(@&quot;Failed to set local offer sdp, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>    <br>    __weak NSString* weakMyRoom = myRoom;<br>    dispatch_async(dispatch_get_main_queue(), ^&#123;<br>        <br>        NSDictionary* dict = [[NSDictionary alloc] initWithObjects:@[@&quot;offer&quot;, sdp.sdp]<br>                                                           forKeys: @[@&quot;type&quot;, @&quot;sdp&quot;]];<br>        <br>        [[SignalClient getInstance] sendMessage: weakMyRoom<br>                                        withMsg: dict];<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、B端收到Offer后，会创建answer，并且发送给A端；A端收到answer会触发如下流程"><a href="#2、B端收到Offer后，会创建answer，并且发送给A端；A端收到answer会触发如下流程" class="headerlink" title="2、B端收到Offer后，会创建answer，并且发送给A端；A端收到answer会触发如下流程"></a>2、B端收到Offer后，会创建answer，并且发送给A端；A端收到answer会触发如下流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">// A端收到来自B端的Answer，并进行设置<br>- (void)answer:(NSString *)room message:(NSDictionary *)dict &#123;<br>    NSLog(@&quot;have received a answer message %@&quot;, dict);<br>    <br>    NSString *remoteAnswerSdp = dict[@&quot;sdp&quot;];<br>    RTCSessionDescription *remoteSdp = [[RTCSessionDescription alloc]<br>                                           initWithType:RTCSdpTypeAnswer<br>                                                    sdp: remoteAnswerSdp];<br>    [peerConnection setRemoteDescription:remoteSdp<br>                       completionHandler:^(NSError * _Nullable error) &#123;<br>        if(!error)&#123;<br>            NSLog(@&quot;Success to set remote Answer SDP&quot;);<br>        &#125;else&#123;<br>            NSLog(@&quot;Failure to set remote Answer SDP, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、有另一个设备（设备B）加入房间阶段-快速ICE阶段"><a href="#三、有另一个设备（设备B）加入房间阶段-快速ICE阶段" class="headerlink" title="三、有另一个设备（设备B）加入房间阶段 - 快速ICE阶段"></a>三、有另一个设备（设备B）加入房间阶段 - 快速ICE阶段</h2><h3 id="1、创建peerConnection并且设置ICEServer之后，WebRTC就会去收集本设备的candidate信息，并触发如下回调"><a href="#1、创建peerConnection并且设置ICEServer之后，WebRTC就会去收集本设备的candidate信息，并触发如下回调" class="headerlink" title="1、创建peerConnection并且设置ICEServer之后，WebRTC就会去收集本设备的candidate信息，并触发如下回调"></a>1、创建peerConnection并且设置ICEServer之后，WebRTC就会去收集本设备的candidate信息，并触发如下回调</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/** 默默收集candidate信息，然后通过信令服务器发送给对端 */<br>/** New ice candidate has been found. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didGenerateIceCandidate:(RTCIceCandidate *)candidate&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>    <br>    NSString* weakMyRoom = myRoom;<br>    dispatch_async(dispatch_get_main_queue(), ^&#123;<br>    <br>        NSDictionary* dict = [[NSDictionary alloc] initWithObjects:@[@&quot;candidate&quot;,<br>                                                                [NSString stringWithFormat:@&quot;%d&quot;, candidate.sdpMLineIndex],<br>                                                                candidate.sdpMid,<br>                                                                candidate.sdp]<br>                                                           forKeys:@[@&quot;type&quot;, @&quot;label&quot;, @&quot;id&quot;, @&quot;candidate&quot;]];<br>    <br>        [[SignalClient getInstance] sendMessage: weakMyRoom<br>                                    withMsg:dict];<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、对端收到信令服务器转发而来的candidate，会触发如下操作，完成ICE的candidate交互流程。在所有candidate交互完成后，会自动进入ICE阶段"><a href="#2、对端收到信令服务器转发而来的candidate，会触发如下操作，完成ICE的candidate交互流程。在所有candidate交互完成后，会自动进入ICE阶段" class="headerlink" title="2、对端收到信令服务器转发而来的candidate，会触发如下操作，完成ICE的candidate交互流程。在所有candidate交互完成后，会自动进入ICE阶段"></a>2、对端收到信令服务器转发而来的candidate，会触发如下操作，完成ICE的candidate交互流程。在所有candidate交互完成后，会自动进入ICE阶段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">//收到信令服务器转发而来的candidate<br>- (void)candidate:(NSString *)room message:(NSDictionary *)dict &#123;<br>    NSLog(@&quot;have received a message %@&quot;, dict);<br>    <br>    NSString* desc = dict[@&quot;sdp&quot;];<br>    NSString* sdpMLineIndex = dict[@&quot;label&quot;];<br>    int index = [sdpMLineIndex intValue];<br>    NSString* sdpMid = dict[@&quot;id&quot;];<br>    <br>    <br>    RTCIceCandidate *candidate = [[RTCIceCandidate alloc] initWithSdp:desc<br>                                                        sdpMLineIndex:index<br>                                                               sdpMid:sdpMid];;<br>    [peerConnection addIceCandidate:candidate];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>至此 <code>媒体协商</code> 和 <code>ICE</code> 流程都已经完成</li></ul><h2 id="四、媒体流传输阶段"><a href="#四、媒体流传输阶段" class="headerlink" title="四、媒体流传输阶段"></a>四、媒体流传输阶段</h2><h3 id="1、收到数据流如何展示？"><a href="#1、收到数据流如何展示？" class="headerlink" title="1、收到数据流如何展示？"></a>1、收到数据流如何展示？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">// 创建remoteTrack播放的视图<br>- (void)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    self.remoteVideoView = [[RTCEAGLVideoView alloc] initWithFrame:self.view.bounds];<br>    self.remoteVideoView.delegate = self;<br>    [self.view addSubview:self.remoteVideoView];<br> &#125;<br><br>/** 当接收到远端的数据流时，进行播放 */<br>/** Called when a receiver and its track are created. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>        didAddReceiver:(RTCRtpReceiver *)rtpReceiver<br>               streams:(NSArray&lt;RTCMediaStream *&gt; *)mediaStreams &#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>    <br>    RTCMediaStreamTrack* track = rtpReceiver.track;<br>    if([track.kind isEqualToString:kRTCMediaStreamTrackKindVideo])&#123;<br>        if(!self.remoteVideoView)&#123;<br>            NSLog(@&quot;error:remoteVideoView have not been created!&quot;);<br>            return;<br>        &#125;<br>        <br>        remoteVideoTrack = (RTCVideoTrack*)track;<br>        [remoteVideoTrack addRenderer: self.remoteVideoView];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、核心代码记录"><a href="#五、核心代码记录" class="headerlink" title="五、核心代码记录"></a>五、核心代码记录</h2><h3 id="1、实现一个房间加入的视图"><a href="#1、实现一个房间加入的视图" class="headerlink" title="1、实现一个房间加入的视图"></a>1、实现一个房间加入的视图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">#import &quot;ViewController.h&quot;<br>#import &quot;CallViewController.h&quot;<br>#import &quot;SignalClient.h&quot;<br><br>@interface ViewController ()<br>&#123;<br>    SignalClient *sigclient;<br>&#125;<br><br>@property (strong, nonatomic) UILabel* addrLabel;<br>@property (strong, nonatomic) UITextField* addr;<br><br>@property (strong, nonatomic) UILabel* roomLabel;<br>@property (strong, nonatomic) UITextField* room;<br><br>@property (strong, nonatomic) UIButton* joinBtn;<br><br>@property (strong, nonatomic) CallViewController* call;<br><br>@end<br><br>@implementation ViewController<br><br>- (void)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    // Do any additional setup after loading the view, typically from a nib.<br><br>    CGFloat width = self.view.bounds.size.width;<br>    <br>    self.addrLabel = [[UILabel alloc] init];<br>    [self.addrLabel setText:@&quot;ADDR:&quot;];<br>    [self.addrLabel setFrame:CGRectMake(20, 100, 60, 40)];<br>    [self.view addSubview:self.addrLabel];<br>    <br>    self.addr = [[UITextField alloc] init];<br>    [self.addr setText:@&quot;https://webrtc.runduck.cn&quot;];<br>    [self.addr setFrame:CGRectMake(80, 100, width-100, 40)];<br>    [self.addr setTextColor:[UIColor blackColor]];<br>    [self.addr setBorderStyle:UITextBorderStyleRoundedRect];<br>    [self.addr setEnabled:TRUE];<br>    [self.view addSubview:self.addr];<br>    <br>    self.roomLabel = [[UILabel alloc] init];<br>    [self.roomLabel setText:@&quot;ROOM:&quot;];<br>    [self.roomLabel setFrame:CGRectMake(20, 150, 60, 40)];<br>    [self.view addSubview:self.roomLabel];<br>    <br>    self.room = [[UITextField alloc] init];<br>    [self.room setText:@&quot;123123&quot;];<br>    [self.room setFrame:CGRectMake(80, 150, width-100, 40)];<br>    [self.room setTextColor:[UIColor blackColor]];<br>    [self.room setBorderStyle:UITextBorderStyleRoundedRect];<br>    [self.room setEnabled:TRUE];<br>    [self.view addSubview:self.room];<br>    <br>    self.joinBtn = [[UIButton alloc] init];<br>    [self.joinBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];<br>    [self.joinBtn setTintColor:[UIColor whiteColor]];<br>    [self.joinBtn setTitle:@&quot;join&quot; forState:UIControlStateNormal];<br>    [self.joinBtn setBackgroundColor:[UIColor grayColor]];<br>    [self.joinBtn setShowsTouchWhenHighlighted:YES];<br>    [self.joinBtn setFrame:CGRectMake(40, 200, width-80, 40)];<br>    <br>    [self.joinBtn addTarget:self action:@selector(btnClick:) forControlEvents:UIControlEventTouchUpInside];<br>    <br>    [self.view addSubview:self.joinBtn];<br>&#125;<br><br>/** 点击空白处回收键盘 */<br>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches   withEvent:(UIEvent *)event<br>&#123;<br>    [self.view endEditing:YES];<br>&#125;<br><br>- (void)btnClick:(UIButton*)sender&#123;<br>    NSLog(@&quot;on click!&quot;);<br><br>    self.call = [[CallViewController alloc] initAddr:self.addr.text withRoom: self.room.text];<br>    [self.call.view setFrame:self.view.bounds];<br>    [self.call.view setBackgroundColor:[UIColor whiteColor]];<br><br>    [self addChildViewController:self.call];<br>    [self.call didMoveToParentViewController:self];<br>    <br>    [self.view addSubview:self.call.view];<br>    <br>    [[SignalClient getInstance] createConnect: self.addr.text];<br>&#125;<br><br>#pragma mark protocal EventNotify<br>- (void) leave &#123;<br>//    [self.view removeFromSuperview];<br>    <br>&#125;<br><br><br>@end<br></code></pre></td></tr></table></figure><h3 id="2、信令服务器相关代码"><a href="#2、信令服务器相关代码" class="headerlink" title="2、信令服务器相关代码"></a>2、信令服务器相关代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">#import &quot;SignalClient.h&quot;<br>@import SocketIO;<br><br>@interface SignalClient()<br>&#123;<br>    <br>    SocketManager* manager;<br>    SocketIOClient* socket;<br>    <br>    NSString* room;<br>&#125;<br><br>@end<br><br>@implementation SignalClient<br><br>static SignalClient* m_instance = nil;<br><br>+ (SignalClient*) getInstance &#123;<br>    <br>    static dispatch_once_t onceToken;<br>    dispatch_once(&amp;onceToken, ^&#123;<br>        m_instance = [[self alloc]init];<br>    &#125;);<br>    <br>    return m_instance;<br>&#125;<br><br>- (void) createConnect: (NSString*) addr &#123;<br>    NSLog(@&quot;the server addr is %@&quot;, addr);<br>    /*<br>     log 是否打印日志<br>     forcePolling  是否强制使用轮询<br>     reconnectAttempts 重连次数，-1表示一直重连<br>     reconnectWait 重连间隔时间<br>     forceWebsockets 是否强制使用websocket<br>     */<br>    NSURL* url = [[NSURL alloc] initWithString:addr];<br>    manager = [[SocketManager alloc] initWithSocketURL:url<br>                                                config:@&#123;@&quot;log&quot;: @YES,<br>                                                         @&quot;forcePolling&quot;:@YES,<br>                                                         @&quot;forceWebsockets&quot;:@NO,<br>                                                         @&quot;reconnectAttempts&quot;:@(5),<br>                                                         @&quot;reconnectWait&quot;:@(1)<br>                                                         &#125;];<br>    socket = manager.defaultSocket;<br>//    socket = [manager socketForNamespace:@&quot;/socket.io&quot;];<br>    <br>//    socket = [manager socketForNamespace:@&quot;&quot;];<br>    <br>    [socket on:@&quot;connect&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket connected&quot;);<br>        [self.delegate connected];<br>    &#125;];<br>    <br>    [socket on:@&quot;error&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket connect_error&quot;);<br>        [self.delegate connect_error];<br>    &#125;];<br>    <br>    [socket on:@&quot;reconnectAttempt&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>        NSLog(@&quot;socket reconnectAttempt&quot;);<br>        [self.delegate reconnectAttempt];<br>    &#125;];<br>    //    [socket on:@&quot;currentAmount&quot; callback:^(NSArray* data, SocketAckEmitter* ack) &#123;<br>    //        double cur = [[data objectAtIndex:0] floatValue];<br>    //<br>    //        [[socket emitWithAck:@&quot;canUpdate&quot; with:@[@(cur)]] timingOutAfter:0 callback:^(NSArray* data) &#123;<br>    //            [socket emit:@&quot;update&quot; with:@[@&#123;@&quot;amount&quot;: @(cur + 2.50)&#125;]];<br>    //        &#125;];<br>    //<br>    //        [ack with:@[@&quot;Got your currentAmount, &quot;, @&quot;dude&quot;]];<br>    //    &#125;];<br>    <br>    [socket on:@&quot;joined&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;joined room(%@)&quot;, room);<br>        <br>        [self.delegate joined:room];<br>        <br>    &#125;];<br>    <br>    [socket on:@&quot;leaved&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;leaved room(%@)&quot;, room);<br>        <br>        [self.delegate leaved:room];<br>    &#125;];<br>    <br>    [socket on:@&quot;full&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        <br>        NSLog(@&quot;room(%@) is full&quot;, room);<br>        [self.delegate full:room];<br>    &#125;];<br>    <br>    [socket on:@&quot;otherjoin&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSString* uid = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;other user(%@) has been joined into room(%@)&quot;, room, uid);<br>        [self.delegate otherjoin:room User:uid];<br>    &#125;];<br>    <br>    [socket on:@&quot;bye&quot; callback:^(NSArray * data, SocketAckEmitter * ack) &#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSString* uid = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;user(%@) has leaved from room(%@)&quot;, room, uid);<br>        [self.delegate byeFrom:room User:uid];<br>    &#125;];<br>    <br>    [socket on:@&quot;message&quot; callback:^(NSArray * data, SocketAckEmitter * ack)&#123;<br>        NSString* room = [data objectAtIndex:0];<br>        NSDictionary* msg = [data objectAtIndex:1];<br>        <br>        NSLog(@&quot;onMessage, room(%@), data(%@)&quot;, room, msg);<br>        <br>        NSString* type = msg[@&quot;type&quot;];<br>        if( [type isEqualToString:@&quot;offer&quot;])&#123;<br>            [self.delegate offer: room message: msg];<br>        &#125;else if( [type isEqualToString:@&quot;answer&quot;])&#123;<br>            [self.delegate answer:room message: msg];<br>        &#125;else if( [type isEqualToString:@&quot;candidate&quot;])&#123;<br>            [self.delegate candidate:room message: msg];<br>        &#125;else &#123;<br>            NSLog(@&quot;the msg is invalid!&quot;);<br>        &#125;<br>    &#125;];<br>    <br>    // 连接超时时间设置为3秒<br>    [socket connectWithTimeoutAfter: 3.0 withHandler:^(void)&#123;<br>        NSLog(@&quot;socket connect_timeout 3.0s&quot;);<br>        [self.delegate connect_timeout];<br>    &#125;];<br>&#125;<br><br>- (void) joinRoom:(NSString*) room &#123;<br>    NSLog(@&quot;join room(%@)&quot;, room);<br>    <br>    if(socket.status == SocketIOStatusConnected)&#123;<br>        [socket emit:@&quot;join&quot; with:@[room]];<br>    &#125;<br>&#125;<br><br>- (void) leaveRoom:(NSString*) room &#123;<br>    NSLog(@&quot;leave room(%@)&quot;, room);<br>    <br>    if(socket.status == SocketIOStatusConnected)&#123;<br>        [socket emit:@&quot;leave&quot; with:@[room]];<br>    &#125;<br>&#125;<br><br>- (void) sendMessage: (NSString*) room withMsg:(NSDictionary*) msg &#123;<br>    if(socket.status == SocketIOStatusConnected) &#123;<br>        if(msg)&#123;<br>            NSLog(@&quot;json:%@&quot;, msg);<br>            [socket emit:@&quot;message&quot; with:@[room, msg]];<br>        &#125;else&#123;<br>            NSLog(@&quot;error: msg is nil!&quot;);<br>        &#125;<br>        <br>    &#125; else &#123;<br>        NSLog(@&quot;the socket has been disconnect!&quot;);<br>    &#125;<br>&#125;<br><br>@end<br><br></code></pre></td></tr></table></figure><h3 id="3、WebRTC相关代码"><a href="#3、WebRTC相关代码" class="headerlink" title="3、WebRTC相关代码"></a>3、WebRTC相关代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">#import &quot;CallViewController.h&quot;<br>#import &quot;SignalClient.h&quot;<br><br>#import &lt;WebRTC/WebRTC.h&gt;<br>#import &lt;MBProgressHUD/MBProgressHUD.h&gt;<br><br>@interface CallViewController() &lt;SignalEventNotify, RTCPeerConnectionDelegate, RTCVideoViewDelegate&gt;<br>&#123;<br>    <br>    NSString* myAddr;<br>    NSString* myRoom;<br>    <br>    NSString* myState;<br>    <br>    SignalClient* sigclient;<br>    <br>    RTCPeerConnectionFactory* factory;<br>    RTCCameraVideoCapturer* capture;<br>    //RTCMediaStream* localStream; //???<br>    RTCPeerConnection* peerConnection;<br>    <br>    RTCVideoTrack* videoTrack;<br>    RTCAudioTrack* audioTrack;<br>    <br>    RTCVideoTrack* remoteVideoTrack;<br>    CGSize remoteVideoSize;<br>    <br>    NSMutableArray* ICEServers;<br><br>&#125;<br><br>@property (strong, nonatomic) RTCEAGLVideoView *remoteVideoView;<br>@property (strong, nonatomic) RTCCameraPreviewView *localVideoView;<br><br>@property (strong, nonatomic) UIButton* leaveBtn;<br><br><br>@property (strong, nonatomic) dispatch_source_t timer;<br><br>@end<br><br>@implementation CallViewController<br><br>static CGFloat const kLocalVideoViewSize = 120;<br>static CGFloat const kLocalVideoViewPadding = 8;<br><br>//static NSString *const RTCSTUNServerURL = @&quot;stun:stun.l.google.com:19302&quot;;<br>//static NSString *const RTCSTUNServerURL = @&quot;turn:xxx.xxx.xxx:3478&quot;;<br>static NSString *const RTCSTUNServerURL = @&quot;turn:47.95.15.179:3478&quot;;<br>static int logY = 0;<br><br><br><br>- (instancetype) initAddr:(NSString*) addr withRoom:(NSString*) room &#123;<br>    self = [super init];<br>    if (self) &#123;<br>        myAddr = addr;<br>        myRoom = room;<br>    &#125;<br>    return self;<br>&#125;<br><br>- (void)viewDidLoad &#123;<br>    [super viewDidLoad];<br>    logY = 0;<br>    CGRect bounds = self.view.bounds;<br>    <br>    self.remoteVideoView = [[RTCEAGLVideoView alloc] initWithFrame:self.view.bounds];<br>    self.remoteVideoView.delegate = self;<br>    //[self.remoteVideoView set]<br>    //[self.remoteVideoView setBackgroundColor:[UIColor yellowColor]];<br>    [self.view addSubview:self.remoteVideoView];<br>    <br>    self.localVideoView = [[RTCCameraPreviewView alloc] initWithFrame:CGRectZero];<br>    [self.view addSubview:self.localVideoView];<br>    <br>    // Aspect fit local video view into a square box.<br>    CGRect localVideoFrame =<br>    CGRectMake(0, 0, kLocalVideoViewSize, kLocalVideoViewSize);<br>    // Place the view in the bottom right.<br>    localVideoFrame.origin.x = CGRectGetMaxX(bounds)<br>    - localVideoFrame.size.width - kLocalVideoViewPadding;<br>    localVideoFrame.origin.y = CGRectGetMaxY(bounds)<br>    - localVideoFrame.size.height - kLocalVideoViewPadding;<br>    [self.localVideoView setFrame: localVideoFrame];<br><br>    self.leaveBtn = [[UIButton alloc] init];<br>    [self.leaveBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];<br>    [self.leaveBtn setTintColor:[UIColor whiteColor]];<br>    [self.leaveBtn setTitle:@&quot;leave&quot; forState:UIControlStateNormal];<br>    [self.leaveBtn setBackgroundColor:[UIColor greenColor]];<br>    [self.leaveBtn setShowsTouchWhenHighlighted:YES];<br>    [self.leaveBtn.layer setCornerRadius:40];<br>    [self.leaveBtn.layer setBorderWidth:1];<br>    [self.leaveBtn setClipsToBounds:FALSE];<br>    [self.leaveBtn setFrame:CGRectMake(self.view.bounds.size.width/2-40,<br>                                       self.view.bounds.size.height-140,<br>                                       80,<br>                                       80)];<br>    <br>    [self.leaveBtn addTarget:self<br>                      action:@selector(leaveRoom:)<br>            forControlEvents:UIControlEventTouchUpInside];<br>    <br>    [self.view addSubview:self.leaveBtn];<br>    <br>    [self createPeerConnectionFactory];<br>    <br>    //[self startTimer];<br>    <br>    //创建本地流<br>    [self captureLocalMedia];<br><br>    sigclient = [SignalClient getInstance];<br>    sigclient.delegate = self;<br>    ////[sigclient createConnect:myAddr];<br>    <br>    myState = @&quot;init&quot;;<br>    <br>&#125;<br><br>-(void)addLogToScreen:(NSString *)format, ...&#123;<br>    <br>    va_list paramList;<br>    va_start(paramList,format);<br>    NSString* log = [[NSString alloc]initWithFormat:format arguments:paramList];<br>    va_end(paramList);<br>    <br>    CGRect labelRect = CGRectMake(0, logY++ * 20, 500, 200);<br>    UILabel *label = [[UILabel alloc] initWithFrame:labelRect];<br>    label.text = log;<br>    label.textColor = [UIColor redColor];<br>    [self.view addSubview:label];<br>&#125;<br><br>//- (void) startTimer &#123;<br>//    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);<br>//    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);<br>//    self.timer = timer;<br>//    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 200 * NSEC_PER_SEC, 0 * NSEC_PER_SEC);<br>//<br>//    __weak NSString* weakMyState = myState;<br>//    __weak NSString* weakMyRoom = myRoom;<br>//    dispatch_source_set_event_handler(timer, ^&#123;<br>//<br>//        dispatch_<br>//<br>//        if([weakMyState isEqualToString:@&quot;init&quot;]) &#123;<br>//            NSLog(@&quot;%@&quot;,[NSThread currentThread]);<br>//            [[SignalClient getInstance] joinRoom:weakMyRoom];<br>//        &#125;else &#123;<br>//            [timer ]<br>//        &#125;<br>//    &#125;);<br>//    dispatch_resume(timer);<br>//&#125;<br><br>- (void)layoutSubviews &#123;<br>    CGRect bounds = self.view.bounds;<br>    if (remoteVideoSize.width &gt; 0 &amp;&amp; remoteVideoSize.height &gt; 0) &#123;<br>        // Aspect fill remote video into bounds.<br>        CGRect remoteVideoFrame =<br>        AVMakeRectWithAspectRatioInsideRect(remoteVideoSize, bounds);<br>        CGFloat scale = 1;<br>        if (remoteVideoFrame.size.width &gt; remoteVideoFrame.size.height) &#123;<br>            // Scale by height.<br>            scale = bounds.size.height / remoteVideoFrame.size.height;<br>        &#125; else &#123;<br>            // Scale by width.<br>            scale = bounds.size.width / remoteVideoFrame.size.width;<br>        &#125;<br>        remoteVideoFrame.size.height *= scale;<br>        remoteVideoFrame.size.width *= scale;<br>        self.remoteVideoView.frame = remoteVideoFrame;<br>        self.remoteVideoView.center =<br>        CGPointMake(CGRectGetMidX(bounds), CGRectGetMidY(bounds));<br>    &#125; else &#123;<br>        self.remoteVideoView.frame = bounds;<br>    &#125;<br><br>&#125;<br><br>- (void) leaveRoom:(UIButton*) sender &#123;<br>   <br>    [self willMoveToParentViewController:nil];<br>    [self.view removeFromSuperview];<br>    [self removeFromParentViewController];<br>    <br>    if (!sigclient) &#123;<br>        sigclient = [SignalClient getInstance];<br>    &#125;<br>    <br>    if(![myState isEqualToString:@&quot;leaved&quot;])&#123;<br>        [sigclient leaveRoom: myRoom];<br>    &#125;<br>    <br>    if(peerConnection)&#123;<br>        [peerConnection close];<br>        peerConnection = nil;<br>    &#125;<br>    <br>    NSLog(@&quot;leave room(%@)&quot;, myRoom);<br>    [self addLogToScreen: @&quot;leave room(%@)&quot;, myRoom];<br>&#125;<br><br>#pragma mark - SignalEventNotify<br><br>- (void) leaved:(NSString *)room &#123;<br>    NSLog(@&quot;leaved room(%@) notify!&quot;, room);<br>    [self addLogToScreen: @&quot;leaved room(%@) notify!&quot;, room];<br>&#125;<br><br>- (void) joined:(NSString *)room &#123;<br>    NSLog(@&quot;joined room(%@) notify!&quot;, room);<br>    [self addLogToScreen: @&quot;joined room(%@) notify!&quot;, room];<br>    <br>    myState = @&quot;joined&quot;;<br>    <br>    //这里应该创建PeerConnection<br>    if (!peerConnection) &#123;<br>        peerConnection = [self createPeerConnection];<br>    &#125;<br>&#125;<br><br>- (void) otherjoin:(NSString *)room User:(NSString *)uid &#123;<br>    NSLog(@&quot;other user(%@) has been joined into room(%@) notify!&quot;, uid, room);<br>    [self addLogToScreen: @&quot;other user(%@) has been joined into room(%@) notify!&quot;, uid, room];<br>    if([myState isEqualToString:@&quot;joined_unbind&quot;])&#123;<br>        if (!peerConnection) &#123;<br>            peerConnection = [self createPeerConnection];<br>        &#125;<br>    &#125;<br>    <br>    myState =@&quot;joined_conn&quot;;<br>    //调用call， 进行媒体协商<br>    [self doStartCall];<br>    <br>&#125;<br><br>- (void) full:(NSString *)room &#123;<br>    NSLog(@&quot;the room(%@) is full notify!&quot;, room);<br>    [self addLogToScreen: @&quot;the room(%@) is full notify!&quot;, room];<br>    myState = @&quot;leaved&quot;;<br>    <br>    if(peerConnection) &#123;<br>        [peerConnection close];<br>        peerConnection = nil;<br>    &#125;<br>    <br>    //弹出提醒添加成功<br>    MBProgressHUD *hud= [[MBProgressHUD alloc] initWithView:self.view];<br>    [hud setRemoveFromSuperViewOnHide:YES];<br>    hud.label.text = @&quot;房间已满&quot;;<br>    UIView* view = [[UIView alloc] initWithFrame:CGRectMake(0,0, 50, 50)];<br>    [hud setCustomView:view];<br>    [hud setMode:MBProgressHUDModeCustomView];<br>    [self.view addSubview:hud];<br>    [hud showAnimated:YES];<br>    [hud hideAnimated:YES afterDelay:1.0]; //设置1秒钟后自动消失<br>    <br>    if(self.localVideoView) &#123;<br>        //[self.localVideoView removeFromSuperview];<br>        //self.localVideoView = nil;<br>    &#125;<br>    <br>    if(self.remoteVideoView) &#123;<br>        //[self.localVideoView removeFromSuperview];<br>        //self.remoteVideoView = nil;<br>    &#125;<br>    <br>    if(capture) &#123;<br>        [capture stopCapture];<br>        capture = nil;<br>    &#125;<br>    <br>    if(factory) &#123;<br>        factory = nil;<br>    &#125;<br>&#125;<br><br>- (void) byeFrom:(NSString *)room User:(NSString *)uid &#123;<br>    NSLog(@&quot;the user(%@) has leaved from room(%@) notify!&quot;, uid, room);<br>    [self addLogToScreen: @&quot;the user(%@) has leaved from room(%@) notify!&quot;, uid, room];<br>    myState = @&quot;joined_unbind&quot;;<br>    <br>    [peerConnection close];<br>    peerConnection = nil;<br>    <br>&#125;<br><br>- (void)answer:(NSString *)room message:(NSDictionary *)dict &#123;<br>    NSLog(@&quot;have received a answer message %@&quot;, dict);<br>    <br>    NSString *remoteAnswerSdp = dict[@&quot;sdp&quot;];<br>    RTCSessionDescription *remoteSdp = [[RTCSessionDescription alloc]<br>                                           initWithType:RTCSdpTypeAnswer<br>                                                    sdp: remoteAnswerSdp];<br>    [peerConnection setRemoteDescription:remoteSdp<br>                       completionHandler:^(NSError * _Nullable error) &#123;<br>        if(!error)&#123;<br>            NSLog(@&quot;Success to set remote Answer SDP&quot;);<br>        &#125;else&#123;<br>            NSLog(@&quot;Failure to set remote Answer SDP, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>&#125;<br><br>- (void) setLocalAnswer: (RTCPeerConnection*)pc withSdp: (RTCSessionDescription*)sdp &#123;<br>    <br>    [pc setLocalDescription:sdp completionHandler:^(NSError * _Nullable error) &#123;<br>        if(!error)&#123;<br>            NSLog(@&quot;Successed to set local answer!&quot;);<br>        &#125;else &#123;<br>            NSLog(@&quot;Failed to set local answer, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>    <br>    __weak NSString* weakMyRoom = myRoom;<br>    dispatch_async(dispatch_get_main_queue(), ^&#123;<br>        <br>        //send answer sdp<br>        NSDictionary* dict = [[NSDictionary alloc] initWithObjects:@[@&quot;answer&quot;, sdp.sdp]<br>                                                           forKeys: @[@&quot;type&quot;, @&quot;sdp&quot;]];<br>        <br>        [[SignalClient getInstance] sendMessage: weakMyRoom withMsg:dict];<br>    &#125;);<br>&#125;<br><br>- (void) getAnswer:(RTCPeerConnection*) pc &#123;<br>    <br>    NSLog(@&quot;Success to set remote offer SDP&quot;);<br>    <br>    [pc answerForConstraints:[self defaultPeerConnContraints]<br>                           completionHandler:^(RTCSessionDescription * _Nullable sdp, NSError * _Nullable error) &#123;<br>                               if(!error)&#123;<br>                                   NSLog(@&quot;Success to create local answer sdp!&quot;);<br>                                   __weak RTCPeerConnection* weakPeerConn = pc;<br>                                   [self setLocalAnswer:weakPeerConn withSdp:sdp];<br>                                   <br>                               &#125;else&#123;<br>                                   NSLog(@&quot;Failure to create local answer sdp!&quot;);<br>                               &#125;<br>                           &#125;];<br>&#125;<br><br>- (void) offer:(NSString *)room message:(NSDictionary *)dict &#123;<br>    NSLog(@&quot;have received a offer message %@&quot;, dict);<br>    <br>    NSString* remoteOfferSdp = dict[@&quot;sdp&quot;];<br>    RTCSessionDescription* remoteSdp = [[RTCSessionDescription alloc]<br>                                        initWithType:RTCSdpTypeOffer<br>                                        sdp: remoteOfferSdp];<br>    if(!peerConnection)&#123;<br>        peerConnection = [self createPeerConnection];<br>    &#125;<br>    <br>     __weak RTCPeerConnection* weakPeerConnection = peerConnection;<br>    [weakPeerConnection setRemoteDescription:remoteSdp completionHandler:^(NSError * _Nullable error) &#123;<br>        if(!error)&#123;<br>            [self getAnswer: weakPeerConnection];<br>        &#125;else&#123;<br>            NSLog(@&quot;Failure to set remote offer SDP, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>&#125;<br><br>- (void)candidate:(NSString *)room message:(NSDictionary *)dict &#123;<br>    NSLog(@&quot;have received a message %@&quot;, dict);<br>    <br>    NSString* desc = dict[@&quot;sdp&quot;];<br>    NSString* sdpMLineIndex = dict[@&quot;label&quot;];<br>    int index = [sdpMLineIndex intValue];<br>    NSString* sdpMid = dict[@&quot;id&quot;];<br>    <br>    <br>    RTCIceCandidate *candidate = [[RTCIceCandidate alloc] initWithSdp:desc<br>                                                        sdpMLineIndex:index<br>                                                               sdpMid:sdpMid];;<br>    [peerConnection addIceCandidate:candidate];<br>&#125;<br><br>- (void)connected &#123;<br>    [[SignalClient getInstance]  joinRoom: myRoom];<br>    [self addLogToScreen: @&quot;socket connect success!&quot;];<br>    [self addLogToScreen: @&quot;joinRoom: %@&quot;, myRoom];<br>    <br><br>&#125;<br><br>- (void)connect_error &#123;<br>    //todo: notfiy UI<br>    [self addLogToScreen: @&quot;socket connect_error!&quot;];<br>&#125;<br><br>- (void)connect_timeout &#123;<br>    //todo: notfiy UI<br>    [self addLogToScreen: @&quot;socket connect_timeout!&quot;];<br>&#125;<br><br>- (void) reconnectAttempt&#123;<br>    [self addLogToScreen: @&quot;socket reconnectAttempt!&quot;];<br>&#125;<br>#pragma mark RTCPeerConnectionDelegate<br><br>/** Called when the SignalingState changed. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didChangeSignalingState:(RTCSignalingState)stateChanged&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called when media is received on a new stream from remote peer. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection didAddStream:(RTCMediaStream *)stream&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called when a remote peer closes a stream.<br> *  This is not called when RTCSdpSemanticsUnifiedPlan is specified.<br> */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection didRemoveStream:(RTCMediaStream *)stream&#123;<br>     NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called when negotiation is needed, for example ICE has restarted. */<br>- (void)peerConnectionShouldNegotiate:(RTCPeerConnection *)peerConnection &#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called any time the IceConnectionState changes. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didChangeIceConnectionState:(RTCIceConnectionState)newState&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called any time the IceGatheringState changes. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didChangeIceGatheringState:(RTCIceGatheringState)newState&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** New ice candidate has been found. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didGenerateIceCandidate:(RTCIceCandidate *)candidate&#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>    <br>    NSString* weakMyRoom = myRoom;<br>    dispatch_async(dispatch_get_main_queue(), ^&#123;<br>    <br>        NSDictionary* dict = [[NSDictionary alloc] initWithObjects:@[@&quot;candidate&quot;,<br>                                                                [NSString stringWithFormat:@&quot;%d&quot;, candidate.sdpMLineIndex],<br>                                                                candidate.sdpMid,<br>                                                                candidate.sdp]<br>                                                           forKeys:@[@&quot;type&quot;, @&quot;label&quot;, @&quot;id&quot;, @&quot;candidate&quot;]];<br>    <br>        [[SignalClient getInstance] sendMessage: weakMyRoom<br>                                    withMsg:dict];<br>    &#125;);<br>&#125;<br><br>/** Called when a group of local Ice candidates have been removed. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>didRemoveIceCandidates:(NSArray&lt;RTCIceCandidate *&gt; *)candidates &#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** New data channel has been opened. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>    didOpenDataChannel:(RTCDataChannel *)dataChannel &#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>&#125;<br><br>/** Called when a receiver and its track are created. */<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>        didAddReceiver:(RTCRtpReceiver *)rtpReceiver<br>               streams:(NSArray&lt;RTCMediaStream *&gt; *)mediaStreams &#123;<br>    NSLog(@&quot;%s&quot;,__func__);<br>    <br>    RTCMediaStreamTrack* track = rtpReceiver.track;<br>    if([track.kind isEqualToString:kRTCMediaStreamTrackKindVideo])&#123;<br>        if(!self.remoteVideoView)&#123;<br>            NSLog(@&quot;error:remoteVideoView have not been created!&quot;);<br>            return;<br>        &#125;<br>        <br>        remoteVideoTrack = (RTCVideoTrack*)track;<br>        <br>        //dispatch_async(dispatch_get_main_queue(), ^&#123;<br><br>            [remoteVideoTrack addRenderer: self.remoteVideoView];<br>        //&#125;);<br>        //[remoteVideoTrack setIsEnabled:true];<br>        <br>        //[self.view addSubview:self.remoteVideoView];<br>    &#125;<br>    <br>&#125;<br><br>#pragma mark webrtc<br><br><br>- (RTCMediaConstraints*) defaultPeerConnContraints &#123;<br>    RTCMediaConstraints* mediaConstraints =<br>    [[RTCMediaConstraints alloc] initWithMandatoryConstraints:@&#123;<br>                                                                kRTCMediaConstraintsOfferToReceiveAudio:kRTCMediaConstraintsValueTrue,<br>                                                                kRTCMediaConstraintsOfferToReceiveVideo:kRTCMediaConstraintsValueTrue<br>                                                                &#125;<br>                                          optionalConstraints:@&#123; @&quot;DtlsSrtpKeyAgreement&quot; : @&quot;true&quot; &#125;];<br>    return mediaConstraints;<br>&#125;<br><br><br>- (void)captureLocalMedia &#123;<br>    NSDictionary* mandatoryConstraints = @&#123;&#125;;<br>    RTCMediaConstraints* constraints =<br>    [[RTCMediaConstraints alloc] initWithMandatoryConstraints:mandatoryConstraints<br>                                          optionalConstraints:nil];<br>    <br>    RTCAudioSource* audioSource = [factory audioSourceWithConstraints: constraints];<br>    //self.audioTrack = [factory audioTrackWithTrackId:@&quot;ARDAMSa0&quot;];<br>    audioTrack = [factory audioTrackWithSource:audioSource trackId:@&quot;ADRAMSa0&quot;];<br>    <br>    NSArray&lt;AVCaptureDevice* &gt;* captureDevices = [RTCCameraVideoCapturer captureDevices];<br>    AVCaptureDevicePosition position = AVCaptureDevicePositionFront;<br>    AVCaptureDevice* device = captureDevices[0];<br>    for (AVCaptureDevice* obj in captureDevices) &#123;<br>        if (obj.position == position) &#123;<br>            device = obj;<br>            break;<br>        &#125;<br>    &#125;<br>    <br>    //检测摄像头权限<br>    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];<br>    if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied) &#123;<br>        NSLog(@&quot;相机访问受限&quot;);<br>        return;<br>    &#125;<br>    <br>    if (device) &#123;<br>        RTCVideoSource* videoSource = [factory videoSource];<br>        capture = [[RTCCameraVideoCapturer alloc] initWithDelegate:videoSource];<br>        AVCaptureDeviceFormat* format = [[RTCCameraVideoCapturer supportedFormatsForDevice:device] lastObject];<br>        CGFloat fps = [[format videoSupportedFrameRateRanges] firstObject].maxFrameRate;<br>        videoTrack = [factory videoTrackWithSource:videoSource trackId:@&quot;ARDAMSv0&quot;];<br>        self.localVideoView.captureSession = capture.captureSession;<br>        [capture startCaptureWithDevice:device<br>                                     format:format<br>                                        fps:fps];<br>        <br>    &#125;<br>&#125;<br><br>//初始化STUN Server （ICE Server）<br>- (RTCIceServer *)defaultSTUNServer &#123;<br>    return [[RTCIceServer alloc] initWithURLStrings:@[RTCSTUNServerURL]<br>                                           username:@&quot;carrot&quot;<br>                                         credential:@&quot;123456&quot;];<br>&#125;<br><br>- (void)createPeerConnectionFactory &#123;<br>    //设置SSL传输<br>    [RTCPeerConnectionFactory initialize];<br>    <br>    //如果点对点工厂为空<br>    if (!factory)<br>    &#123;<br>        RTCDefaultVideoDecoderFactory* decoderFactory = [[RTCDefaultVideoDecoderFactory alloc] init];<br>        RTCDefaultVideoEncoderFactory* encoderFactory = [[RTCDefaultVideoEncoderFactory alloc] init];<br>        NSArray* codecs = [encoderFactory supportedCodecs];<br>        [encoderFactory setPreferredCodec:codecs[2]];<br>        <br>        factory = [[RTCPeerConnectionFactory alloc] initWithEncoderFactory: encoderFactory<br>                                                            decoderFactory: decoderFactory];<br>    &#125;<br>&#125;<br><br>- (RTCPeerConnection *)createPeerConnection &#123;<br>    //得到ICEServer<br>    if (!ICEServers) &#123;<br>        ICEServers = [NSMutableArray array];<br>        [ICEServers addObject:[self defaultSTUNServer]];<br>    &#125;<br><br>    //用工厂来创建连接<br>    RTCConfiguration* configuration = [[RTCConfiguration alloc] init];<br>    [configuration setIceServers:ICEServers];<br>    RTCPeerConnection* conn = [factory<br>                                     peerConnectionWithConfiguration:configuration<br>                                                         constraints:[self defaultPeerConnContraints]<br>                                                            delegate:self];<br>    <br>    NSArray&lt;NSString*&gt;* mediaStreamLabels = @[@&quot;ARDAMS&quot;];<br>    [conn addTrack:videoTrack streamIds:mediaStreamLabels];<br>    [conn addTrack:audioTrack streamIds:mediaStreamLabels];<br><br>    return conn;<br>&#125;<br><br>- (void)setLocalOffer:(RTCPeerConnection*)pc withSdp:(RTCSessionDescription*) sdp&#123;<br>    <br>    [pc setLocalDescription:sdp completionHandler:^(NSError * _Nullable error) &#123;<br>        if (!error) &#123;<br>            NSLog(@&quot;Successed to set local offer sdp!&quot;);<br>        &#125;else&#123;<br>            NSLog(@&quot;Failed to set local offer sdp, err=%@&quot;, error);<br>        &#125;<br>    &#125;];<br>    <br>    __weak NSString* weakMyRoom = myRoom;<br>    dispatch_async(dispatch_get_main_queue(), ^&#123;<br>        <br>        NSDictionary* dict = [[NSDictionary alloc] initWithObjects:@[@&quot;offer&quot;, sdp.sdp]<br>                                                           forKeys: @[@&quot;type&quot;, @&quot;sdp&quot;]];<br>        <br>        [[SignalClient getInstance] sendMessage: weakMyRoom<br>                                        withMsg: dict];<br>    &#125;);<br>&#125;<br><br>- (void)doStartCall &#123;<br>    NSLog(@&quot;Start Call, Wait ...&quot;);<br>    [self addLogToScreen: @&quot;Start Call, Wait ...&quot;];<br>    if (!peerConnection) &#123;<br>        peerConnection = [self createPeerConnection];<br>    &#125;<br>    <br>    [peerConnection offerForConstraints:[self defaultPeerConnContraints]<br>                      completionHandler:^(RTCSessionDescription * _Nullable sdp, NSError * _Nullable error) &#123;<br>                          if(error)&#123;<br>                              NSLog(@&quot;Failed to create offer SDP, err=%@&quot;, error);<br>                          &#125; else &#123;<br>                              __weak RTCPeerConnection* weakPeerConnction = self-&gt;peerConnection;<br>                              [self setLocalOffer: weakPeerConnction withSdp: sdp];<br>                          &#125;<br>                      &#125;];<br>&#125;<br><br>#pragma mark - RTCEAGLVideoViewDelegate<br>- (void)videoView:(RTCEAGLVideoView*)videoView didChangeVideoSize:(CGSize)size &#123;<br>    if (videoView == self.remoteVideoView) &#123;<br>        remoteVideoSize = size;<br>    &#125;<br>    [self layoutSubviews];<br>&#125;<br><br>@end<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-coTurn服务器搭建</title>
    <link href="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、阿里云服务器环境搭建"><a href="#一、阿里云服务器环境搭建" class="headerlink" title="一、阿里云服务器环境搭建"></a>一、阿里云服务器环境搭建</h1><p><strong>前言：</strong></p><p><strong>涉及WebRTC内容，绕不开搭建ICE服务器，网上搜索教程无数，没有一个能从头到尾顺利搭建成功，网页开了无数个，进度却原地踏步，欲哭无泪。跟着网上的教程，大多会卡在turnserver.conf配置文件的编辑上，错误的配置文件往往会导致服务器开启失败。</strong></p><p><strong>总结一份服务器安装步骤，故在此留档，以利后人！</strong></p><p><strong>如果你卡在配置文件这一块，请直接跳到第三部分，如果你进度颇浅，直接按照我的步骤来一遍吧，让你感到无比丝滑。</strong></p><p><strong>另外，要注意的是，在本地的虚拟机上搭建coturn服务器是行不通的，必须要在公网服务器上搭建。</strong></p><h4 id="1、准备步骤"><a href="#1、准备步骤" class="headerlink" title="1、准备步骤"></a>1、准备步骤</h4><p>准备一台阿里云服务器 系统为 linux centos7.4 打开3478端口，以及一些必要的端口</p><p>阿里云服务器公网地址：<code>120.77.170.59</code>  内网地址：<code>172.30.124.174</code></p><p>主机名称随便取，主机是公网ip地址，端口随便选择，但要在阿里云控制台开放该端口，如果没有登陆上，就去网页端的阿里云服务器先登录一遍。）</p><p>首先安装各种依赖和软件</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript">yum install git<br>yum install gcc<br>yum install gcc-c++<br>yum install openssl<br>yum install openssl-devel<br>yum install libevent-devel<br></code></pre></td></tr></table></figure><p>遇到的所有选项都选y，一路y下去，</p><p>安装完毕后</p><h3 id="2、手动下载并安装-libevent2"><a href="#2、手动下载并安装-libevent2" class="headerlink" title="2、手动下载并安装 libevent2"></a>2、手动下载并安装 <code>libevent2</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz<br>tar zxvf libevent-2.0.21-stable.tar.gz<br>cd libevent-2.0.21-stable &amp;&amp; ./configure<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="二、Coturn服务器搭建步骤"><a href="#二、Coturn服务器搭建步骤" class="headerlink" title="二、Coturn服务器搭建步骤"></a>二、Coturn服务器搭建步骤</h2><h3 id="1、下载并安装-coturn"><a href="#1、下载并安装-coturn" class="headerlink" title="1、下载并安装 coturn"></a>1、下载并安装 coturn</h3><p>准备安装coturn包。注意，不要直接git clone coturn，会出现编译错误</p><p>此处安装稳定的版本，下载压缩包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wget <span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/coturn/coturn/archive/4.5.1.1.tar.gz</span><br></code></pre></td></tr></table></figure><p>然后进行解压，编译，依次执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tar -zxvf <span class="hljs-number">4.5</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>.<span class="hljs-property">tar</span>.<span class="hljs-property">gz</span><br>cd coturn-<span class="hljs-number">4.5</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><br>./configure<br>make<br>make install<br></code></pre></td></tr></table></figure><p>注意，如果cd coturn-4.5.1.1找不到文件夹的话，一般安装包的默认安装位置在阿里云的&#x2F;usr&#x2F;local目录下，切换到该目录下继续执行操作即可</p><p>如果成功了，可以通过which turnserver验证。如果出现路径即为成功，默认路径为</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/8c0d35cf0a4ae8fe93cddd31d0121f68bf9d1eda.png@876w_99h_progressive.webp" class="" title="img">turnserver所在的默认路径，之后到该路径下开启服务<h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p>然后进入文件夹：</p><p>cd &#x2F;usr&#x2F;local&#x2F;etc&#x2F;</p><p>输入命令ll</p><p>会看到一个叫做 turnserver.conf.default的配置文件。</p><p>通过命令将它备份：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cp turnserver.<span class="hljs-property">conf</span>.<span class="hljs-property">default</span> turnserver.<span class="hljs-property">conf</span><br></code></pre></td></tr></table></figure><p>然后通过命令在当前文件夹生成签名证书（此步似乎可以不用，因为在配置文件中并未用到，不过也可以做一下，以防万一）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">openssl req -x509 -newkey <span class="hljs-attr">rsa</span>:<span class="hljs-number">2048</span> -keyout /usr/local/etc/turn_server_pkey.<span class="hljs-property">pem</span> -out /usr/local/etc/turn_server_cert.<span class="hljs-property">pem</span> -days <span class="hljs-number">99999</span> -nodes<br></code></pre></td></tr></table></figure><p>生成证书的时候会让填写国家地区等一些信息，可以随便填写，</p><p>第一个country name填写cn</p><p>state or province 填写sichuang</p><p>Locality name填写chengdu</p><p>剩下的随便填，可以都填no，邮箱随便填一个</p><p>完成后，可以在当前文件夹下看到turn_server_cert.pem和turn_server_pkey.pem两个文件。</p><p>然后在当前文件夹下，通过命令创建一个文件turnuserdb.conf用于存储用户名和信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cp turnserver.<span class="hljs-property">conf</span>.<span class="hljs-property">default</span> turnuserdb.<span class="hljs-property">conf</span><br></code></pre></td></tr></table></figure><p>此时整个文件夹中的文件构成为下图所示</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/4ae187ebbe5cac79057e791909a7afb8157bac3d.png@857w_273h_progressive.webp" class="" title="img">文件夹的内容构成<h3 id="3、编辑文件"><a href="#3、编辑文件" class="headerlink" title="3、编辑文件"></a>3、编辑文件</h3><p>首先，ipconfig看一下网卡信息，我的阿里云主机网卡是eth0，记住网卡类型。（部分教程的配置文件中要填写网卡信息，本文总结的配置文件中并不需要填写网卡信息）</p><p>然后，用命令生成账号密码的md5码，标红的部分分别对应用户名 地区 密码 ，可以自行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">turnadmin -k -u carrot -p <span class="hljs-number">123456</span> -r carrtRealm<br></code></pre></td></tr></table></figure><p>命令执行后会生成一段md5码，记得复制下来！</p><p>然后，在finalshell软件的下方，依次选择路径usr&#x2F;local&#x2F;etc，可以看到当前文件夹中已经存在如下文件。直接双击文件就可以打开进行编辑</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/eb74eeb8f59d606cb05e5380a310c6690a5746d1.png@942w_255h_progressive.webp" class="" title="img">finalshell界面<p>首先我们双击turnuserdb.conf文件，在其中填入用户名和刚才生成的md5码并保存。</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/e0dded2a03b462b29236fa89e0511df4382246b2.png@909w_303h_progressive.webp" class="" title="img"><p>然后到了最重要的一步，网上查找的大部分教程都有错误，经过总结，按照如下的配置文件进行配置，才能真正开启服务并不报错！</p><p>我们对配置文件turnserver.conf进行编辑，双击打开文件，输入如下的配置信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#中继服务器监听的<span class="hljs-variable constant_">IP</span>地址，<span class="hljs-variable constant_">NAT</span>环境下直接写私网<span class="hljs-variable constant_">IP</span>地址，可以指定多个<span class="hljs-variable constant_">IP</span><br>listening-ip=<span class="hljs-number">172.30</span><span class="hljs-number">.124</span><span class="hljs-number">.174</span><br>#中继服务器转发地址(本地<span class="hljs-variable constant_">IP</span>地址将用于传递数据包的给每个端)，和监听地址一样<br>#relay-ip=<span class="hljs-number">120.77</span><span class="hljs-number">.170</span><span class="hljs-number">.59</span><br>#外部<span class="hljs-variable constant_">IP</span>,<span class="hljs-variable constant_">NAT</span>环境下直接写：公网<span class="hljs-variable constant_">IP</span>/私网<span class="hljs-variable constant_">IP</span><br>external-ip=<span class="hljs-number">120.77</span><span class="hljs-number">.170</span><span class="hljs-number">.59</span>/<span class="hljs-number">172.30</span><span class="hljs-number">.124</span><span class="hljs-number">.174</span><br>#cli-password=<span class="hljs-number">123456</span><br>#打开fingerprint的注释，使用长期证书机制。<br>fingerprint<br>#打开密码验证，使用短期证书机制。<br>lt-cred-mech<br>#服务器名称,用于<span class="hljs-title class_">OAuth</span>认证,默认和realm相同,直接填公网ip.部分浏览器本段不设可能会引发cors错误。<br>server-name=<span class="hljs-number">120.77</span><span class="hljs-number">.170</span><span class="hljs-number">.59</span><br># <span class="hljs-variable constant_">TURN</span> <span class="hljs-variable constant_">REST</span> <span class="hljs-variable constant_">API</span>的长期凭证机制范围，同样设为ip,同server-name.<br>realm=<span class="hljs-number">120.77</span><span class="hljs-number">.170</span><span class="hljs-number">.59</span><br>#移动的<span class="hljs-title function_">ICE</span>(<span class="hljs-variable constant_">MICE</span>)的规范支持。<br>mobility<br>#快捷的添加用户是使用user=<span class="hljs-attr">XXX</span>:<span class="hljs-variable constant_">XXXX</span>的方式，可以添加多个。/<span class="hljs-keyword">var</span>/db/turndb也工作，可以使用turnadmin来管理其中用户，可以添加多个。<br>user=<span class="hljs-attr">demo</span>:<span class="hljs-number">123456</span><br>#你设置的密码（防止报错警告）<br>cli-password=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>保存文件后，我们到usr&#x2F;local&#x2F;bin文件夹下，通过如下命令开启服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cd /usr/local/bin<br>turnserver -v -r <span class="hljs-number">120.77</span><span class="hljs-number">.170</span><span class="hljs-number">.59</span>:<span class="hljs-number">3478</span> -a -o<br></code></pre></td></tr></table></figure><p>或者通过这条命令开启服务（下面这条命令指定了配置文件，上面的命令应该是默认定位到了我们的配置文件处，如果有修改配置文件位置的话，可以用如下命令，经测试，这两条命令都可以成功打开服务）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">turnserver -v -r 你的公网<span class="hljs-attr">ip</span>:<span class="hljs-number">3478</span> -a -o -c /usr/local/etc/turnserver.<span class="hljs-property">conf</span><br></code></pre></td></tr></table></figure><p>服务开启后，窗口中如下显示则代表服务开启成功</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/2332bef790237e7668d4b4d7d699f3950dd10a2f.png@942w_840h_progressive.webp" class="" title="img">如图所示表示服务开启成功<p>上图中有一处显示config error的地方，但经过测试，这个error并不影响turnserver服务的正确开启，如果想要消去这条error信息，只需要在上文的turnserver.conf配置文件中加上如下一句即可去掉error报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cli-password=<span class="hljs-number">123456</span>（你设置的密码）<br></code></pre></td></tr></table></figure><h3 id="4、测试coturn服务"><a href="#4、测试coturn服务" class="headerlink" title="4、测试coturn服务"></a>4、测试coturn服务</h3><p>接下来我们要测试开启的turnserver服务器能否起作用，我们到测试网址：<a href="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/">https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/</a></p><p>去进行测试，这里建议用火狐浏览器访问网址进行测试，chrome浏览器可能会出错</p><p>打开网址后，我们可以看到如下页面，按图中形式填写信息</p><p>第一栏是 turn:公网ip:端口号 （经测试，如果不填端口号，默认是3478端口）</p><p>第二栏是 之前设置的用户名</p><p>第三栏是 之前设置的密码</p><p>然后点击Add Server</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/ff5daf380e600ea6c627178aac259edcae264270.png@942w_674h_progressive.webp" class="" title="img">turn服务器信息填写<p>然后我们点击页面下方的gather candidates按钮</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/96ce92b6a7153ccb8319c5756673a3c6694d9ec6.png@870w_422h_progressive.webp" class="" title="img">点这个按钮<p>如果服务器配置正确的话，很快就可以看到返回的信息，如下图所示</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/36a363f739d62917ad9e412c466a060292617c76.png@942w_255h_progressive.webp" class="" title="img">返回的结果<img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/571f6ec806711b171c30dfff448c55d9b4cddc20.png@930w_368h_progressive.webp" class="" title="img"><p>可以看到我们的公网ip</p><p>我们可以看到，有我们服务器所在的公网地址120.77.170.59返回的信息，那就说明我们的服务器配置成功了，进行两台设备的直连时，能够通过turn服务器进行中转。如果没有我们公网IP地址，只显示done，并不代表成功。</p><p>如果要测试stun服务器，则按下图进行配置</p><img src="/2022/06/26/WebRTC%E5%85%A5%E9%97%A8/day12coTurn%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/6dd5c4f742072628a0bd87ca81c84bf66b0ec821.png@942w_668h_progressive.webp" class="" title="img">stun服务器的配置<p>有一种说法是由于stun服务器不承担转发的作用，所以可以不用输入用户名和密码信息，由于我的宿舍网络环境是对称性，无法验证stun服务器的作用情况，在此不做结果展示。但是可以推断，turn服务器成功验证的情况下，stun服务器应该同样能够生效。</p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>至此，我们已经开启了turnserver服务，turnserver服务是在后台默认开启的，如果重复执行开启服务的命令，会造成多个turnserver服务在后台一起打开，用如下命令可以查看服务是否在后台运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ps -ef|grep turnserver<br></code></pre></td></tr></table></figure><p>如果有多个turnserver服务同时在后台开启，可以用如下命令杀掉所有turnserver服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">killall turnserver<br></code></pre></td></tr></table></figure><p>一般情况下turnserver服务一直会在后台保持，如果不用了记得杀掉服务。</p><h3 id="6、Ubuntu14安装coturn参考"><a href="#6、Ubuntu14安装coturn参考" class="headerlink" title="6、Ubuntu14安装coturn参考"></a>6、Ubuntu14安装coturn参考</h3><p><a href="https://blog.csdn.net/tanyhuan/article/details/77265349">https://blog.csdn.net/tanyhuan/article/details/77265349</a></p><h3 id="7、一些有用的参考文章"><a href="#7、一些有用的参考文章" class="headerlink" title="7、一些有用的参考文章"></a>7、一些有用的参考文章</h3><p><a href="https://www.jianshu.com/p/915eab39476d">https://www.jianshu.com/p/915eab39476d</a></p><p><a href="https://www.jianshu.com/p/5543dd3e002b">https://www.jianshu.com/p/5543dd3e002b</a></p><p><a href="https://www.jianshu.com/p/d65e369f44fb">https://www.jianshu.com/p/d65e369f44fb</a></p><p><a href="https://blog.csdn.net/ZSH1205209422/article/details/106637977">https://blog.csdn.net/ZSH1205209422/article/details/106637977</a></p><p><a href="https://blog.csdn.net/qq_16042523/article/details/52994785">https://blog.csdn.net/qq_16042523/article/details/52994785</a></p>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day12-实现1v1音视频互动直播系统</title>
    <link href="/2022/06/25/WebRTC%E5%85%A5%E9%97%A8/day12%E5%AE%9E%E7%8E%B01v1%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BA%92%E5%8A%A8%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/06/25/WebRTC%E5%85%A5%E9%97%A8/day12%E5%AE%9E%E7%8E%B01v1%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BA%92%E5%8A%A8%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、核心思想"><a href="#一、核心思想" class="headerlink" title="一、核心思想"></a>一、核心思想</h2><h3 id="1、主要流程图（自己有空多绘制几遍）"><a href="#1、主要流程图（自己有空多绘制几遍）" class="headerlink" title="1、主要流程图（自己有空多绘制几遍）"></a>1、主要流程图（自己有空多绘制几遍）</h3><img src="/2022/06/25/WebRTC%E5%85%A5%E9%97%A8/day12%E5%AE%9E%E7%8E%B01v1%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BA%92%E5%8A%A8%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/Image_20220701135914.png" class="" title="Image_20220701135914"><h2 id="二、核心代码"><a href="#二、核心代码" class="headerlink" title="二、核心代码"></a>二、核心代码</h2><h4 id="1、服务端信令服务器代码"><a href="#1、服务端信令服务器代码" class="headerlink" title="1、服务端信令服务器代码"></a>1、服务端信令服务器代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> serveIndex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;serve-index&#x27;</span>);<br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> socketIo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io&#x27;</span>);<br><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">USERSCOUNT</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">//房间人数上限</span><br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//顺序不能换</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">serveIndex</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br><br><span class="hljs-keyword">var</span> http_server = http.<span class="hljs-title function_">createServer</span>(app);<br>http_server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9980</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br><br><span class="hljs-comment">//绑定socket.io到http服务</span><br><span class="hljs-keyword">var</span> io = socketIo.<span class="hljs-title function_">listen</span>(http_server)<br><br>io.<span class="hljs-property">sockets</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>)=&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有人发起了链接请求111&quot;</span>);<br>  <br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, data</span>)=&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;message&quot;</span> + room + data);<br>socket.<span class="hljs-title function_">to</span>(room).<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;message&#x27;</span>,room, data);<br>  &#125;);<br><br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;join&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room</span>)=&gt;</span> &#123;<br>socket.<span class="hljs-title function_">join</span>(room);<br><span class="hljs-keyword">var</span> myRoom = io.<span class="hljs-property">sockets</span>.<span class="hljs-property">adapter</span>.<span class="hljs-property">rooms</span>[room];<br><span class="hljs-keyword">var</span> users = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(myRoom.<span class="hljs-property">sockets</span>).<span class="hljs-property">length</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;join&quot;</span> + room);<br><br>    <span class="hljs-keyword">if</span> (users &lt;= <span class="hljs-variable constant_">USERSCOUNT</span>) &#123; <span class="hljs-comment">//房间人数未超过</span><br>      socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;joined&#x27;</span>, room, socket.<span class="hljs-property">id</span>); <span class="hljs-comment">//给自己发</span><br>      <span class="hljs-keyword">if</span> (users &gt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//房间里面已经有其他人了</span><br>        socket.<span class="hljs-title function_">to</span>(room).<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;otherjoin&#x27;</span>, room); <span class="hljs-comment">//发给除自己之外，房间内的所有人</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//超过2个人了</span><br>      socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;full&#x27;</span>, room, socket.<span class="hljs-property">id</span>); <span class="hljs-comment">//给自己发</span><br>      socket.<span class="hljs-title function_">leave</span>(room);<br>    &#125;<br>  &#125;);<br><br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;leave&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room</span>)=&gt;</span> &#123;<br><span class="hljs-keyword">var</span> myRoom = io.<span class="hljs-property">sockets</span>.<span class="hljs-property">adapter</span>.<span class="hljs-property">rooms</span>[room];<br><span class="hljs-keyword">var</span> users = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(myRoom.<span class="hljs-property">sockets</span>).<span class="hljs-property">length</span>;<br>socket.<span class="hljs-title function_">to</span>(room).<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;bye&#x27;</span>, room, socket.<span class="hljs-property">id</span>)<span class="hljs-comment">//房间内所有人,除自己外</span><br> socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leaved&#x27;</span>, room, socket.<span class="hljs-property">id</span>);<span class="hljs-comment">// 给自己发</span><br>    socket.<span class="hljs-title function_">leave</span>(room);<br>&#125;);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;webrtc服务启动成功&quot;</span>);<br><br><br></code></pre></td></tr></table></figure><h3 id="2、输入房间号代码"><a href="#2、输入房间号代码" class="headerlink" title="2、输入房间号代码"></a>2、输入房间号代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>really peer connection<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/main.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotoNextPage</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> roomid = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input#room&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(roomid.<span class="hljs-property">value</span> === <span class="hljs-literal">null</span> || roomid.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;roomid is null&#x27;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;room.html?room=&quot;</span>+ roomid.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>roomid:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;room&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;join&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;gotoNextPage()&quot;</span>&gt;</span>Join<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="3、绘制端对端聊天的html代码"><a href="#3、绘制端对端聊天的html代码" class="headerlink" title="3、绘制端对端聊天的html代码"></a>3、绘制端对端聊天的html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebRTC PeerConnection<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/main.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connserver&quot;</span>&gt;</span>Connect Sig Server<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leave&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Leave<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shareDesk&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;shareDesk&quot;</span>&gt;</span>Share Desktop<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;preview&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Local:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;localvideo&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">playsinline</span> <span class="hljs-attr">muted</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Offer SDP:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;offer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Remote:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remotevideo&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">playsinline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Answer SDP:<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;answer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="4、核心客户端js代码"><a href="#4、核心客户端js代码" class="headerlink" title="4、核心客户端js代码"></a>4、核心客户端js代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">var</span> localVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video#localvideo&#x27;</span>);<br><span class="hljs-keyword">var</span> remoteVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video#remotevideo&#x27;</span>);<br><br><span class="hljs-keyword">var</span> btnConn =  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#connserver&#x27;</span>);<br><span class="hljs-keyword">var</span> btnLeave = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#leave&#x27;</span>);<br><br><span class="hljs-keyword">var</span> offer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea#offer&#x27;</span>);<br><span class="hljs-keyword">var</span> answer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea#answer&#x27;</span>);<br><br><span class="hljs-keyword">var</span> shareDeskBox  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input#shareDesk&#x27;</span>);<br><br><span class="hljs-keyword">var</span> pcConfig = &#123;<br>  <span class="hljs-string">&#x27;iceServers&#x27;</span>: [&#123;<br>    <span class="hljs-string">&#x27;urls&#x27;</span>: <span class="hljs-string">&#x27;stun:47.95.15.179:3478&#x27;</span>,<br>    <span class="hljs-string">&#x27;credential&#x27;</span>: <span class="hljs-string">&quot;123456&quot;</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&quot;carrot&quot;</span><br>  &#125;]<br>&#125;;<br><br><span class="hljs-keyword">var</span> localStream = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> remoteStream = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">var</span> pc = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">var</span> roomid;<br><span class="hljs-keyword">var</span> socket = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">var</span> offerdesc = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> state = <span class="hljs-string">&#x27;init&#x27;</span>;<br><br><span class="hljs-comment">// 以下代码是从网上找的</span><br><span class="hljs-comment">//=========================================================================================</span><br><br><span class="hljs-comment">//如果返回的是false说明当前操作系统是手机端，如果返回的是true则说明当前的操作系统是电脑端</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">IsPC</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> userAgentInfo = navigator.<span class="hljs-property">userAgent</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Agents</span> = [<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;iPhone&quot;</span>,<span class="hljs-string">&quot;SymbianOS&quot;</span>, <span class="hljs-string">&quot;Windows Phone&quot;</span>,<span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>];<br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v = <span class="hljs-number">0</span>; v &lt; <span class="hljs-title class_">Agents</span>.<span class="hljs-property">length</span>; v++) &#123;<br><span class="hljs-keyword">if</span> (userAgentInfo.<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">Agents</span>[v]) &gt; <span class="hljs-number">0</span>) &#123;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-comment">//如果返回true 则说明是Android  false是ios</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">is_android</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> u = navigator.<span class="hljs-property">userAgent</span>, app = navigator.<span class="hljs-property">appVersion</span>;<br><span class="hljs-keyword">var</span> isAndroid = u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Android&#x27;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Linux&#x27;</span>) &gt; -<span class="hljs-number">1</span>; <span class="hljs-comment">//g</span><br><span class="hljs-keyword">var</span> isIOS = !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class="hljs-comment">//ios终端</span><br><span class="hljs-keyword">if</span> (isAndroid) &#123;<br><span class="hljs-comment">//这个是安卓操作系统</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (isIOS) &#123;<br><span class="hljs-comment">//这个是ios操作系统</span><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//获取url参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-params">variable</span>)<br>&#123;<br>       <span class="hljs-keyword">var</span> query = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);<br>       <span class="hljs-keyword">var</span> vars = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;vars.<span class="hljs-property">length</span>;i++) &#123;<br>               <span class="hljs-keyword">var</span> pair = vars[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>               <span class="hljs-keyword">if</span>(pair[<span class="hljs-number">0</span>] == variable)&#123;<span class="hljs-keyword">return</span> pair[<span class="hljs-number">1</span>];&#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-comment">//=======================================================================</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">roomid, data</span>)&#123;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;send message to other end&#x27;</span>, roomid, data);<br><span class="hljs-keyword">if</span>(!socket)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;socket is null&#x27;</span>);<br>&#125;<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;message&#x27;</span>, roomid, data);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">conn</span>(<span class="hljs-params"></span>)&#123; <br><br>socket = io.<span class="hljs-title function_">connect</span>();<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;joined&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">roomid, id</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive joined message!&#x27;</span>, roomid, id);<br>state = <span class="hljs-string">&#x27;joined&#x27;</span><br><br><span class="hljs-comment">//如果是多人的话，第一个人不该在这里创建peerConnection</span><br><span class="hljs-comment">//都等到收到一个otherjoin时再创建</span><br><span class="hljs-comment">//所以，在这个消息里应该带当前房间的用户数</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//create conn and bind media track</span><br><span class="hljs-title function_">createPeerConnection</span>();<br><br>btnConn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive joined message, state=&#x27;</span>, state);<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;otherjoin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">roomid</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive otherjoin message:&#x27;</span>, roomid, state);<br><br><span class="hljs-comment">//如果是多人的话，每上来一个人都要创建一个新的 peerConnection</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span>(state === <span class="hljs-string">&#x27;joined_unbind&#x27;</span>)&#123;<br><span class="hljs-title function_">createPeerConnection</span>();<br>&#125;<br><br>state = <span class="hljs-string">&#x27;joined_conn&#x27;</span>;<br><span class="hljs-title function_">call</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive other_join message, state=&#x27;</span>, state);<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;full&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">roomid, id</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive full message&#x27;</span>, roomid, id);<br><span class="hljs-title function_">hangup</span>();<br><span class="hljs-title function_">closeLocalMedia</span>();<br>state = <span class="hljs-string">&#x27;leaved&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive full message, state=&#x27;</span>, state);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;the room is full!&#x27;</span>);<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;leaved&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">roomid, id</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive leaved message&#x27;</span>, roomid, id);<br>state=<span class="hljs-string">&#x27;leaved&#x27;</span><br>socket.<span class="hljs-title function_">disconnect</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive leaved message, state=&#x27;</span>, state);<br><br>btnConn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;bye&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, id</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive bye message&#x27;</span>, roomid, id);<br><span class="hljs-comment">//state = &#x27;created&#x27;;</span><br><span class="hljs-comment">//当是多人通话时，应该带上当前房间的用户数</span><br><span class="hljs-comment">//如果当前房间用户不小于 2, 则不用修改状态</span><br><span class="hljs-comment">//并且，关闭的应该是对应用户的peerconnection</span><br><span class="hljs-comment">//在客户端应该维护一张peerconnection表，它是</span><br><span class="hljs-comment">//一个key:value的格式，key=userid, value=peerconnection</span><br>state = <span class="hljs-string">&#x27;joined_unbind&#x27;</span>;<br><span class="hljs-title function_">hangup</span>();<br>offer.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>answer.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive bye message, state=&#x27;</span>, state);<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;disconnect&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive disconnect message!&#x27;</span>, roomid);<br><span class="hljs-keyword">if</span>(!(state === <span class="hljs-string">&#x27;leaved&#x27;</span>))&#123;<br><span class="hljs-title function_">hangup</span>();<br><span class="hljs-title function_">closeLocalMedia</span>();<br><br>&#125;<br>state = <span class="hljs-string">&#x27;leaved&#x27;</span>;<br><br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">roomid, data</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;receive message!&#x27;</span>, roomid, data);<br><br><span class="hljs-keyword">if</span>(data === <span class="hljs-literal">null</span> || data === <span class="hljs-literal">undefined</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;the message is invalid!&#x27;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(data.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;type&#x27;</span>) &amp;&amp; data.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;offer&#x27;</span>) &#123;<br><br>offer.<span class="hljs-property">value</span> = data.<span class="hljs-property">sdp</span>;<br><br>pc.<span class="hljs-title function_">setRemoteDescription</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCSessionDescription</span>(data));<br><br><span class="hljs-comment">//create answer</span><br>pc.<span class="hljs-title function_">createAnswer</span>()<br>.<span class="hljs-title function_">then</span>(getAnswer)<br>.<span class="hljs-title function_">catch</span>(handleAnswerError);<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;type&#x27;</span>) &amp;&amp; data.<span class="hljs-property">type</span> == <span class="hljs-string">&#x27;answer&#x27;</span>)&#123;<br>answer.<span class="hljs-property">value</span> = data.<span class="hljs-property">sdp</span>;<br>pc.<span class="hljs-title function_">setRemoteDescription</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCSessionDescription</span>(data));<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;type&#x27;</span>) &amp;&amp; data.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;candidate&#x27;</span>)&#123;<br><span class="hljs-keyword">var</span> candidate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCIceCandidate</span>(&#123;<br><span class="hljs-attr">sdpMLineIndex</span>: data.<span class="hljs-property">label</span>,<br><span class="hljs-attr">candidate</span>: data.<span class="hljs-property">candidate</span><br>&#125;);<br>pc.<span class="hljs-title function_">addIceCandidate</span>(candidate);<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;the message is invalid!&#x27;</span>, data);<br><br>&#125;<br><br>&#125;);<br><br><br>roomid = <span class="hljs-title function_">getQueryVariable</span>(<span class="hljs-string">&#x27;room&#x27;</span>);<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;join&#x27;</span>, roomid);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">connSignalServer</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-comment">//开启本地视频</span><br><span class="hljs-title function_">start</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMediaStream</span>(<span class="hljs-params">stream</span>)&#123;<br><br><span class="hljs-keyword">if</span>(localStream)&#123;<br>stream.<span class="hljs-title function_">getAudioTracks</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">track</span>)=&gt;</span>&#123;<br>localStream.<span class="hljs-title function_">addTrack</span>(track);<br>stream.<span class="hljs-title function_">removeTrack</span>(track);<br>&#125;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>localStream = stream;<br>&#125;<br><br>localVideo.<span class="hljs-property">srcObject</span> = localStream;<br><br><span class="hljs-comment">//这个函数的位置特别重要，</span><br><span class="hljs-comment">//一定要放到getMediaStream之后再调用</span><br><span class="hljs-comment">//否则就会出现绑定失败的情况</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//setup connection</span><br><span class="hljs-title function_">conn</span>();<br><br><span class="hljs-comment">//btnStart.disabled = true;</span><br><span class="hljs-comment">//btnCall.disabled = true;</span><br><span class="hljs-comment">//btnHangup.disabled = true;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDeskStream</span>(<span class="hljs-params">stream</span>)&#123;<br>localStream = stream;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleError</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to get Media Stream!&#x27;</span>, err);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">shareDesk</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">IsPC</span>())&#123;<br>navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getDisplayMedia</span>(&#123;<span class="hljs-attr">video</span>: <span class="hljs-literal">true</span>&#125;)<br>.<span class="hljs-title function_">then</span>(getDeskStream)<br>.<span class="hljs-title function_">catch</span>(handleError);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">if</span>(!navigator.<span class="hljs-property">mediaDevices</span> ||<br>!navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-property">getUserMedia</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;the getUserMedia is not supported!&#x27;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-keyword">var</span> constraints;<br><br><span class="hljs-keyword">if</span>( shareDeskBox.<span class="hljs-property">checked</span> &amp;&amp; <span class="hljs-title function_">shareDesk</span>())&#123;<br><br>constraints = &#123;<br><span class="hljs-attr">video</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">audio</span>:  &#123;<br><span class="hljs-attr">echoCancellation</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">noiseSuppression</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">autoGainControl</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>constraints = &#123;<br><span class="hljs-attr">video</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">audio</span>:  &#123;<br><span class="hljs-attr">echoCancellation</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">noiseSuppression</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">autoGainControl</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br><br>navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(constraints)<br>.<span class="hljs-title function_">then</span>(getMediaStream)<br>.<span class="hljs-title function_">catch</span>(handleError);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRemoteStream</span>(<span class="hljs-params">e</span>)&#123;<br>remoteStream = e.<span class="hljs-property">streams</span>[<span class="hljs-number">0</span>];<br>remoteVideo.<span class="hljs-property">srcObject</span> = e.<span class="hljs-property">streams</span>[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOfferError</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to create offer:&#x27;</span>, err);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleAnswerError</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to create answer:&#x27;</span>, err);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params">desc</span>)&#123;<br>pc.<span class="hljs-title function_">setLocalDescription</span>(desc);<br>answer.<span class="hljs-property">value</span> = desc.<span class="hljs-property">sdp</span>;<br><br><span class="hljs-comment">//send answer sdp</span><br><span class="hljs-title function_">sendMessage</span>(roomid, desc);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOffer</span>(<span class="hljs-params">desc</span>)&#123;<br>pc.<span class="hljs-title function_">setLocalDescription</span>(desc);<br>offer.<span class="hljs-property">value</span> = desc.<span class="hljs-property">sdp</span>;<br>offerdesc = desc;<br><br><span class="hljs-comment">//send offer sdp</span><br><span class="hljs-title function_">sendMessage</span>(roomid, offerdesc);<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPeerConnection</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-comment">//如果是多人的话，在这里要创建一个新的连接.</span><br><span class="hljs-comment">//新创建好的要放到一个map表中。</span><br><span class="hljs-comment">//key=userid, value=peerconnection</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;create RTCPeerConnection!&#x27;</span>);<br><span class="hljs-keyword">if</span>(!pc)&#123;<br>pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCPeerConnection</span>(pcConfig);<br><br>pc.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br><br><span class="hljs-keyword">if</span>(e.<span class="hljs-property">candidate</span>) &#123;<br><span class="hljs-title function_">sendMessage</span>(roomid, &#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;candidate&#x27;</span>,<br><span class="hljs-attr">label</span>:e.<span class="hljs-property">candidate</span>.<span class="hljs-property">sdpMLineIndex</span>, <br><span class="hljs-attr">id</span>:e.<span class="hljs-property">candidate</span>.<span class="hljs-property">sdpMid</span>, <br><span class="hljs-attr">candidate</span>: e.<span class="hljs-property">candidate</span>.<span class="hljs-property">candidate</span><br>&#125;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is the end candidate&#x27;</span>);<br>&#125;<br>&#125;<br>pc.<span class="hljs-property">ontrack</span> = getRemoteStream;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&#x27;the pc have be created!&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">bindTracks</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//绑定永远与 peerconnection在一起，</span><br><span class="hljs-comment">//所以没必要再单独做成一个函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bindTracks</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bind tracks into RTCPeerConnection!&#x27;</span>);<br><br><span class="hljs-keyword">if</span>( pc === <span class="hljs-literal">null</span> || pc === <span class="hljs-literal">undefined</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;pc is null or undefined!&#x27;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(localStream === <span class="hljs-literal">null</span> || localStream === <span class="hljs-literal">undefined</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;localstream is null or undefined!&#x27;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//add all track into peer connection</span><br>localStream.<span class="hljs-title function_">getTracks</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">track</span>)=&gt;</span>&#123;<br>pc.<span class="hljs-title function_">addTrack</span>(track, localStream);<br>&#125;);<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">if</span>(state === <span class="hljs-string">&#x27;joined_conn&#x27;</span>)&#123;<br><br><span class="hljs-keyword">var</span> offerOptions = &#123;<br><span class="hljs-attr">offerToRecieveAudio</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">offerToRecieveVideo</span>: <span class="hljs-number">1</span><br>&#125;<br><br>pc.<span class="hljs-title function_">createOffer</span>(offerOptions)<br>.<span class="hljs-title function_">then</span>(getOffer)<br>.<span class="hljs-title function_">catch</span>(handleOfferError);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hangup</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">if</span>(pc) &#123;<br><br>offerdesc = <span class="hljs-literal">null</span>;<br><br>pc.<span class="hljs-title function_">close</span>();<br>pc = <span class="hljs-literal">null</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closeLocalMedia</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">if</span>(localStream &amp;&amp; localStream.<span class="hljs-title function_">getTracks</span>())&#123;<br>localStream.<span class="hljs-title function_">getTracks</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">track</span>)=&gt;</span>&#123;<br>track.<span class="hljs-title function_">stop</span>();<br>&#125;);<br>&#125;<br>localStream = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params"></span>) &#123;<br><br><span class="hljs-keyword">if</span>(socket)&#123;<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leave&#x27;</span>, roomid); <span class="hljs-comment">//notify server</span><br>&#125;<br><br><span class="hljs-title function_">hangup</span>();<br><span class="hljs-title function_">closeLocalMedia</span>();<br><br>offer.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>answer.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>btnConn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br>btnConn.<span class="hljs-property">onclick</span> = connSignalServer<br>btnLeave.<span class="hljs-property">onclick</span> = leave;<br><br></code></pre></td></tr></table></figure><h3 id="5、客户端一些辅助css代码"><a href="#5、客户端一些辅助css代码" class="headerlink" title="5、客户端一些辅助css代码"></a>5、客户端一些辅助css代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  Use of this source code is governed by a BSD-style license</span><br><span class="hljs-comment"> *  that can be found in the LICENSE file in the root of the source</span><br><span class="hljs-comment"> *  tree.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">25px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">134px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> (<span class="hljs-number">50%</span> - <span class="hljs-number">100</span>) <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <br>&#125;<br><br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#444</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20.0em</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">10px</span>);<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#getUserMedia</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.input</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.input</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.output</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Inconsolata&#x27;</span>, <span class="hljs-string">&#x27;Courier New&#x27;</span>, monospace;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">white-space</span>: pre;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">270px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#preview</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1em</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#preview</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">12px</span>);<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Inconsolata&#x27;</span>, <span class="hljs-string">&#x27;Courier New&#x27;</span>, monospace;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">308px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#senderStats</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#constraints</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#constraints</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">156px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">video</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#222</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attr">--width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--width);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">225px</span>;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">720px</span>) &#123;<br>  <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">56px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.3em</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#getUserMedia</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">14px</span>);<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-WebRTC核心之SDP详解</title>
    <link href="/2022/06/20/WebRTC%E5%85%A5%E9%97%A8/day11WebRTC%E6%A0%B8%E5%BF%83SDP/"/>
    <url>/2022/06/20/WebRTC%E5%85%A5%E9%97%A8/day11WebRTC%E6%A0%B8%E5%BF%83SDP/</url>
    
    <content type="html"><![CDATA[<h1 id="一、网络抓包"><a href="#一、网络抓包" class="headerlink" title="一、网络抓包"></a>一、网络抓包</h1><h3 id="1、SDP在WebRTC中的地位？"><a href="#1、SDP在WebRTC中的地位？" class="headerlink" title="1、SDP在WebRTC中的地位？"></a>1、SDP在WebRTC中的地位？</h3><ul><li>SDP可以说是WebRTC的核心，因为双方进行通信的参数都在其中</li><li>如使用的编码器是什么，码流是多大，有多少个媒体流等等都在SDP中描述着</li></ul><h3 id="2、什么是SDP？"><a href="#2、什么是SDP？" class="headerlink" title="2、什么是SDP？"></a>2、什么是SDP？</h3><ul><li>SDP（Session Description Protocol）它只是一种信息格式的描述标准</li><li>本身不属于传输协议，但是可以被其他传输协议用来交换必要的信息。</li></ul><h3 id="3、认识WebRTC中的SDP，有个印象就行，后续再倒回来研究。"><a href="#3、认识WebRTC中的SDP，有个印象就行，后续再倒回来研究。" class="headerlink" title="3、认识WebRTC中的SDP，有个印象就行，后续再倒回来研究。"></a>3、认识WebRTC中的SDP，有个印象就行，后续再倒回来研究。</h3><ul><li>会话层：类似全局变量，是对SDP大而全的信息统计</li><li>媒体层：类似于局部变量，媒体层的数据会覆盖会话层</li></ul><img src="/2022/06/20/WebRTC%E5%85%A5%E9%97%A8/day11WebRTC%E6%A0%B8%E5%BF%83SDP/image-20220625173942004.png" class=""><h3 id="4、如何获取SDP？"><a href="#4、如何获取SDP？" class="headerlink" title="4、如何获取SDP？"></a>4、如何获取SDP？</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params">desc</span>)&#123;<br>pc2.<span class="hljs-title function_">setLocalDescription</span>(desc);<br>answerSdpTextarea.<span class="hljs-property">value</span> = desc.<span class="hljs-property">sdp</span><br><br><span class="hljs-comment">//send desc to signal</span><br><span class="hljs-comment">//receive desc from signal</span><br><br>pc1.<span class="hljs-title function_">setRemoteDescription</span>(desc);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOffer</span>(<span class="hljs-params">desc</span>)&#123;<br>pc1.<span class="hljs-title function_">setLocalDescription</span>(desc);<br>offerSdpTextarea.<span class="hljs-property">value</span> = desc.<span class="hljs-property">sdp</span><br><br><span class="hljs-comment">//send desc to signal</span><br><span class="hljs-comment">//receive desc from signal</span><br><br>pc2.<span class="hljs-title function_">setRemoteDescription</span>(desc);<br><br>pc2.<span class="hljs-title function_">createAnswer</span>()<br>.<span class="hljs-title function_">then</span>(getAnswer)<br>.<span class="hljs-title function_">catch</span>(handleAnswerError);<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/06/20/WebRTC%E5%85%A5%E9%97%A8/day11WebRTC%E6%A0%B8%E5%BF%83SDP/image-20220625173459114.png" class=""><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs xml">v=0<br>o=- 6529374866365022581 2 IN IP4 127.0.0.1<br>s=-<br>t=0 0<br>a=group:BUNDLE 0<br>a=extmap-allow-mixed<br>a=msid-semantic: WMS 8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF<br>m=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 127 121 125 107 108 109 124 120 123 119 35 36 41 42 114 115 116 117 118<br>c=IN IP4 0.0.0.0<br>a=rtcp:9 IN IP4 0.0.0.0<br>a=ice-ufrag:j9z9<br>a=ice-pwd:JcYFBZ/8ONKMNks8lG37N83y<br>a=ice-options:trickle<br>a=fingerprint:sha-256 A4:52:8C:A8:2B:22:8C:66:C1:03:D3:65:EC:EE:36:E4:0E:28:CB:02:FB:90:DE:EA:E6:C2:C8:B2:DE:6A:05:30<br>a=setup:actpass<br>a=mid:0<br>a=extmap:1 urn:ietf:params:rtp-hdrext:toffset<br>a=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time<br>a=extmap:3 urn:3gpp:video-orientation<br>a=extmap:4 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01<br>a=extmap:5 http://www.webrtc.org/experiments/rtp-hdrext/playout-delay<br>a=extmap:6 http://www.webrtc.org/experiments/rtp-hdrext/video-content-type<br>a=extmap:7 http://www.webrtc.org/experiments/rtp-hdrext/video-timing<br>a=extmap:8 http://www.webrtc.org/experiments/rtp-hdrext/color-space<br>a=extmap:9 urn:ietf:params:rtp-hdrext:sdes:mid<br>a=extmap:10 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id<br>a=extmap:11 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id<br>a=sendrecv<br>a=msid:8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF 31751cde-a529-4f04-bd71-ad11336ad20b<br>a=rtcp-mux<br>a=rtcp-rsize<br>a=rtpmap:96 VP8/90000<br>a=rtcp-fb:96 goog-remb<br>a=rtcp-fb:96 transport-cc<br>a=rtcp-fb:96 ccm fir<br>a=rtcp-fb:96 nack<br>a=rtcp-fb:96 nack pli<br>a=rtpmap:97 rtx/90000<br>a=fmtp:97 apt=96<br>a=rtpmap:98 VP9/90000<br>a=rtcp-fb:98 goog-remb<br>a=rtcp-fb:98 transport-cc<br>a=rtcp-fb:98 ccm fir<br>a=rtcp-fb:98 nack<br>a=rtcp-fb:98 nack pli<br>a=fmtp:98 profile-id=0<br>a=rtpmap:99 rtx/90000<br>a=fmtp:99 apt=98<br>a=rtpmap:100 VP9/90000<br>a=rtcp-fb:100 goog-remb<br>a=rtcp-fb:100 transport-cc<br>a=rtcp-fb:100 ccm fir<br>a=rtcp-fb:100 nack<br>a=rtcp-fb:100 nack pli<br>a=fmtp:100 profile-id=2<br>a=rtpmap:101 rtx/90000<br>a=fmtp:101 apt=100<br>a=rtpmap:127 H264/90000<br>a=rtcp-fb:127 goog-remb<br>a=rtcp-fb:127 transport-cc<br>a=rtcp-fb:127 ccm fir<br>a=rtcp-fb:127 nack<br>a=rtcp-fb:127 nack pli<br>a=fmtp:127 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f<br>a=rtpmap:121 rtx/90000<br>a=fmtp:121 apt=127<br>a=rtpmap:125 H264/90000<br>a=rtcp-fb:125 goog-remb<br>a=rtcp-fb:125 transport-cc<br>a=rtcp-fb:125 ccm fir<br>a=rtcp-fb:125 nack<br>a=rtcp-fb:125 nack pli<br>a=fmtp:125 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42001f<br>a=rtpmap:107 rtx/90000<br>a=fmtp:107 apt=125<br>a=rtpmap:108 H264/90000<br>a=rtcp-fb:108 goog-remb<br>a=rtcp-fb:108 transport-cc<br>a=rtcp-fb:108 ccm fir<br>a=rtcp-fb:108 nack<br>a=rtcp-fb:108 nack pli<br>a=fmtp:108 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f<br>a=rtpmap:109 rtx/90000<br>a=fmtp:109 apt=108<br>a=rtpmap:124 H264/90000<br>a=rtcp-fb:124 goog-remb<br>a=rtcp-fb:124 transport-cc<br>a=rtcp-fb:124 ccm fir<br>a=rtcp-fb:124 nack<br>a=rtcp-fb:124 nack pli<br>a=fmtp:124 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42e01f<br>a=rtpmap:120 rtx/90000<br>a=fmtp:120 apt=124<br>a=rtpmap:123 H264/90000<br>a=rtcp-fb:123 goog-remb<br>a=rtcp-fb:123 transport-cc<br>a=rtcp-fb:123 ccm fir<br>a=rtcp-fb:123 nack<br>a=rtcp-fb:123 nack pli<br>a=fmtp:123 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d001f<br>a=rtpmap:119 rtx/90000<br>a=fmtp:119 apt=123<br>a=rtpmap:35 H264/90000<br>a=rtcp-fb:35 goog-remb<br>a=rtcp-fb:35 transport-cc<br>a=rtcp-fb:35 ccm fir<br>a=rtcp-fb:35 nack<br>a=rtcp-fb:35 nack pli<br>a=fmtp:35 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=4d001f<br>a=rtpmap:36 rtx/90000<br>a=fmtp:36 apt=35<br>a=rtpmap:41 AV1/90000<br>a=rtcp-fb:41 goog-remb<br>a=rtcp-fb:41 transport-cc<br>a=rtcp-fb:41 ccm fir<br>a=rtcp-fb:41 nack<br>a=rtcp-fb:41 nack pli<br>a=rtpmap:42 rtx/90000<br>a=fmtp:42 apt=41<br>a=rtpmap:114 H264/90000<br>a=rtcp-fb:114 goog-remb<br>a=rtcp-fb:114 transport-cc<br>a=rtcp-fb:114 ccm fir<br>a=rtcp-fb:114 nack<br>a=rtcp-fb:114 nack pli<br>a=fmtp:114 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=64001f<br>a=rtpmap:115 rtx/90000<br>a=fmtp:115 apt=114<br>a=rtpmap:116 red/90000<br>a=rtpmap:117 rtx/90000<br>a=fmtp:117 apt=116<br>a=rtpmap:118 ulpfec/90000<br>a=ssrc-group:FID 436826565 1885894064<br>a=ssrc:436826565 cname:t+9nyTqxmjVC0Wq9<br>a=ssrc:436826565 msid:8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF 31751cde-a529-4f04-bd71-ad11336ad20b<br>a=ssrc:436826565 mslabel:8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF<br>a=ssrc:436826565 label:31751cde-a529-4f04-bd71-ad11336ad20b<br>a=ssrc:1885894064 cname:t+9nyTqxmjVC0Wq9<br>a=ssrc:1885894064 msid:8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF 31751cde-a529-4f04-bd71-ad11336ad20b<br>a=ssrc:1885894064 mslabel:8WZ552nThLWpJd1OTFAcTJTEIb6s4aHH1vlF<br>a=ssrc:1885894064 label:31751cde-a529-4f04-bd71-ad11336ad20b<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day10-WebRTC端对端1v1传输基本流程</title>
    <link href="/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、网络抓包"><a href="#一、网络抓包" class="headerlink" title="一、网络抓包"></a>一、网络抓包</h1><h3 id="1、网络抓包工具常用的两个工具是哪两个？"><a href="#1、网络抓包工具常用的两个工具是哪两个？" class="headerlink" title="1、网络抓包工具常用的两个工具是哪两个？"></a>1、网络抓包工具常用的两个工具是哪两个？</h3><ul><li>tcpdump</li><li>WireShark</li></ul><h3 id="2、tcpdump-和-WireShark-两者有什么区别？"><a href="#2、tcpdump-和-WireShark-两者有什么区别？" class="headerlink" title="2、tcpdump 和 WireShark 两者有什么区别？"></a>2、<code>tcpdump</code> 和 <code>WireShark</code> 两者有什么区别？</h3><ul><li><font color="red">tcpdump</font>：tcpdump在Linux服务端使用，对使用者的要求比较高，需要对网络很熟悉。（真正的高手专用）</li><li><font color="red">WireShark</font>：拥有各个平台的可视化界面，所以对使用者要求比较低。（分析辅助提示功能做得很棒）</li></ul><h3 id="3、tcpdump最常见的用法？（先记录一下，后续再看吧）"><a href="#3、tcpdump最常见的用法？（先记录一下，后续再看吧）" class="headerlink" title="3、tcpdump最常见的用法？（先记录一下，后续再看吧）"></a>3、tcpdump最常见的用法？（先记录一下，后续再看吧）</h3><img src="/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/image-20220619081627151.png" class="" title="image-20220619081627151"><h3 id="4、Mac下如何知道自己有哪些网卡？"><a href="#4、Mac下如何知道自己有哪些网卡？" class="headerlink" title="4、Mac下如何知道自己有哪些网卡？"></a>4、Mac下如何知道自己有哪些网卡？</h3><ul><li>在终端使用 <code>ifconfig</code> 命令即可查看</li></ul><h3 id="5、【掌握】WireShark的逻辑运算方式有哪些？"><a href="#5、【掌握】WireShark的逻辑运算方式有哪些？" class="headerlink" title="5、【掌握】WireShark的逻辑运算方式有哪些？"></a>5、【掌握】WireShark的逻辑运算方式有哪些？</h3><ul><li>与： <code>and</code> 或 <code>&amp;&amp;</code></li><li>或：<code>or</code> 或 <code>||</code></li><li>非：<code>not</code> 或 <code>！</code></li></ul><h3 id="6、【掌握】WireShark的判断语句有哪些？"><a href="#6、【掌握】WireShark的判断语句有哪些？" class="headerlink" title="6、【掌握】WireShark的判断语句有哪些？"></a>6、【掌握】WireShark的判断语句有哪些？</h3><ul><li>等于：<code>eq</code> 或 <code>==</code></li><li>小于：<code>lt</code> 或 <code>&lt;</code></li><li>大于：<code>gt</code> 或 <code>&gt;</code></li><li>小于等于：<code>le</code> 或 <code>&lt;=</code></li><li>大于等于：<code>ge</code> 或 <code>&gt;=</code></li><li>不等于：<code>ne</code> 或 <code>!=</code></li></ul><h3 id="7、【掌握】WireShark如何按照协议进行过滤？"><a href="#7、【掌握】WireShark如何按照协议进行过滤？" class="headerlink" title="7、【掌握】WireShark如何按照协议进行过滤？"></a>7、【掌握】WireShark如何按照协议进行过滤？</h3><ul><li>stun</li><li>tcp</li><li>udp</li><li>注意都用小写</li></ul><h3 id="8、【掌握】WireShark-如何按照ip地址或端口号过滤？"><a href="#8、【掌握】WireShark-如何按照ip地址或端口号过滤？" class="headerlink" title="8、【掌握】WireShark 如何按照ip地址或端口号过滤？"></a>8、【掌握】WireShark 如何按照<code>ip地址</code>或<code>端口号</code>过滤？</h3><ul><li><font color="red">按ip地址过滤</font>：<ul><li>ip.dst &#x3D;&#x3D; 172.172.172.172（按目的地址过滤）</li><li>ip.src &#x3D; 192.168.0.1 （按源地址过滤）</li><li>ip.addr &#x3D; 192.168.0.1（源或目的地址中包含此ip即可）</li></ul></li><li><font color="red">按端口号过滤</font>：<ul><li>tcp.port &#x3D;&#x3D; 8080</li><li>udp.port &#x3D;&#x3D; 8080</li><li>udp.dstport &#x3D;&#x3D; 3478</li><li>udp.srcport &#x3D;&#x3D; 3478</li></ul></li></ul><h2 id="二、端对端1V1传输基本流程"><a href="#二、端对端1V1传输基本流程" class="headerlink" title="二、端对端1V1传输基本流程"></a>二、端对端1V1传输基本流程</h2><h3 id="1、简述WebRTC媒体协商的核心过程？（4个）"><a href="#1、简述WebRTC媒体协商的核心过程？（4个）" class="headerlink" title="1、简述WebRTC媒体协商的核心过程？（4个）"></a>1、简述WebRTC<code>媒体协商</code>的核心过程？（4个）</h3><ul><li>Amy：创建Offer，设置setLocalDescription</li><li>Bob：收到Offer，设置setRemoteDescription</li><li>Bob：创建Answer，设置setLocalDescription</li><li>Amy：收到answer，设置setRemoteDescription</li></ul><img src="/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/image-20220619083122853.png" class="" title="image-20220619083122853"><h3 id="2、端对端链接完整流程？（画得太好了，有空自己画一画，一定要）"><a href="#2、端对端链接完整流程？（画得太好了，有空自己画一画，一定要）" class="headerlink" title="2、端对端链接完整流程？（画得太好了，有空自己画一画，一定要）"></a>2、端对端链接完整流程？（画得太好了，有空自己画一画，一定要）</h3><ul><li>①媒体协商</li><li>②其次是交换Candidate，进行ICE过程</li><li>③流媒体传输</li></ul><img src="/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/image-20220619083342751.png" class="" title="image-20220619083342751"><h2 id="三、端对端1V1传输基本流程-代码实现"><a href="#三、端对端1V1传输基本流程-代码实现" class="headerlink" title="三、端对端1V1传输基本流程 - 代码实现"></a>三、端对端1V1传输基本流程 - 代码实现</h2><ul><li>html代码实现</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>RTCPeerConnection<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/main.css&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;localVideo&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">playsinline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remoteVideo&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">playsinline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;call&quot;</span>&gt;</span>call<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hangup&quot;</span>&gt;</span>hang up<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>css代码实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  Use of this source code is governed by a BSD-style license</span><br><span class="hljs-comment"> *  that can be found in the LICENSE file in the root of the source</span><br><span class="hljs-comment"> *  tree.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">25px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">134px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#getUserMedia</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.input</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.input</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.output</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Inconsolata&#x27;</span>, <span class="hljs-string">&#x27;Courier New&#x27;</span>, monospace;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">white-space</span>: pre;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">270px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Inconsolata&#x27;</span>, <span class="hljs-string">&#x27;Courier New&#x27;</span>, monospace;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">308px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#senderStats</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#constraints</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1em</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#constraints</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">156px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">section</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">video</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#222</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attr">--width</span>: <span class="hljs-number">45%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--width);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">var</span>(--width);<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">720px</span>) &#123;<br>  <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">56px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.3em</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">90px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#getUserMedia</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">40px</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">section</span><span class="hljs-selector-id">#statistics</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">14px</span>);<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>核心js代码实现（其实就是上面时序图的实现流程，所以说掌握时序图很重要）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> localVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video#localVideo&#x27;</span>);<br><span class="hljs-keyword">var</span> remoteVideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video#remoteVideo&#x27;</span>);<br><span class="hljs-keyword">var</span> btnStart = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#start&#x27;</span>);<br><span class="hljs-keyword">var</span> btnCall = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#call&#x27;</span>);<br><span class="hljs-keyword">var</span> btnHangUp= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#hangup&#x27;</span>);<br><br><br><span class="hljs-keyword">var</span> localStream;<br><span class="hljs-keyword">var</span> pc1; <br><span class="hljs-keyword">var</span> pc2;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotMediaStream</span>(<span class="hljs-params">stream</span>) &#123;<br>  localVideo.<span class="hljs-property">srcObject</span> = stream;<br>  localStream = stream;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleError</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Failed to call getUserMedia&quot;</span>, err);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> constraints = &#123;<br>    <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">audio</span>:<span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(!navigator.<span class="hljs-property">mediaDevices</span> || !navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-property">getUserMedia</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(constraints)<br>    .<span class="hljs-title function_">then</span>(gotMediaStream)<br>    .<span class="hljs-title function_">catch</span>(handleError);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotAnswerDescription</span>(<span class="hljs-params">desc</span>) &#123;<br>  pc2.<span class="hljs-title function_">setLocalDescription</span>(desc);<br><br>  <span class="hljs-comment">//send sdp to caller</span><br>  <span class="hljs-comment">//recieve sdp from callee</span><br>  pc1.<span class="hljs-title function_">setRemoteDescription</span>(desc);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotLocalDescription</span>(<span class="hljs-params">desc</span>) &#123;<br>  pc1.<span class="hljs-title function_">setLocalDescription</span>(desc);<br><br>  <span class="hljs-comment">//send sdp to callee</span><br>  <span class="hljs-comment">//receive sdp from caller</span><br>  pc2.<span class="hljs-title function_">setRemoteDescription</span>(desc);<br>  pc2.<span class="hljs-title function_">createAnswer</span>().<span class="hljs-title function_">then</span>(gotAnswerDescription)<br>  .<span class="hljs-title function_">catch</span>(handleError);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotRemoteStream</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span>(remoteVideo.<span class="hljs-property">srcObject</span> !== e.<span class="hljs-property">streams</span>[<span class="hljs-number">0</span>]) &#123;<br>    remoteVideo.<span class="hljs-property">srcObject</span> = e.<span class="hljs-property">streams</span>[<span class="hljs-number">0</span>];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> offerOptions = &#123;<br><span class="hljs-attr">offerToReceiveAudio</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">offerToReceiveVideo</span>: <span class="hljs-number">1</span> <br>  &#125;<br>  pc1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCPeerConnection</span>();<br>  pc1.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//send candidate to peer</span><br>    <span class="hljs-comment">//receive candidate from peer</span><br>    pc2.<span class="hljs-title function_">addIceCandidate</span>(e.<span class="hljs-property">candidate</span>).<span class="hljs-title function_">catch</span>(handleError);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pc1 ICE candidate&#x27;</span>, e.<span class="hljs-property">candidate</span>);<br>  &#125;<br><br>pc1.<span class="hljs-property">iceconnectionstatechange</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`pc1 ICE state: <span class="hljs-subst">$&#123;pc.iceConnectionState&#125;</span>`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ICE state change event: &#x27;</span>, e);<br>&#125;<br><br>  pc2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RTCPeerConnection</span>();<br>  pc2.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//send candidate to peer</span><br>    <span class="hljs-comment">//receive candidate from peer</span><br>    pc1.<span class="hljs-title function_">addIceCandidate</span>(e.<span class="hljs-property">candidate</span>).<span class="hljs-title function_">catch</span>(handleError);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pc2 ICE candidate&#x27;</span>, e.<span class="hljs-property">candidate</span>);<br>  &#125;<br><br>pc2.<span class="hljs-property">iceconnectionstatechange</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`pc2 ICE state: <span class="hljs-subst">$&#123;pc.iceConnectionState&#125;</span>`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ICE state change event: &#x27;</span>, e);<br>&#125;<br><br>  pc2.<span class="hljs-property">ontrack</span> = gotRemoteStream;<br><br>  <span class="hljs-comment">//add Stream to caller</span><br>  localStream.<span class="hljs-title function_">getTracks</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">track</span>)=&gt;</span>&#123;<br>    pc1.<span class="hljs-title function_">addTrack</span>(track, localStream);<br>  &#125;);<br><br>  pc1.<span class="hljs-title function_">createOffer</span>(offerOptions)<br>  .<span class="hljs-title function_">then</span>(gotLocalDescription)<br>  .<span class="hljs-title function_">catch</span>(handleError);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hangup</span>(<span class="hljs-params"></span>) &#123;<br>  pc1.<span class="hljs-title function_">close</span>();<br>  pc2.<span class="hljs-title function_">close</span>();<br>  pc1 = <span class="hljs-literal">null</span>;<br>  pc2 = <span class="hljs-literal">null</span>;<br>&#125;<br><br>btnStart.<span class="hljs-property">onclick</span> = start;<br>btnCall.<span class="hljs-property">onclick</span> = call;<br>btnHangUp.<span class="hljs-property">onclick</span> = hangup;<br></code></pre></td></tr></table></figure><ul><li>最终效果如下：</li></ul><img src="/2022/06/19/WebRTC%E5%85%A5%E9%97%A8/day10%E7%AB%AF%E5%AF%B9%E7%AB%AF%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/image-20220619094922812.png" class="">]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
      <tag>WireShark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09-WebRTC网络基础补充：P2P/STUN/TURN/ICE知识</title>
    <link href="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基本概念先认识"><a href="#一、基本概念先认识" class="headerlink" title="一、基本概念先认识"></a>一、基本概念先认识</h2><h3 id="1、NAT的全称是什么？NAT是干什么的？"><a href="#1、NAT的全称是什么？NAT是干什么的？" class="headerlink" title="1、NAT的全称是什么？NAT是干什么的？"></a>1、NAT的全称是什么？NAT是干什么的？</h3><ul><li><font color="red">NAT</font>：Network Address Translation，即网络地址映射</li><li><font color="red">作用</font>：①解决IPV4地址不足的问题 ②保护NAT内部计算机的安全</li></ul><h3 id="2、STUN的全称是什么？STUN是干什么的？"><a href="#2、STUN的全称是什么？STUN是干什么的？" class="headerlink" title="2、STUN的全称是什么？STUN是干什么的？"></a>2、STUN的全称是什么？STUN是干什么的？</h3><ul><li><p><font color="red">STUN</font>：Simple Traversal of UDP Through NAT，即UDP对NAT的简单穿越方式（是一种协议）</p></li><li><p><font color="red">功能</font>：通过NAT穿越，内网的计算机与外网能够进行P2P连接通信（有点中介信息服务度的感觉）</p></li><li><p><font color="red">缺陷</font>：①STUN不适合支持TCP连接的穿越 ②STUN方式不支持对称NAT穿越</p></li><li><p>STUN的存在目的就是进行NAT穿越</p></li><li><p>STUN是典型的客户端&#x2F;服务端模式，客户端发送请求，服务端进行响应。</p></li><li><p>本章对STUN协议、协议头、协议体都有详细描述，日后需要再回来看。</p></li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618215247077.png" class=""><h3 id="3、TURN的全称是什么？TURN是干什么的？"><a href="#3、TURN的全称是什么？TURN是干什么的？" class="headerlink" title="3、TURN的全称是什么？TURN是干什么的？"></a>3、TURN的全称是什么？TURN是干什么的？</h3><ul><li><font color="red">TURN</font>：Tranversal Using ReplayNAT，即通过Relay方式穿越NAT</li><li><font color="red">功能</font>：即私网用户发出的报文都要经过 TURNServer 进行 Relay 转发</li><li><font color="red">优点</font>：解决了STUN的无法穿越的问题</li><li>TURN简历在STUN之上，消息格式使用STUN格式消息</li><li>TURN Client 要求服务端分配一个公网IP和Port用户接收或发送数据。</li></ul><h3 id="4、ICE的全称是什么？ICE是干什么的？"><a href="#4、ICE的全称是什么？ICE是干什么的？" class="headerlink" title="4、ICE的全称是什么？ICE是干什么的？"></a><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618215509316.png" class="">4、ICE的全称是什么？ICE是干什么的？</h3><ul><li><font color="red">ICE</font>：Interactive Connectivity EStablishment</li><li><font color="red">功能</font>：ICE不是一种协议，而是一个framework，它整合了STUN和TURN</li><li><font color="red">举例</font>：<code>从①局域网尝试、②NAT穿越尝试、③TRUN服务端中转 </code>这三种模式中，选一个最佳通信模式</li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618215628498.png" class="" title="image-20220618215628498"><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220619081142118.png" class="" title="image-20220619081142118"><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220619081149307.png" class="" title="image-20220619081149307"><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220619081157868.png" class="" title="image-20220619081157868"><h2 id="二、更深入认识NAT"><a href="#二、更深入认识NAT" class="headerlink" title="二、更深入认识NAT"></a>二、更深入认识NAT</h2><h3 id="1、再次认识NAT"><a href="#1、再次认识NAT" class="headerlink" title="1、再次认识NAT"></a>1、再次认识NAT</h3><ul><li>NAT就是内网地址转换到公网地址</li><li>简单来说就是一张地址<code>映射表</code></li></ul><h3 id="2、NAT有哪四个种类？"><a href="#2、NAT有哪四个种类？" class="headerlink" title="2、NAT有哪四个种类？"></a>2、NAT有哪四个种类？</h3><ul><li>完全锥型NAT</li><li>地址限制锥型NAT</li><li>端口限制锥型NAT</li><li>对称型NAT</li></ul><h3 id="3、什么是完全锥型NAT？"><a href="#3、什么是完全锥型NAT？" class="headerlink" title="3、什么是完全锥型NAT？"></a>3、什么是完全锥型NAT？</h3><ul><li><p>Full cone NAT</p></li><li><p>内部机器A访问外网机器C，NAT打开一个端口，后面<strong>外网的任意ip和任意port</strong>都可以访问这个端口，也就是<strong>任意ip+任意port</strong>可以访问机器A</p></li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214518833.png" class="" title="image-20220618214518833"><h3 id="4、什么是地址限制锥型NAT？"><a href="#4、什么是地址限制锥型NAT？" class="headerlink" title="4、什么是地址限制锥型NAT？"></a>4、什么是地址限制锥型NAT？</h3><ul><li>Address Restricted Cone</li><li>内部机器A访问外网机器C，NAT打开一个端口，后面<strong>机器C的任意port</strong>可以访问这个端口，就是只能<strong>固定ip+任意port</strong>访问A</li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214528801.png" class="" title="image-20220618214528801"><h3 id="5、什么是端口限制锥型NAT？"><a href="#5、什么是端口限制锥型NAT？" class="headerlink" title="5、什么是端口限制锥型NAT？"></a>5、什么是端口限制锥型NAT？</h3><ul><li>Port Restricted Cone</li><li>内部机器A访问外网机器C，NAT打开一个端口，后面<strong>机器C的固定port</strong>可以访问这个端口，就是只能<strong>固定ip+固定port</strong>访问A</li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214540839.png" class="" title="image-20220618214540839"><h3 id="6、什么是对称型NAT？"><a href="#6、什么是对称型NAT？" class="headerlink" title="6、什么是对称型NAT？"></a>6、什么是对称型NAT？</h3><ul><li>Symmetric</li><li>连接不同的外部Server，NAT打开的端口会变化。也就是内部机器A连接外网机器B时，NAT会打开一个端口，连接外网机器C时又会打开另外一个端口。</li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214550416.png" class="" title="image-20220618214550416"><h2 id="三、认识NAT穿越过程"><a href="#三、认识NAT穿越过程" class="headerlink" title="三、认识NAT穿越过程"></a>三、认识NAT穿越过程</h2><h3 id="1、NAT穿越原理是什么？"><a href="#1、NAT穿越原理是什么？" class="headerlink" title="1、NAT穿越原理是什么？"></a>1、NAT穿越原理是什么？</h3><ul><li>基于各种NAT特性，让两台私网机器能够p2p通信</li></ul><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214733843.png" class=""><h3 id="2、NAT能穿越成功的组合？（记住哪两种不可能打通即可）"><a href="#2、NAT能穿越成功的组合？（记住哪两种不可能打通即可）" class="headerlink" title="2、NAT能穿越成功的组合？（记住哪两种不可能打通即可）"></a>2、NAT能穿越成功的组合？（记住哪两种不可能打通即可）</h3><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214814385.png" class=""><h3 id="3、NAT类型判断过程？（这图很经典，后面不懂再回来看）"><a href="#3、NAT类型判断过程？（这图很经典，后面不懂再回来看）" class="headerlink" title="3、NAT类型判断过程？（这图很经典，后面不懂再回来看）"></a>3、NAT类型判断过程？（这图很经典，后面不懂再回来看）</h3><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day09%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/image-20220618214917186.png" class="" title="image-20220618214917186">]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-WebRTC信令服务器实现</title>
    <link href="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day08%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day08%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识-socket-io"><a href="#一、认识-socket-io" class="headerlink" title="一、认识 socket.io"></a>一、认识 socket.io</h2><h3 id="1、借助-socket-io-发送给某些对象的相关API？"><a href="#1、借助-socket-io-发送给某些对象的相关API？" class="headerlink" title="1、借助 socket.io 发送给某些对象的相关API？"></a>1、借助 socket.io 发送给某些对象的相关API？</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//给本次连接发消息</span><br>socket.<span class="hljs-title function_">emit</span>()<br><br><span class="hljs-comment">//给某个房间内所有人发消息</span><br>io.<span class="hljs-title function_">in</span>(room).<span class="hljs-title function_">emit</span>()<br><br><span class="hljs-comment">//除本连接外，给某个房间内所有人发消息</span><br>socket.<span class="hljs-title function_">to</span>(room).<span class="hljs-title function_">emit</span>()<br><br><span class="hljs-comment">//除本连接外，给所有人发消息</span><br>socket.<span class="hljs-property">brocast</span>.<span class="hljs-title function_">emit</span>()<br></code></pre></td></tr></table></figure><h3 id="2、socket-io-监听和发送具体消息的格式？"><a href="#2、socket-io-监听和发送具体消息的格式？" class="headerlink" title="2、socket.io 监听和发送具体消息的格式？"></a>2、socket.io 监听和发送具体消息的格式？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发送action命令</span><br><span class="hljs-attr">S</span>:socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;action&#x27;</span>);<br><span class="hljs-attr">C</span>:socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;action&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;);<br><br><span class="hljs-comment">//发送action命令，还有data数据</span><br><span class="hljs-attr">S</span>:socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;action&#x27;</span>, data);<br><span class="hljs-attr">C</span>:socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;action&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;...&#125;);<br><br><span class="hljs-comment">//发送action命令，还有两个数据</span><br><span class="hljs-attr">S</span>:socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;action&#x27;</span>, arg1, arg2);<br><span class="hljs-attr">C</span>:socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;action&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>)&#123;...&#125;);<br>                                             <br><span class="hljs-comment">//发送action命令，还有回调函数</span><br><span class="hljs-attr">S</span>:socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;action&#x27;</span>, data, <span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>)&#123;...&#125;);<br><span class="hljs-attr">C</span>:socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;action&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data, fn</span>)&#123;...&#125;);<br></code></pre></td></tr></table></figure><h3 id="3、在WebRTC中信令服务器有什么作用？"><a href="#3、在WebRTC中信令服务器有什么作用？" class="headerlink" title="3、在WebRTC中信令服务器有什么作用？"></a>3、在WebRTC中信令服务器有什么作用？</h3><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day08%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20220618190417842.png" class="" title="image-20220618190417842"><ul><li>①终端之间交换<font color="red">媒体相关信息</font>（比如编码格式、是否支持音频、是否支持视频等）</li><li>②终端之间交换<font color="red">网络相关信息</font>（比如ip地址、local地址、公网地址等）</li><li>③终端之间进行<font color="red">一些业务操作</font> （比如加入房间、退出房间等）</li></ul><h3 id="4、socket-io是基于TCP还是UDP呢？"><a href="#4、socket-io是基于TCP还是UDP呢？" class="headerlink" title="4、socket.io是基于TCP还是UDP呢？"></a>4、socket.io是基于TCP还是UDP呢？</h3><ul><li>对于音视频来讲可以使用UDP，丢了一两帧数据关系不大。</li><li>但是对于信令或业务请求来讲，一定要能拿到可靠结果，那就需要TCP来保证传输的可靠性。</li><li>socket.io 是基于TCP的</li></ul><h2 id="二、代码借助-socket-io-实现简易版聊天室"><a href="#二、代码借助-socket-io-实现简易版聊天室" class="headerlink" title="二、代码借助 socket.io 实现简易版聊天室"></a>二、代码借助 socket.io 实现简易版聊天室</h2><h3 id="1、安装依赖库"><a href="#1、安装依赖库" class="headerlink" title="1、安装依赖库"></a>1、安装依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">这里进行指定版本，防止一些方法已经发送变化</span><br>npm install log4js@5.2.0<br>npm install socket.io@2.0.4  <br></code></pre></td></tr></table></figure><h3 id="2、代码实现聊天室-服务端部分"><a href="#2、代码实现聊天室-服务端部分" class="headerlink" title="2、代码实现聊天室(服务端部分)"></a>2、代码实现聊天室(服务端部分)</h3><ul><li>服务端代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//服务端代码</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> serveIndex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;serve-index&#x27;</span>);<br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> socketIo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;socket.io&#x27;</span>);<br><span class="hljs-keyword">var</span> log4js = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;log4js&#x27;</span>);<br><br><span class="hljs-comment">//log4js的基本配置（无须多做了解）</span><br>log4js.<span class="hljs-title function_">configure</span>(&#123;<br>  <span class="hljs-attr">appenders</span>: &#123;<br>      <span class="hljs-attr">file</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;app.log&#x27;</span>,<br>          <span class="hljs-attr">layout</span>: &#123;<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pattern&#x27;</span>,<br>              <span class="hljs-attr">pattern</span>: <span class="hljs-string">&#x27;%r %p - %m&#x27;</span>,<br>          &#125;<br>      &#125;<br>  &#125;,<br>  <span class="hljs-attr">categories</span>: &#123;<br>     <span class="hljs-attr">default</span>: &#123;<br>        <span class="hljs-attr">appenders</span>: [<span class="hljs-string">&#x27;file&#x27;</span>],<br>        <span class="hljs-attr">level</span>: <span class="hljs-string">&#x27;debug&#x27;</span><br>     &#125;<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">var</span> logger = log4js.<span class="hljs-title function_">getLogger</span>();<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">//顺序不能换</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">serveIndex</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br><br><span class="hljs-keyword">var</span> http_server = http.<span class="hljs-title function_">createServer</span>(app);<br>http_server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9980</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br><br><span class="hljs-comment">//绑定socket.io到http服务</span><br><span class="hljs-keyword">var</span> io = socketIo.<span class="hljs-title function_">listen</span>(http_server)<br><br>io.<span class="hljs-property">sockets</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>)=&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有人发起了链接请求111&quot;</span>);<br>  <br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, data</span>)=&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;message&quot;</span> + room + data);<br>    io.<span class="hljs-title function_">in</span>(room).<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;message&#x27;</span>, room, socket.<span class="hljs-property">id</span>, data); <span class="hljs-comment">//房间内所有人，除了自己</span><br>  &#125;);<br><br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;join&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room</span>)=&gt;</span> &#123;<br>socket.<span class="hljs-title function_">join</span>(room);<br><span class="hljs-keyword">var</span> myRoom = io.<span class="hljs-property">sockets</span>.<span class="hljs-property">adapter</span>.<span class="hljs-property">rooms</span>[room];<br><span class="hljs-keyword">var</span> users = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(myRoom.<span class="hljs-property">sockets</span>).<span class="hljs-property">length</span>;<br>logger.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;the number of user in room is: &#x27;</span> + users);<br> socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;joined&#x27;</span>, room, socket.<span class="hljs-property">id</span>);<br>  &#125;);<br><br>  socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;leave&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room</span>)=&gt;</span> &#123;<br><span class="hljs-keyword">var</span> myRoom = io.<span class="hljs-property">sockets</span>.<span class="hljs-property">adapter</span>.<span class="hljs-property">rooms</span>[room];<br><span class="hljs-keyword">var</span> users = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(myRoom.<span class="hljs-property">sockets</span>).<span class="hljs-property">length</span>;<br>logger.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;the number of user in room is: &#x27;</span> + (users-<span class="hljs-number">1</span>));<br><br>socket.<span class="hljs-title function_">leave</span>(room);<br>socket.<span class="hljs-title function_">to</span>(room).<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;bye&#x27;</span>, room, socket.<span class="hljs-property">id</span>)<span class="hljs-comment">//房间内所有人,除自己外</span><br> socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leaved&#x27;</span>, room, socket.<span class="hljs-property">id</span>);<br>&#125;);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;webrtc服务启动成功&quot;</span>);<br><br><br><br></code></pre></td></tr></table></figure><h3 id="3、代码实现客户端部分"><a href="#3、代码实现客户端部分" class="headerlink" title="3、代码实现客户端部分"></a>3、代码实现客户端部分</h3><ul><li>index.html 代码部分</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html 代码部分 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Chat Room<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/main.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>UserName: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>room: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;112222&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;room&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connect&quot;</span>&gt;</span>Conect<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leave&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Leave<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Content: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 1.5;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;output&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Input: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>Send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/client.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>.&#x2F;js&#x2F;client.js 代码实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ./js/client.js 代码实现</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-keyword">var</span> userName = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input#username&#x27;</span>);<br><span class="hljs-keyword">var</span> inputRoom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input#room&#x27;</span>);<br><span class="hljs-keyword">var</span> btnConnect = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#connect&#x27;</span>);<br><span class="hljs-keyword">var</span> btnLeave = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#leave&#x27;</span>);<br><span class="hljs-keyword">var</span> outputArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea#output&#x27;</span>);<br><span class="hljs-keyword">var</span> inputArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea#input&#x27;</span>);<br><span class="hljs-keyword">var</span> btnSend = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button#send&#x27;</span>);<br><br><span class="hljs-keyword">var</span> socket;<br><span class="hljs-keyword">var</span> room;<br><br>btnConnect.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span> &#123;<br><span class="hljs-comment">//connect</span><br>socket = io.<span class="hljs-title function_">connect</span>();<br><br><span class="hljs-comment">//recieve message</span><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;joined&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, id</span>) =&gt;</span> &#123;<br>btnConnect.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>inputArea.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>btnSend.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;leaved&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, id</span>) =&gt;</span> &#123;<br>btnConnect.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>inputArea.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>btnSend.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><br>socket.<span class="hljs-title function_">disconnect</span>();<br>&#125;);<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">room, id, data</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;message:&#x27;</span> + room + id + data);<br>outputArea.<span class="hljs-property">scrollTop</span> = outputArea.<span class="hljs-property">scrollHeight</span>; <span class="hljs-comment">//窗口总是显示最后的内容</span><br>outputArea.<span class="hljs-property">value</span> = outputArea.<span class="hljs-property">value</span> + data + <span class="hljs-string">&quot;\n\r&quot;</span>;<br>&#125;)<br><br>socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;disconnect&quot;</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>) =&gt;</span> &#123;<br>    btnConnect.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>    btnLeave.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>    inputArea.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>    btnSend.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>  &#125;);<br><br><span class="hljs-comment">//send message</span><br>room = inputRoom.<span class="hljs-property">value</span>;<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;join&#x27;</span>, room);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userName.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;发送join信息&quot;</span>);<br>&#125;<br><br>btnSend.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">var</span> data = inputArea.<span class="hljs-property">value</span>;<br>data = userName.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;:&quot;</span> + data;<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;message&#x27;</span>, room, data);<br>inputArea.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br>btnLeave.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>room = inputRoom.<span class="hljs-property">value</span>;<br>socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;leave&#x27;</span>, room);<br>&#125;<br><br>inputArea.<span class="hljs-property">onkeypress</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//event = event || window.event;</span><br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>) &#123;<br>    <span class="hljs-comment">//回车发送消息</span><br>    <span class="hljs-keyword">var</span> data = inputArea.<span class="hljs-property">value</span>;<br>    data = userName.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;:&quot;</span> + data;<br>    socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;message&quot;</span>, room, data);<br>    inputArea.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    event.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">//阻止默认行为</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4、简易聊天室最终效果图如下"><a href="#4、简易聊天室最终效果图如下" class="headerlink" title="4、简易聊天室最终效果图如下"></a>4、简易聊天室最终效果图如下</h3><img src="/2022/06/18/WebRTC%E5%85%A5%E9%97%A8/day08%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/image-20220618205623601.png" class="" title="最终实现safari和chrome聊天"><h3 id="5、附上packet-json文件内容"><a href="#5、附上packet-json文件内容" class="headerlink" title="5、附上packet.json文件内容"></a>5、附上packet.json文件内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;webserver&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;server.js&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;express&quot;</span>: <span class="hljs-string">&quot;^4.18.1&quot;</span>,<br>    <span class="hljs-string">&quot;log4js&quot;</span>: <span class="hljs-string">&quot;^5.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;serve-index&quot;</span>: <span class="hljs-string">&quot;^1.9.1&quot;</span>,<br>    <span class="hljs-string">&quot;socket.io&quot;</span>: <span class="hljs-string">&quot;^2.0.4&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;&#125;,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;node server.js&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-获取音频视频</title>
    <link href="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/"/>
    <url>/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音视频数据采集"><a href="#一、音视频数据采集" class="headerlink" title="一、音视频数据采集"></a>一、音视频数据采集</h2><h3 id="1、认识-MediaDevices-getUserMedia-是什么的？"><a href="#1、认识-MediaDevices-getUserMedia-是什么的？" class="headerlink" title="1、认识 MediaDevices.getUserMedia() 是什么的？"></a>1、认识 <code>MediaDevices.getUserMedia()</code> 是什么的？</h3><ul><li><p>会提示用户给与使用媒体输入的许可，媒体输入会产生一个 <code>MediaStream</code>，里面包含了请求媒体类型的轨道</p></li><li><p>比如：视频轨道、音频轨道</p></li><li><p>它返回一个 <code>Promise</code> 对象，用户授权同意后，resolve回调一个 MediaStream对象。</p></li><li><p>详细用法： <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia">https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia</a></p></li></ul><h3 id="2、由于各个浏览器厂商对媒体设备的获取，以及音视频流的获取方法名称不同，如果适配呢？"><a href="#2、由于各个浏览器厂商对媒体设备的获取，以及音视频流的获取方法名称不同，如果适配呢？" class="headerlink" title="2、由于各个浏览器厂商对媒体设备的获取，以及音视频流的获取方法名称不同，如果适配呢？"></a>2、由于各个浏览器厂商对媒体设备的获取，以及音视频流的获取方法名称不同，如果适配呢？</h3><ul><li>通常借助一个 <code>adapter.js</code> 来做适配</li><li><a href="https://webrtc.github.io/adapter/adapter-latest.js">https://webrtc.github.io/adapter/adapter-latest.js</a></li></ul><h3 id="3、获取视频音频，以及展示的核心代码如下："><a href="#3、获取视频音频，以及展示的核心代码如下：" class="headerlink" title="3、获取视频音频，以及展示的核心代码如下："></a>3、获取视频音频，以及展示的核心代码如下：</h3><ul><li>html代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">playsinline</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>js代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> videoElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video&#x27;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> constraints = &#123; <span class="hljs-attr">audio</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span> &#125;;<br>navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(constraints)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">stream</span>)=&gt;</span> &#123;<br>videoElement.<span class="hljs-property">srcObject</span> = stream;<br><span class="hljs-title function_">getDevicesInfo</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getUserMedia&quot;</span> + err);<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其中constraint 可以对音频和视频的参数进行适配</li><li>视频：宽高比例、帧率、前后摄像头…</li><li>音频：采样率、采样大小、音量、回音消除、自动增益、降噪…</li></ul><h3 id="4、如何获取视频流中的某一帧数据呢？"><a href="#4、如何获取视频流中的某一帧数据呢？" class="headerlink" title="4、如何获取视频流中的某一帧数据呢？"></a>4、如何获取视频流中的某一帧数据呢？</h3><ul><li>html代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">playsinline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;snapshot&quot;</span>&gt;</span>截屏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 200px; height: 150px;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;picture&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>js代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">snapshotElement.<span class="hljs-property">onclick</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>pictureElement.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">drawImage</span>(videoElement,<br><span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>pictureElement.<span class="hljs-property">width</span>, pictureElement.<span class="hljs-property">height</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>思路：借助 <code>canvas</code> 标签，把 <code>video</code> 中数据绘制出来</li></ul><h3 id="5、如何仅仅采集和播放音频呢？"><a href="#5、如何仅仅采集和播放音频呢？" class="headerlink" title="5、如何仅仅采集和播放音频呢？"></a>5、如何仅仅采集和播放音频呢？</h3><ul><li>html代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;audio&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>js代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> audioElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;audio&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> constraints = &#123; <span class="hljs-attr">audio</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">video</span>: <span class="hljs-literal">false</span> &#125;;<br>navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">getUserMedia</span>(constraints)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">stream</span>)=&gt;</span> &#123;<br>audioElement.<span class="hljs-property">srcObject</span> = stream;<br><span class="hljs-title function_">getDevicesInfo</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getUserMedia&quot;</span> + err);<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/image-20220612195354615.png" class="" title="最终效果图"><h3 id="6、一些MediaStream的常用API（用到再说吧）"><a href="#6、一些MediaStream的常用API（用到再说吧）" class="headerlink" title="6、一些MediaStream的常用API（用到再说吧）"></a>6、一些MediaStream的常用API（用到再说吧）</h3><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/image-20220612195626060.png" class="" title="image-20220612195626060"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/image-20220612195636710.png" class="" title="image-20220612195636710"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day03%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/image-20220612195650400.png" class="" title="image-20220612195650400">]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day02-借助nodejs搭建HTTPS服务器</title>
    <link href="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day02%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day02%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Nodejs服务器搭建"><a href="#一、Nodejs服务器搭建" class="headerlink" title="一、Nodejs服务器搭建"></a>一、Nodejs服务器搭建</h2><h3 id="1、为什么要搭建HTTPS服务器？"><a href="#1、为什么要搭建HTTPS服务器？" class="headerlink" title="1、为什么要搭建HTTPS服务器？"></a>1、为什么要搭建HTTPS服务器？</h3><ul><li><font color="red">搭建服务器的原因</font>：web代码需要一个服务器，才能方便的被浏览器解析展示</li><li><font color="red">搭建HTTPS的原因</font>：访问用户的(隐私)音视频设备，需要通过HTTPS才能完全访问。</li></ul><h3 id="2、如何获取HTTPS证书？"><a href="#2、如何获取HTTPS证书？" class="headerlink" title="2、如何获取HTTPS证书？"></a>2、如何获取HTTPS证书？</h3><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day02%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220612174651525.png" class=""><ul><li>然后在<font color="red">部署</font>中有各个平台的部署方案，还是非常详细的。</li></ul><h3 id="3、部署一个最简单的http服务器，代码如下："><a href="#3、部署一个最简单的http服务器，代码如下：" class="headerlink" title="3、部署一个最简单的http服务器，代码如下："></a>3、部署一个最简单的http服务器，代码如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">var</span> serveIndex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;serve-index&#x27;</span>);<br><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">//顺序不能换</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">serveIndex</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br><br><span class="hljs-keyword">var</span> http_server = http.<span class="hljs-title function_">createServer</span>(app);<br>http_server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9980</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;webrtc服务启动成功&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><code>express</code>：是nodejs的服务器框架</li><li><code>serve-index</code>：是让服务器的资源可以通过web展示出来</li></ul><h3 id="4、将该服务端挂载在HTTPS下，也就是nginx的https代理"><a href="#4、将该服务端挂载在HTTPS下，也就是nginx的https代理" class="headerlink" title="4、将该服务端挂载在HTTPS下，也就是nginx的https代理"></a>4、将该服务端挂载在HTTPS下，也就是nginx的https代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。<br>server_name webrtc.runduck.cn;  #将localhost修改为您证书绑定的域名，例如：www.example.com。<br>root html;<br>index index.html index.htm;<br>ssl_certificate webrtc_cert/7929948_webrtc.runduck.cn.pem;   #将domain name.pem替换成您证书的文件名。<br>ssl_certificate_key webrtc_cert/7929948_webrtc.runduck.cn.key;   #将domain name.key替换成您证书的密钥文件名。<br>ssl_session_timeout 5m;<br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。<br>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。<br>ssl_prefer_server_ciphers on;   <br>location / &#123;<br>  proxy_pass http://127.0.0.1:9980;<br>&#125;<br>&#125;   <br><br>server &#123;<br>    listen       80;<br>    server_name webrtc.runduck.cn;<br>    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; <br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>这样通过 <code>https://webrtc.runduck.cn/</code> 就可以访问我们部署好的服务器了。</li></ul><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day02%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220612175149553.png" class=""><h3 id="二、获取用户的输入输出设备"><a href="#二、获取用户的输入输出设备" class="headerlink" title="二、获取用户的输入输出设备"></a>二、获取用户的输入输出设备</h3><h3 id="1、认识-MediaDevices-的作用？"><a href="#1、认识-MediaDevices-的作用？" class="headerlink" title="1、认识 MediaDevices  的作用？"></a>1、认识 <code>MediaDevices</code>  的作用？</h3><ul><li><code>navigator.mediaDevices</code> 接口提供访问连接媒体输入的设备</li><li>比如：照相机、麦克风、屏幕共享等</li><li>它可以使你取得任何硬件资源的媒体数据</li></ul><h3 id="2、认识-MediaDevices-enumerateDevices-的作用？"><a href="#2、认识-MediaDevices-enumerateDevices-的作用？" class="headerlink" title="2、认识 MediaDevices.enumerateDevices() 的作用？"></a>2、认识 <code>MediaDevices.enumerateDevices()</code> 的作用？</h3><ul><li><p>获取有关系统中可用的<font color="red">媒体输入和输出设备</font>的一系列信息</p></li><li><p>它的返回值是一个 <code>promise</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-keyword">var</span> audioSource  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;select#audioSource&quot;</span>);<br><span class="hljs-keyword">var</span> audioOutput  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;select#audioOutput&quot;</span>);<br><span class="hljs-keyword">var</span> videoSource  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;select#videoSource&quot;</span>);<br><br><span class="hljs-keyword">if</span>(!navigator.<span class="hljs-property">mediaDevices</span> ||<br>!navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-property">enumerateDevices</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;enumerateDevices is not supported!&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">enumerateDevices</span>()<br>.<span class="hljs-title function_">then</span>(gotDevices)<br>.<span class="hljs-title function_">catch</span>(handleError);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gotDevices</span>(<span class="hljs-params">deviceInfos</span>)&#123;<br>deviceInfos.<span class="hljs-title function_">forEach</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params">deviceInfo</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(deviceInfo.<span class="hljs-property">kind</span> + <span class="hljs-string">&quot;: label = &quot;</span> <br>+ deviceInfo.<span class="hljs-property">label</span> + <span class="hljs-string">&quot;: id = &quot;</span><br>+ deviceInfo.<span class="hljs-property">deviceId</span> + <span class="hljs-string">&quot;: groupId = &quot;</span><br>+ deviceInfo.<span class="hljs-property">groupId</span>);<br><span class="hljs-keyword">var</span> option = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;option&#x27;</span>);<br>option.<span class="hljs-property">text</span> = deviceInfo.<span class="hljs-property">label</span>;<br>option.<span class="hljs-property">value</span> = deviceInfo.<span class="hljs-property">deviceId</span>;<br><span class="hljs-keyword">if</span>(deviceInfo.<span class="hljs-property">kind</span> === <span class="hljs-string">&#x27;audioinput&#x27;</span>)&#123;<br>audioSource.<span class="hljs-title function_">appendChild</span>(option);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(deviceInfo.<span class="hljs-property">kind</span> === <span class="hljs-string">&#x27;audiooutput&#x27;</span>)&#123;<br>audioOutput.<span class="hljs-title function_">appendChild</span>(option);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(deviceInfo.<span class="hljs-property">kind</span> === <span class="hljs-string">&#x27;videoinput&#x27;</span>)&#123;<br>videoSource.<span class="hljs-title function_">appendChild</span>(option);<br>&#125;<br>&#125;);<br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleError</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; : &quot;</span> + err.<span class="hljs-property">message</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>代码运行成功如下：</li></ul><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day02%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220612181336272.png" class=""><h3 id="3、但是上述代码，在Safari中运行，却不能拿到设备信息，为什么呢？"><a href="#3、但是上述代码，在Safari中运行，却不能拿到设备信息，为什么呢？" class="headerlink" title="3、但是上述代码，在Safari中运行，却不能拿到设备信息，为什么呢？"></a>3、但是上述代码，在Safari中运行，却不能拿到设备信息，为什么呢？</h3><ul><li>因为Safari有更加严格的用户隐私权限保护协议</li><li>当调用 <code>navigator.mediaDevices.getUserMedia(constraints)</code> 时，可以获取用户权限弹窗，用户同意即可获取设备信息了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-初始WebRTC</title>
    <link href="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WebRTC基础概念"><a href="#一、WebRTC基础概念" class="headerlink" title="一、WebRTC基础概念"></a>一、WebRTC基础概念</h2><h3 id="1、一句话介绍下WebRTC是什么？"><a href="#1、一句话介绍下WebRTC是什么？" class="headerlink" title="1、一句话介绍下WebRTC是什么？"></a>1、一句话介绍下WebRTC是什么？</h3><ul><li>音视频处理 + 即使通讯的开源库</li></ul><h3 id="2、WebRTC主要用于web吗？那主要应用于哪些领域呢？"><a href="#2、WebRTC主要用于web吗？那主要应用于哪些领域呢？" class="headerlink" title="2、WebRTC主要用于web吗？那主要应用于哪些领域呢？"></a>2、WebRTC主要用于web吗？那主要应用于哪些领域呢？</h3><ul><li>一开始是为了web设计的</li><li>现在不仅仅适用于web，已经全平台通用（包括iOS、安卓）</li></ul><h3 id="3、那么FFMpeg和WebRTC之间是什么关系呢？"><a href="#3、那么FFMpeg和WebRTC之间是什么关系呢？" class="headerlink" title="3、那么FFMpeg和WebRTC之间是什么关系呢？"></a>3、那么FFMpeg和WebRTC之间是什么关系呢？</h3><ul><li><p>两个框架都是音视频领域的霸主。FFmpeg是基础，WebRTC也使用它</p></li><li><p><font color="red">FFMpeg</font>：更多的用于音视频编辑与播放器</p></li><li><p><font color="red">WebRTC</font>：更多的用于音视频实时通信，比如网络抖动、网络丢包、网络评估、回音消除、降噪、自动增益等。</p></li></ul><h2 id="二、WebRTC原理与架构"><a href="#二、WebRTC原理与架构" class="headerlink" title="二、WebRTC原理与架构"></a>二、WebRTC原理与架构</h2><h3 id="1、WebRTC的整体架构图？"><a href="#1、WebRTC的整体架构图？" class="headerlink" title="1、WebRTC的整体架构图？"></a>1、WebRTC的整体架构图？</h3><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/format,png.png" class=""><ul><li><font color="red">紫色部分</font>是Web开发者API层</li><li><font color="red">蓝色实线部分</font>是面向浏览器厂商的API层</li><li><font color="red">蓝色虚线部分</font>浏览器厂商可以自定义实现</li></ul><h3 id="2、WebRTC的目录结构-后面再回来看"><a href="#2、WebRTC的目录结构-后面再回来看" class="headerlink" title="2、WebRTC的目录结构(后面再回来看)"></a>2、WebRTC的目录结构(后面再回来看)</h3><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612171615403.png" class="" title="image-20220612171615403"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612171621596.png" class="" title="image-20220612171621596"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612171629116.png" class="" title="image-20220612171629116"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612171634006.png" class="" title="image-20220612171634006"><h3 id="3、WebRTC重要的三个类理解？"><a href="#3、WebRTC重要的三个类理解？" class="headerlink" title="3、WebRTC重要的三个类理解？"></a>3、WebRTC重要的三个类理解？</h3><ul><li><font color="red">MediaStream</font>：里面可以包含多个轨道，用于音视频传输</li><li><font color="red">RTCDataChannel</font>：里面可以传输文本、二进制数据(非音视频数据)</li><li><font color="red">RTCPeerConnection</font>：是一个大而全、最重要的类</li></ul><h3 id="4、RTCPeerConnection调用过程（后续，一定要能自己绘制，然后换成高清图）"><a href="#4、RTCPeerConnection调用过程（后续，一定要能自己绘制，然后换成高清图）" class="headerlink" title="4、RTCPeerConnection调用过程（后续，一定要能自己绘制，然后换成高清图）"></a>4、<font color="red">RTCPeerConnection</font>调用过程（后续，一定要能自己绘制，然后换成高清图）</h3><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612172723861.png" class="" title="image-20220612172723861"><img src="/2022/06/12/WebRTC%E5%85%A5%E9%97%A8/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220612172737582.png" class="" title="image-20220612172737582">]]></content>
    
    
    <categories>
      
      <category>WebRTC入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>WebRTC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day11-【实战】视频编码/解码</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识SPS与PPS"><a href="#一、认识SPS与PPS" class="headerlink" title="一、认识SPS与PPS"></a>一、认识SPS与PPS</h2><h3 id="1、认识SPS？主要包含哪些信息？"><a href="#1、认识SPS？主要包含哪些信息？" class="headerlink" title="1、认识SPS？主要包含哪些信息？"></a>1、认识SPS？主要包含哪些信息？</h3><ul><li>SPS(Sequence Parameter Set)，序列参数集，作用于一串连续的视频图像。</li><li>比如：帧数、解码图像尺寸、参考帧数目</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604191831321.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604191854932.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604195729151.png" class=""><h3 id="2、认识PPS？主要包含哪些信息？"><a href="#2、认识PPS？主要包含哪些信息？" class="headerlink" title="2、认识PPS？主要包含哪些信息？"></a>2、认识PPS？主要包含哪些信息？</h3><ul><li>PPS(Picture Parameter Set)，图像参数集，作用于视频序列中的图像</li><li>比如：熵编码选择标识、片组数目</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604191808115.png" class=""><h3 id="3、掌握Profile"><a href="#3、掌握Profile" class="headerlink" title="3、掌握Profile"></a>3、掌握Profile</h3><ul><li>H264 Profile：对视频压缩特性的描述，Profile越高，说明采用了越高级的压缩特性</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604195557564.png" class="" title="image-20220604195557564"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604195603752.png" class="" title="image-20220604195603752"><h3 id="4、掌握H264-Level"><a href="#4、掌握H264-Level" class="headerlink" title="4、掌握H264 Level"></a>4、掌握H264 Level</h3><ul><li>H264 Level：是对视频的描述，Level越高，视频的码率，分辨率越高</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604195655374.png" class="" title="image-20220604195655374"><h3 id="5、视频分析工具主流有哪些（说两个）？"><a href="#5、视频分析工具主流有哪些（说两个）？" class="headerlink" title="5、视频分析工具主流有哪些（说两个）？"></a>5、视频分析工具主流有哪些（说两个）？</h3><ul><li>Evecard Stream Eye</li><li>雷神开发的工具</li></ul><h3 id="二、H264编码实战"><a href="#二、H264编码实战" class="headerlink" title="二、H264编码实战"></a>二、H264编码实战</h3><h3 id="1、基本步骤，主要四步"><a href="#1、基本步骤，主要四步" class="headerlink" title="1、基本步骤，主要四步"></a>1、基本步骤，主要四步</h3><ul><li>打开编码器</li><li>转换NV12到YUV420P</li><li>准备编码数据 AVFrame</li><li>H264编码</li></ul><h3 id="2、口述下NV12转YUV420p的思路？"><a href="#2、口述下NV12转YUV420p的思路？" class="headerlink" title="2、口述下NV12转YUV420p的思路？"></a>2、口述下NV12转YUV420p的思路？</h3><ul><li>NV12数据存放结构：YYYYYYYYYYUVUVUV</li><li>YUV420p数据存放结构：YYYYYYYYYYUUUVVV</li><li><font color="red">从NV12中分别提取出Y、U、V数据，然后进行重新组合存放，即可。</font></li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605192735416.png" class=""><h3 id="3、在进行NV12转YUV420p时，由于手误向文件中写入了两次数据，播放文件，会出现什么现象？"><a href="#3、在进行NV12转YUV420p时，由于手误向文件中写入了两次数据，播放文件，会出现什么现象？" class="headerlink" title="3、在进行NV12转YUV420p时，由于手误向文件中写入了两次数据，播放文件，会出现什么现象？"></a>3、在进行NV12转YUV420p时，由于手误向文件中写入了两次数据，播放文件，会出现什么现象？</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605182230483.png" class=""><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>第一次写入NV12数据</li><li>第二次写入YUV420p数据</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 640x480 -pixel_format yuv420p -framerate 25 420p.yuv<br></code></pre></td></tr></table></figure><ul><li>以上指令播放时，会出现<font color="red">录屏动作被放缓了两倍，并且视频颜色闪烁</font></li><li>原因：Y分量没问题，UV分量部分错位了，可以通过以下指令进行调试测试。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 640x480 -pixel_format yuv420p -framerate 25 -vf extractplanes=<span class="hljs-string">&#x27;y&#x27;</span> 420p.yuv<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 640x480 -pixel_format yuv420p -framerate 25 -vf extractplanes=<span class="hljs-string">&#x27;u&#x27;</span> 420p.yuv<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffplay</span> -video_size <span class="hljs-number">640</span>x480 -pixel_format yuv420p -framerate <span class="hljs-number">25</span> -vf extractplanes=&#x27;v&#x27; <span class="hljs-number">420</span>p.yuv<br></code></pre></td></tr></table></figure><ul><li>通过上面指令，就可以明显看到u、v分量的闪烁效果。而 y分量的缺只是播放速度减慢了。</li></ul><h3 id="4、在编码H264的时候，如果少了下面图中两个步骤，会产生什么效果？"><a href="#4、在编码H264的时候，如果少了下面图中两个步骤，会产生什么效果？" class="headerlink" title="4、在编码H264的时候，如果少了下面图中两个步骤，会产生什么效果？"></a>4、在编码H264的时候，如果少了下面图中两个步骤，会产生什么效果？</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605192501173.png" class=""><ul><li>注释一：会导致pts混乱，最终播放的h264文件，会有马赛克。</li><li>注释二：会导致最终h264文件少掉几帧数据，不完整，因为压缩缓冲区的数据没被刷出来。</li></ul><h3 id="5、H264编码完整代码如下"><a href="#5、H264编码完整代码如下" class="headerlink" title="5、H264编码完整代码如下"></a>5、H264编码完整代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_WIDTH 640</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V_HEIGHT 480</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> rec_status = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_status</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>&#123;<br>    rec_status = status;<br>&#125;<br><br><span class="hljs-comment">///打开编码器</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">open_encoder</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, AVCodecContext **enc_ctx)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">const</span> AVCodec *codec = <span class="hljs-literal">NULL</span>;<br>    codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libx264&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!codec) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avcodec_find_encoder_by_name error \n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    *enc_ctx = avcodec_alloc_context3(codec);<br>    <span class="hljs-keyword">if</span> (!enc_ctx) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avcodec_alloc_context3 error \n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//SPS、PPS</span><br>    (*enc_ctx)-&gt;profile = FF_PROFILE_H264_HIGH_444;<br>    (*enc_ctx)-&gt;level = <span class="hljs-number">50</span>; <span class="hljs-comment">//表示Level是5.0</span><br>    <br>    <span class="hljs-comment">//设置分辨率</span><br>    (*enc_ctx)-&gt;width = width;<br>    (*enc_ctx)-&gt;height = height;<br>    <br>    <span class="hljs-comment">//GOP</span><br>    (*enc_ctx)-&gt;gop_size = <span class="hljs-number">250</span>;<br>    (*enc_ctx)-&gt;keyint_min = <span class="hljs-number">25</span>; <span class="hljs-comment">//optional</span><br>    <br>    <span class="hljs-comment">//设置B帧数据</span><br>    (*enc_ctx)-&gt;max_b_frames = <span class="hljs-number">3</span>; <span class="hljs-comment">//optional</span><br>    (*enc_ctx)-&gt;has_b_frames = <span class="hljs-number">1</span>; <span class="hljs-comment">//optional</span><br>    <br>    <span class="hljs-comment">//参考帧的数量</span><br>    (*enc_ctx)-&gt;refs = <span class="hljs-number">3</span>; <span class="hljs-comment">//optional</span><br>    (*enc_ctx)-&gt;pix_fmt = AV_PIX_FMT_YUV420P;<br>    <br>    <span class="hljs-comment">//设置码率</span><br>    (*enc_ctx)-&gt;bit_rate = <span class="hljs-number">600000</span>; <span class="hljs-comment">//600kbps</span><br>    <br>    <span class="hljs-comment">//设置帧率</span><br>    (*enc_ctx)-&gt;time_base = (AVRational)&#123;<span class="hljs-number">1</span>, <span class="hljs-number">25</span>&#125;; <span class="hljs-comment">//帧与帧直接的间隔是time_base</span><br>    (*enc_ctx)-&gt;framerate = (AVRational)&#123;<span class="hljs-number">25</span>, <span class="hljs-number">1</span>&#125;; <span class="hljs-comment">//帧率，每秒 25 帧</span><br>    <br>    ret = avcodec_open2(*enc_ctx, codec, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avcodec_open2 error \n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">///创建AVFrame</span><br><span class="hljs-type">static</span> AVFrame* <span class="hljs-title function_">create_frame</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    AVFrame *frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span> (!frame) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error av_frame_alloc error \n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//设置参数</span><br>    frame-&gt;width = width;<br>    frame-&gt;height = height;<br>    frame-&gt;format = AV_PIX_FMT_YUV420P;<br>    <br>    <span class="hljs-comment">//alloc inner memory</span><br>    ret = av_frame_get_buffer(frame, <span class="hljs-number">32</span>); <span class="hljs-comment">//按32位对其（TODO）</span><br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error av_frame_get_buffer error \n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <span class="hljs-keyword">return</span> frame;<br>    <br>__ERROR:<br>    <span class="hljs-keyword">if</span> (frame) &#123;<br>        av_frame_free(&amp;frame);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">///h264编码</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(AVCodecContext *enc_ctx, AVFrame *frame,AVPacket *newpkt,FILE *outfile)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!enc_ctx || !newpkt || !outfile) &#123; <span class="hljs-comment">//参数检查</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error encode 参数有误 \n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (frame) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send frame to encoder, pts=%lld \n&quot;</span>, frame-&gt;pts);<br>    &#125;<br>    <br>    ret = avcodec_send_frame(enc_ctx, frame);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> strErr[<span class="hljs-number">1024</span>];<br>        av_strerror(ret, strErr, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avcodec_send_frame error , %s \n&quot;</span>, strErr);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        ret = avcodec_receive_packet(enc_ctx, newpkt);<br>        <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avcodec_receive_packet error \n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        fwrite(newpkt-&gt;data, <span class="hljs-number">1</span>, newpkt-&gt;size, outfile);<br>        fflush(outfile);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">///录视频（主入口）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_video</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    AVCodecContext *enc_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;video_size&quot;</span>, <span class="hljs-string">&quot;640x480&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;framerate&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;pixel_format&quot;</span>, <span class="hljs-string">&quot;nv12&quot;</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    open_encoder(V_WIDTH, V_HEIGHT, &amp;enc_ctx);<br>    <br>    <span class="hljs-comment">//创建AVFrame、AVPacket</span><br>    AVFrame *frame = create_frame(V_WIDTH, V_HEIGHT);<br>    AVPacket *newpkt = av_packet_alloc();<br>    <span class="hljs-keyword">if</span> (!newpkt) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error av_packet_alloc&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> basePts = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error avformat_open_input error \n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *yuvPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/420p.yuv&quot;</span>;<br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/420p.h264&quot;</span>;<br>    FILE *yuvFile = fopen(yuvPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (yuvFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error yuvFile fopen failed \n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (outPath == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error outPath fopen failed \n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || rec_status == <span class="hljs-number">1</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// (宽 * 高) * （yuv420=1.5 或 yuv422=2 或 yuv444=3）；nv12属于yuv420</span><br>            <span class="hljs-comment">// 640*480*1.5 = 460800</span><br>            <span class="hljs-comment">//fwrite(pkt.data, 460800, 1, yuvFile);</span><br>            <span class="hljs-comment">//fflush(yuvFile);</span><br>            <br>            <span class="hljs-comment">// NV12 转 YUV420p</span><br>            <span class="hljs-comment">//YYYYYYYYYYYUVUVUV NV12</span><br>            <span class="hljs-comment">//YYYYYYYYYYYUUUVVV YUV420P</span><br>            <span class="hljs-type">int</span> YDataSize = V_WIDTH * V_HEIGHT; <span class="hljs-comment">//307200</span><br>            <span class="hljs-built_in">memcpy</span>(frame-&gt;data[<span class="hljs-number">0</span>], pkt.data, YDataSize); <span class="hljs-comment">//copy Y data:</span><br>            <span class="hljs-comment">//307200之后是UV</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; YDataSize / <span class="hljs-number">4</span>; i++) &#123;<br>                frame-&gt;data[<span class="hljs-number">1</span>][i] = pkt.data[YDataSize + <span class="hljs-number">2</span>*i];<br>                frame-&gt;data[<span class="hljs-number">2</span>][i] = pkt.data[YDataSize + <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>];<br>            &#125;<br>            fwrite(frame-&gt;data[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, YDataSize, yuvFile);<br>            fwrite(frame-&gt;data[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>, YDataSize / <span class="hljs-number">4</span>, yuvFile);<br>            fwrite(frame-&gt;data[<span class="hljs-number">2</span>], <span class="hljs-number">1</span>, YDataSize / <span class="hljs-number">4</span>, yuvFile);<br>            fflush(yuvFile);<br>            <br>            <span class="hljs-comment">//h264编码</span><br>            frame-&gt;pts = basePts++;<br>            encode(enc_ctx, frame, newpkt, outFile);<br>            <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//将编码器缓冲区的数据刷出来，不然录制的视频会少掉1s左右的数据。</span><br>    encode(enc_ctx, <span class="hljs-literal">NULL</span>, newpkt, outFile);<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lsp_error 运行结束\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>注意：如果没有调用 <code>avcodec_open2</code> 会导致 <code>avcodec_send_frame</code> 报错：<font color="red"><a href="https://stackoverflow.com/questions/69643784/avcodec-send-frame-returns-invalid-argument">avcodec_send_frame returns “invalid argument”</a></font></li></ul><h2 id="三、x264参数详解、参考资料（暂时不看吧，只做记录）"><a href="#三、x264参数详解、参考资料（暂时不看吧，只做记录）" class="headerlink" title="三、x264参数详解、参考资料（暂时不看吧，只做记录）"></a>三、x264参数详解、参考资料（暂时不看吧，只做记录）</h2><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193400253.png" class="" title="image-20220605193400253"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193427742.png" class="" title="image-20220605193427742"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193433084.png" class="" title="image-20220605193433084"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193440303.png" class="" title="image-20220605193440303"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193445364.png" class="" title="image-20220605193445364"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193450647.png" class="" title="image-20220605193450647"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193456071.png" class="" title="image-20220605193456071"><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220605193501269.png" class="" title="image-20220605193501269">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day10-认识H264、H264压缩技术、码流分层NALU</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识H264"><a href="#一、认识H264" class="headerlink" title="一、认识H264"></a>一、认识H264</h2><h3 id="1、H264的压缩比是多少？"><a href="#1、H264的压缩比是多少？" class="headerlink" title="1、H264的压缩比是多少？"></a>1、H264的压缩比是多少？</h3><ul><li><p>约 <font color="red">1&#x2F;100</font></p></li><li><p>比如格式为YUV420、分辨率为640x480、帧率为15的码流是 <font color="red">55296kbps</font></p></li><li><p>经过H264压缩后，实际码流约：500kbps</p></li></ul><h3 id="2、比如720p，如何确定它的最近码流大概是多少？"><a href="#2、比如720p，如何确定它的最近码流大概是多少？" class="headerlink" title="2、比如720p，如何确定它的最近码流大概是多少？"></a>2、比如720p，如何确定它的最近码流大概是多少？</h3><ul><li>可以去 <font color="red">声网</font> 这种比较权威的网站查询，这些都是经验值，没有标准值。</li><li><a href="https://docs.agora.io/cn">https://docs.agora.io/cn</a></li></ul><h3 id="3、什么是GOP？一个GOP中可能存在多个I帧吗？"><a href="#3、什么是GOP？一个GOP中可能存在多个I帧吗？" class="headerlink" title="3、什么是GOP？一个GOP中可能存在多个I帧吗？"></a>3、什么是GOP？一个GOP中可能存在多个I帧吗？</h3><ul><li>GOP：Group Of Picture，图像组</li><li>在最新的H264标准中，一个GOP可以存在多个I帧。</li></ul><h4 id="4、什么是I帧？什么是IDR帧？"><a href="#4、什么是I帧？什么是IDR帧？" class="headerlink" title="4、什么是I帧？什么是IDR帧？"></a>4、什么是I帧？什么是IDR帧？</h4><ul><li><p>I帧，关键帧，采用帧内压缩技术，能独立解码出完整的一帧图片。</p></li><li><p>IDR，解码器立即刷新帧，清空参考帧队列，防止帧错误蔓延。</p></li><li><p><font color="red">IDR帧是特殊的I帧</font></p></li><li><p><font color="red">每个GOP中的第一帧就是IDR帧</font></p></li></ul><h3 id="5、什么是P帧？"><a href="#5、什么是P帧？" class="headerlink" title="5、什么是P帧？"></a>5、什么是P帧？</h3><ul><li>P帧，Forward Predicted Frame，向前参考帧，会参考前面的I帧或P帧。</li><li>采用帧间编码压缩技术。</li></ul><h3 id="6、什么是B帧？"><a href="#6、什么是B帧？" class="headerlink" title="6、什么是B帧？"></a>6、什么是B帧？</h3><ul><li>B帧，Bidirectionally predicted frame，双向参考帧。</li><li>会同时参考前面和后面的I帧或P帧。</li><li>采用帧间编码压缩技术。</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604173715150.png" class=""><h2 id="二、H264压缩技术"><a href="#二、H264压缩技术" class="headerlink" title="二、H264压缩技术"></a>二、H264压缩技术</h2><h3 id="1、H264压缩主要四大技术，分别目标是什么？"><a href="#1、H264压缩主要四大技术，分别目标是什么？" class="headerlink" title="1、H264压缩主要四大技术，分别目标是什么？"></a>1、H264压缩主要四大技术，分别目标是什么？</h3><ul><li><font color="red">帧内压缩</font>：解决的是空域数据冗余问题</li><li><font color="red">帧间压缩</font>：解决的是时域数据冗余问题</li><li><font color="red">DCT变化</font>：整数离散余弦变换（DCT），将离散数据聚合，方便后续压缩</li><li><font color="red">CABAC压缩</font>：熵编码，属于无损压缩</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604174439133.png" class=""><h3 id="2、视频花屏和卡顿的原因是什么？"><a href="#2、视频花屏和卡顿的原因是什么？" class="headerlink" title="2、视频花屏和卡顿的原因是什么？"></a>2、视频花屏和卡顿的原因是什么？</h3><ul><li><p><font color="red">花屏</font>：如果GOP分组中有帧丢失，会造成解码端的图像发生错误，这会出现马赛克(花屏)</p></li><li><p><font color="red">卡顿</font>：如果GOP解析错误，要等待下一个I帧到来，图像就静止了，这就出现的所谓的卡顿</p></li></ul><h3 id="三、H264码流分层"><a href="#三、H264码流分层" class="headerlink" title="三、H264码流分层"></a>三、H264码流分层</h3><h3 id="1、为什么要出现NAL层？"><a href="#1、为什么要出现NAL层？" class="headerlink" title="1、为什么要出现NAL层？"></a>1、为什么要出现NAL层？</h3><ul><li><font color="red">NAL</font>，Network Abstract Layer，视频数据网络抽象层</li><li>是为了解决网络传输过程中的<font color="red">丢包、乱序</font>等问题</li></ul><h3 id="2、什么VCL层？"><a href="#2、什么VCL层？" class="headerlink" title="2、什么VCL层？"></a>2、什么VCL层？</h3><ul><li>VCL，Video Coding Layer，视频数据编码层</li><li>帧内编码、帧间编码、DCT变换、熵编码最后出来的数据，就是VCL层数据</li></ul><h3 id="3、VCL结构关系？（从帧、片、宏块、子块）"><a href="#3、VCL结构关系？（从帧、片、宏块、子块）" class="headerlink" title="3、VCL结构关系？（从帧、片、宏块、子块）"></a>3、VCL结构关系？（从帧、片、宏块、子块）</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604175228931.png" class=""><h3 id="4、SODB、RBSP、NALU-之间是什么关系？"><a href="#4、SODB、RBSP、NALU-之间是什么关系？" class="headerlink" title="4、SODB、RBSP、NALU 之间是什么关系？"></a>4、SODB、RBSP、NALU 之间是什么关系？</h3><ul><li><p><font color="red">SODB</font>，String Of Data BIts，原始数据<font color="blue">比特流</font>，长度不一定是8的倍数，故需要补齐</p></li><li><p><font color="red">RBSP</font>，Raw Byte Sequence Payload，是对SODB数据进行补齐后的<font color="blue">字节流</font>数据；RBSP &#x3D; SODB + trailing bits</p></li><li><p><font color="red">NALU</font>，Network Abstract Layer Unit，网络抽象层单元 &#x3D; NAL header + RBSP</p></li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604175734381.png" class=""><h3 id="5、整个码流分层图（本节最重要的图，要能默写）"><a href="#5、整个码流分层图（本节最重要的图，要能默写）" class="headerlink" title="5、整个码流分层图（本节最重要的图，要能默写）"></a>5、整个码流分层图（本节最重要的图，要能默写）</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604180020055.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09-视频基础、认识YUV、采集摄像头YUV数据</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、视频基础知识"><a href="#一、视频基础知识" class="headerlink" title="一、视频基础知识"></a>一、视频基础知识</h2><h3 id="1、RGB888和RGBA分别占多少字节？"><a href="#1、RGB888和RGBA分别占多少字节？" class="headerlink" title="1、RGB888和RGBA分别占多少字节？"></a>1、RGB888和RGBA分别占多少字节？</h3><ul><li>RGB888 占 3个字节（24bit）</li><li>RGBA 占 4个字节（32bit）</li></ul><h3 id="2、RGB-和-BGR-是什么？"><a href="#2、RGB-和-BGR-是什么？" class="headerlink" title="2、RGB 和 BGR 是什么？"></a>2、RGB 和 BGR 是什么？</h3><ul><li>RGB 与 BGR 都是颜色格式，只是存储是R与B的位置不同。</li><li>BMP 使用的是BGR格式。</li></ul><h3 id="3、PPI是什么？DPI是什么？"><a href="#3、PPI是什么？DPI是什么？" class="headerlink" title="3、PPI是什么？DPI是什么？"></a>3、PPI是什么？DPI是什么？</h3><ul><li>PPI：Pixels per inch，每英寸展示的像素数</li><li>DPI：Dots per inch，每英寸展示的点数</li><li><font color="red">PPI &gt; 300 就属于视网膜级别</font></li><li><font color="red">基本上PPI就等于DPI</font></li></ul><h3 id="4、什么是分辨率？"><a href="#4、什么是分辨率？" class="headerlink" title="4、什么是分辨率？"></a>4、什么是分辨率？</h3><ul><li>X轴的像素个数  * Y轴的像素个数</li><li>常见的宽高比 16:9  、 4:3</li><li>360P&#x2F;720&#x2F;1K&#x2F;2K</li></ul><h3 id="5、什么是帧率？"><a href="#5、什么是帧率？" class="headerlink" title="5、什么是帧率？"></a>5、什么是帧率？</h3><ul><li><p>每秒钟采集&#x2F;播放图像的个数</p></li><li><p>动画的帧率是 25 帧&#x2F;s</p></li><li><p>常见的帧率是: 15帧&#x2F;s，30帧&#x2F;s，60帧&#x2F;s</p></li><li><p><font color="red">分辨率决定视频的清晰度，帧率决定视频的流畅度。</font></p></li></ul><h3 id="6、帧率25的720p视频，RGB码流是多少？"><a href="#6、帧率25的720p视频，RGB码流是多少？" class="headerlink" title="6、帧率25的720p视频，RGB码流是多少？"></a>6、帧率25的720p视频，RGB码流是多少？</h3><ul><li>25 * 720 *1280 * 3 * 8 &#x3D; 552.96Mbps</li></ul><h3 id="7、图像大小与显示区域大小有哪三种关系？（解决方案？）"><a href="#7、图像大小与显示区域大小有哪三种关系？（解决方案？）" class="headerlink" title="7、图像大小与显示区域大小有哪三种关系？（解决方案？）"></a>7、图像大小与显示区域大小有哪三种关系？（解决方案？）</h3><ul><li>图像等于显示区域，刚好展示。</li><li>图像小于显示区域，拉伸&#x2F;留白。</li><li>图像大于显示区域，缩小&#x2F;裁剪。</li></ul><h2 id="二、认识YUV"><a href="#二、认识YUV" class="headerlink" title="二、认识YUV"></a>二、认识YUV</h2><h3 id="1、YUV中的Y是什么？UV是什么？"><a href="#1、YUV中的Y是什么？UV是什么？" class="headerlink" title="1、YUV中的Y是什么？UV是什么？"></a>1、YUV中的Y是什么？UV是什么？</h3><ul><li>Y：表示明亮度。</li><li>UV：是描述影像色彩饱和度。</li><li>主要的采样格式有YUV420、YUV422、YUV444</li></ul><h3 id="2、RGB与YUV的关系是什么？"><a href="#2、RGB与YUV的关系是什么？" class="headerlink" title="2、RGB与YUV的关系是什么？"></a>2、RGB与YUV的关系是什么？</h3><ul><li><p>RGB和YUV都是颜色的存储方案，但是适用场景不相同</p></li><li><p>RGB：用于屏幕图像的展示</p></li><li><p>YUV：用于采集与编码</p></li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604103944297.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604103956016.png" class=""><h3 id="3、为什么要采用YUV这种颜色格式？"><a href="#3、为什么要采用YUV这种颜色格式？" class="headerlink" title="3、为什么要采用YUV这种颜色格式？"></a>3、为什么要采用YUV这种颜色格式？</h3><ul><li><p>①视频的发展历史是从黑白视频到彩色视频，这是历史原因的部分</p></li><li><p>②YUV由于人跟对Y分量敏感，对UV分量不敏感，所以YUV易于压缩。这是技术上的优势</p></li></ul><h3 id="4、YUV420p存储格式示意图"><a href="#4、YUV420p存储格式示意图" class="headerlink" title="4、YUV420p存储格式示意图"></a>4、YUV420p存储格式示意图</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604105607839.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604105638912.png" class=""><h3 id="5、我们口头上常说的1兆带宽，是什么含义？"><a href="#5、我们口头上常说的1兆带宽，是什么含义？" class="headerlink" title="5、我们口头上常说的1兆带宽，是什么含义？"></a>5、我们口头上常说的1兆带宽，是什么含义？</h3><ul><li>这里的说的是1兆比特位，并非字节数</li><li>比如1兆的带宽，理论下载速度是 125KB&#x2F;s</li><li>所以我们计算码流大小的时候，通常也是用比特位来计算，也就是 <font color="red">比特位 &#x3D; 字节数 * 8</font></li></ul><h2 id="三、提取-x2F-录制YUV数据"><a href="#三、提取-x2F-录制YUV数据" class="headerlink" title="三、提取&#x2F;录制YUV数据"></a>三、提取&#x2F;录制YUV数据</h2><h3 id="1、如何从MP4中，提取YUV数据？"><a href="#1、如何从MP4中，提取YUV数据？" class="headerlink" title="1、如何从MP4中，提取YUV数据？"></a>1、如何从MP4中，提取YUV数据？</h3><ul><li>提取数据</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw.mp4 -an -c:v rawvideo -pix_fmt yuv420p yuv420p.yuv<br></code></pre></td></tr></table></figure><ul><li>播放yuv</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format yuv420p -framerate 25 yuv420p.yuv<br></code></pre></td></tr></table></figure><ul><li>如果格式错误，会产生很有趣的现象，比如改成<font color="red">nv12</font>格式，会产生绿屏效果；如果尺寸错误，就会出现以前电视机的满屏马赛克，或者屏幕上或下移动的效果。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format nv12 yuv420p.yuv<br></code></pre></td></tr></table></figure><h3 id="2、如何从MP4中，提取分别提取Y、U、V数据？"><a href="#2、如何从MP4中，提取分别提取Y、U、V数据？" class="headerlink" title="2、如何从MP4中，提取分别提取Y、U、V数据？"></a>2、如何从MP4中，提取分别提取Y、U、V数据？</h3><ul><li>单独提取</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw.mp4 -filter_complex <span class="hljs-string">&#x27;extractplanes=y+u+v[y][u][v]&#x27;</span> -map <span class="hljs-string">&#x27;[y]&#x27;</span> y.yuv -map <span class="hljs-string">&#x27;[u]&#x27;</span> u.yuv -map <span class="hljs-string">&#x27;[v]&#x27;</span> v.yuv<br></code></pre></td></tr></table></figure><ul><li>单独播放Y数据</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format gray y.yuv<br></code></pre></td></tr></table></figure><h3 id="3、代码录制YUV数据（和音频录制几乎一模一样）"><a href="#3、代码录制YUV数据（和音频录制几乎一模一样）" class="headerlink" title="3、代码录制YUV数据（和音频录制几乎一模一样）"></a>3、代码录制YUV数据（和音频录制几乎一模一样）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><br><span class="hljs-comment">//录视频</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_video</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;video_size&quot;</span>, <span class="hljs-string">&quot;640x480&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;framerate&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;pixel_format&quot;</span>, <span class="hljs-string">&quot;nv12&quot;</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/nv12.yuv&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">20000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// (宽 * 高) * （yuv420=1.5 或 yuv422=2 或 yuv444=3）；nv12属于yuv420</span><br>            <span class="hljs-comment">// 640*480*1.5 = 460800</span><br>            fwrite(pkt.data, <span class="hljs-number">460800</span>, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>播放刚刚录制的视频</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 640x480 -pixel_format nv12 nv12.yuv<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频AAC编码实战(三)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81%E5%AE%9E%E6%88%98/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、AAC编码代码实战"><a href="#一、AAC编码代码实战" class="headerlink" title="一、AAC编码代码实战"></a>一、AAC编码代码实战</h2><h3 id="1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？"><a href="#1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？" class="headerlink" title="1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？"></a>1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？</h3><ul><li><p><font color="blue">AVFrame</font>：一般存放编码前的数据，对于音频数据来说，大部分情况下是PCM数据。</p></li><li><p><font color="blue">AVPacket</font>：一般存放编码后的数据，对于音频数据来说，大部分情况是压缩数据。</p></li></ul><h3 id="2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？"><a href="#2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？" class="headerlink" title="2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？"></a>2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？</h3><ul><li>因为ffmpeg认为麦克风是个外部多媒体文件（类似mp4），ffmpeg统一认为是编码后的AVPacket数据。</li></ul><h3 id="3、AAC编码的关键步骤"><a href="#3、AAC编码的关键步骤" class="headerlink" title="3、AAC编码的关键步骤"></a>3、AAC编码的关键步骤</h3><ul><li>找到编码器、创建上下文、打开编码器</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs C">    <span class="hljs-comment">//找到libfdk编码器</span><br>    <span class="hljs-type">const</span> AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <span class="hljs-keyword">if</span> (codec == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_find_encoder_by_name error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//创建编码上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br><span class="hljs-comment">//    codec_ctx-&gt;bit_rate = 0; //AAC_LC:128K, AAC HE:64K, AAC HE V2:32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE; <span class="hljs-comment">//阅读 ffmpeg 代码，可知bit_rate 和 profile之间的设计关系</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span> (avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_open2 error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>初始化输入和数据格式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//初始化AAC编码前的数据载体</span><br>AVFrame *aac_frame = av_frame_alloc();<br><span class="hljs-keyword">if</span> (!aac_frame) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_alloc 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>aac_frame-&gt;nb_samples           = <span class="hljs-number">512</span>;                  <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>aac_frame-&gt;format               = AV_SAMPLE_FMT_S16;    <span class="hljs-comment">//每个采样大小</span><br>aac_frame-&gt;channel_layout       = AV_CH_LAYOUT_STEREO;  <span class="hljs-comment">//channel layout</span><br>av_frame_get_buffer(aac_frame, <span class="hljs-number">0</span>);                      <span class="hljs-comment">//512 * 2 * 2 = 2048 AVFrame的大小</span><br><span class="hljs-keyword">if</span> (!aac_frame-&gt;buf[<span class="hljs-number">0</span>]) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_get_buffer 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化AAC编码后的数据载体</span><br>AVPacket *aac_packet = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br><span class="hljs-keyword">if</span> (!aac_packet) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_packet_alloc 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>双重循环，从编码器中去除编码后的数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//read data from device</span><br><span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>    usleep(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>    <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//进行内存拷贝</span><br>        <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>        <br>        <span class="hljs-comment">//重采样</span><br>        swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>        <br>        <span class="hljs-comment">//将重采样的数据拷贝到frame中去</span><br>        <span class="hljs-built_in">memcpy</span>(aac_frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>        <br>        <span class="hljs-comment">//将数据送编码器</span><br>        ret = avcodec_send_frame(codec_ctx, aac_frame);<br>        <br>        <span class="hljs-comment">//如果ret &gt;= 0 说明数据设置成功</span><br>        <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//获取编码后的音频数据，如果成功，则需要重复获取，直到失败为止</span><br>            ret = avcodec_receive_packet(codec_ctx, aac_packet);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_receive_packet error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>            <br>            fwrite(aac_packet-&gt;data, aac_packet-&gt;size, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>        av_packet_unref(&amp;pkt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、AAC编码的完整代码-还有bug"><a href="#4、AAC编码的完整代码-还有bug" class="headerlink" title="4、AAC编码的完整代码(还有bug)"></a>4、AAC编码的完整代码(还有bug)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-comment">//录音</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (swr_ctx == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_alloc_set_opts error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    ret = swr_init(swr_ctx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_init error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br>    <br>    av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>    av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/he_audio.aac&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//找到libfdk编码器</span><br>    <span class="hljs-type">const</span> AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <span class="hljs-keyword">if</span> (codec == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_find_encoder_by_name error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//创建编码上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br><span class="hljs-comment">//    codec_ctx-&gt;bit_rate = 0; //AAC_LC:128K, AAC HE:64K, AAC HE V2:32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE; <span class="hljs-comment">//阅读 ffmpeg 代码，可知bit_rate 和 profile之间的设计关系</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span> (avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_open2 error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化AAC编码前的数据载体</span><br>    AVFrame *aac_frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span> (!aac_frame) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_alloc 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    aac_frame-&gt;nb_samples           = <span class="hljs-number">512</span>;                  <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>    aac_frame-&gt;format               = AV_SAMPLE_FMT_S16;    <span class="hljs-comment">//每个采样大小</span><br>    aac_frame-&gt;channel_layout       = AV_CH_LAYOUT_STEREO;  <span class="hljs-comment">//channel layout</span><br>    av_frame_get_buffer(aac_frame, <span class="hljs-number">0</span>);                      <span class="hljs-comment">//512 * 2 * 2 = 2048 AVFrame的大小</span><br>    <span class="hljs-keyword">if</span> (!aac_frame-&gt;buf[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_get_buffer 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化AAC编码后的数据载体</span><br>    AVPacket *aac_packet = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br>    <span class="hljs-keyword">if</span> (!aac_packet) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_packet_alloc 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//进行内存拷贝</span><br>            <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>            <br>            <span class="hljs-comment">//重采样</span><br>            swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>            <br>            <span class="hljs-comment">//将重采样的数据拷贝到frame中去</span><br>            <span class="hljs-built_in">memcpy</span>(aac_frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>            <br>            <span class="hljs-comment">//将数据送编码器</span><br>            ret = avcodec_send_frame(codec_ctx, aac_frame);<br>            <br>            <span class="hljs-comment">//如果ret &gt;= 0 说明数据设置成功</span><br>            <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//获取编码后的音频数据，如果成功，则需要重复获取，直到失败为止</span><br>                ret = avcodec_receive_packet(codec_ctx, aac_packet);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_receive_packet error&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                &#125;<br>                <br>                fwrite(aac_packet-&gt;data, aac_packet-&gt;size, <span class="hljs-number">1</span>, outFile);<br>                fflush(outFile);<br>            &#125;<br>            <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、借助ffplay播放编码后的aac文件"><a href="#5、借助ffplay播放编码后的aac文件" class="headerlink" title="5、借助ffplay播放编码后的aac文件"></a>5、借助ffplay播放编码后的aac文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay he_audio.aac<br></code></pre></td></tr></table></figure><h2 id="二、录音、重采样、aac编码代码抽取优化、完整代码"><a href="#二、录音、重采样、aac编码代码抽取优化、完整代码" class="headerlink" title="二、录音、重采样、aac编码代码抽取优化、完整代码"></a>二、录音、重采样、aac编码代码抽取优化、完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> rec_status = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_status</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>&#123;<br>    rec_status = status;<br>&#125;<br><br><span class="hljs-comment">//[in]</span><br><span class="hljs-comment">//[out]</span><br><span class="hljs-comment">//ret</span><br><span class="hljs-comment">//@brief encode audio data</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(AVCodecContext *ctx,</span><br><span class="hljs-params">            AVFrame *frame,</span><br><span class="hljs-params">            AVPacket *pkt,</span><br><span class="hljs-params">            FILE *output)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//将数据送编码器</span><br>    ret = avcodec_send_frame(ctx, frame);<br>    <br>    <span class="hljs-comment">//如果ret&gt;=0说明数据设置成功</span><br>    <span class="hljs-keyword">while</span>(ret &gt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//获取编码后的音频数据,如果成功，需要重复获取，直到失败为止</span><br>        ret = avcodec_receive_packet(ctx, pkt);<br>        <br>        <span class="hljs-keyword">if</span>(ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ret &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, encoding audio frame\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">//write file</span><br>        fwrite(pkt-&gt;data, <span class="hljs-number">1</span>, pkt-&gt;size, output);<br>        fflush(output);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//[in]</span><br><span class="hljs-comment">//[out]</span><br><span class="hljs-comment">//</span><br><span class="hljs-type">static</span> AVCodecContext* <span class="hljs-title function_">open_coder</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-comment">//avcodec_find_encoder(AV_CODEC_ID_AAC);</span><br>    AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <br>    <span class="hljs-comment">//创建 codec 上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    <br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br>    codec_ctx-&gt;bit_rate = <span class="hljs-number">0</span>; <span class="hljs-comment">//AAC_LC: 128K, AAC HE: 64K, AAC HE V2: 32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE; <span class="hljs-comment">//阅读 ffmpeg 代码</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span>(avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> codec_ctx;<br>&#125;<br><br><span class="hljs-type">static</span><br>SwrContext* <span class="hljs-title function_">init_swr</span><span class="hljs-params">()</span>&#123;<br>    <br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//channel, number/</span><br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,                <span class="hljs-comment">//ctx</span><br>                                 AV_CH_LAYOUT_STEREO, <span class="hljs-comment">//输出channel布局</span><br>                                 AV_SAMPLE_FMT_S16,   <span class="hljs-comment">//输出的采样格式</span><br>                                 <span class="hljs-number">44100</span>,               <span class="hljs-comment">//采样率</span><br>                                 AV_CH_LAYOUT_STEREO, <span class="hljs-comment">//输入channel布局</span><br>                                 AV_SAMPLE_FMT_FLT,   <span class="hljs-comment">//输入的采样格式</span><br>                                 <span class="hljs-number">44100</span>,               <span class="hljs-comment">//输入的采样率</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-keyword">if</span>(!swr_ctx)&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(swr_init(swr_ctx) &lt; <span class="hljs-number">0</span>)&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> swr_ctx;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief open audio device</span><br><span class="hljs-comment">  * @return succ: AVFormatContext*, fail: NULL</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">static</span><br>AVFormatContext* <span class="hljs-title function_">open_dev</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//[[video device]:[audio device]]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//get format</span><br>    AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    <span class="hljs-keyword">if</span>((ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options)) &lt; <span class="hljs-number">0</span> )&#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to open audio device, [%d]%s\n&quot;</span>, ret, errors);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> fmt_ctx;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief xxxx</span><br><span class="hljs-comment"> * @return xxx</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br>AVFrame* <span class="hljs-title function_">create_frame</span><span class="hljs-params">()</span>&#123;<br>    <br>    AVFrame *frame = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//音频输入数据</span><br>    frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span>(!frame)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, No Memory!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//set parameters</span><br>    frame-&gt;nb_samples     = <span class="hljs-number">512</span>;                <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>    frame-&gt;format         = AV_SAMPLE_FMT_S16;  <span class="hljs-comment">//每个采样的大小</span><br>    frame-&gt;channel_layout = AV_CH_LAYOUT_STEREO; <span class="hljs-comment">//channel layout</span><br>    <br>    <span class="hljs-comment">//alloc inner memory</span><br>    av_frame_get_buffer(frame, <span class="hljs-number">0</span>); <span class="hljs-comment">// 512 * 2 * = 2048</span><br>    <span class="hljs-keyword">if</span>(!frame-&gt;data[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-comment">//内存泄漏</span><br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> frame;<br>    <br>__ERROR:<br>    <span class="hljs-keyword">if</span>(frame)&#123;<br>        av_frame_free(&amp;frame);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">alloc_data_4_resample</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> ***src_data,</span><br><span class="hljs-params">                           <span class="hljs-type">int</span> *src_linesize,</span><br><span class="hljs-params">                           <span class="hljs-type">uint8_t</span> *** dst_data,</span><br><span class="hljs-params">                           <span class="hljs-type">int</span> *dst_linesize)</span>&#123;<br>    <span class="hljs-comment">//4096/4=1024/2=512</span><br>    <span class="hljs-comment">//创建输入缓冲区</span><br>    av_samples_alloc_array_and_samples(src_data,         <span class="hljs-comment">//输出缓冲区地址</span><br>                                       src_linesize,     <span class="hljs-comment">//缓冲区的大小</span><br>                                       <span class="hljs-number">2</span>,                 <span class="hljs-comment">//通道个数</span><br>                                       <span class="hljs-number">512</span>,               <span class="hljs-comment">//单通道采样个数</span><br>                                       AV_SAMPLE_FMT_FLT, <span class="hljs-comment">//采样格式</span><br>                                       <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//创建输出缓冲区</span><br>    av_samples_alloc_array_and_samples(dst_data,         <span class="hljs-comment">//输出缓冲区地址</span><br>                                       dst_linesize,     <span class="hljs-comment">//缓冲区的大小</span><br>                                       <span class="hljs-number">2</span>,                 <span class="hljs-comment">//通道个数</span><br>                                       <span class="hljs-number">512</span>,               <span class="hljs-comment">//单通道采样个数</span><br>                                       AV_SAMPLE_FMT_S16, <span class="hljs-comment">//采样格式</span><br>                                       <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free_data_4_resample</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> **src_data, <span class="hljs-type">uint8_t</span> **dst_data)</span>&#123;<br>    <span class="hljs-comment">//释放输入输出缓冲区</span><br>    <span class="hljs-keyword">if</span>(src_data)&#123;<br>        av_freep(&amp;src_data[<span class="hljs-number">0</span>]);<br>    &#125;<br>    av_freep(&amp;src_data);<br>    <br>    <span class="hljs-keyword">if</span>(dst_data)&#123;<br>        av_freep(&amp;dst_data[<span class="hljs-number">0</span>]);<br>    &#125;<br>    av_freep(&amp;dst_data);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_data_and_encode</span><span class="hljs-params">(AVFormatContext *fmt_ctx, <span class="hljs-comment">//</span></span><br><span class="hljs-params">                          AVCodecContext *c_ctx,</span><br><span class="hljs-params">                          SwrContext* swr_ctx,</span><br><span class="hljs-params">                          FILE *outfile)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//pakcet</span><br>    AVPacket pkt;<br>    AVFrame *frame = <span class="hljs-literal">NULL</span>;<br>    AVPacket *newpkt = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//重采样缓冲区</span><br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br><br>    frame = create_frame();<br>    <span class="hljs-keyword">if</span>(!frame)&#123;<br>        <span class="hljs-comment">//printf(...)</span><br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    newpkt = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br>    <span class="hljs-keyword">if</span>(!newpkt)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//分配重采样输入/输出缓冲区</span><br>    alloc_data_4_resample(&amp;src_data, &amp;src_linesize, &amp;dst_data, &amp;dst_linesize);<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span>(rec_status) &#123;<br>        ret = av_read_frame(fmt_ctx, &amp;pkt);<br>        <br>        <span class="hljs-keyword">if</span> (pkt.size &lt;= <span class="hljs-number">0</span>) &#123;<br>            usleep(<span class="hljs-number">300</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//进行内存拷贝，按字节拷贝的</span><br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)src_data[<span class="hljs-number">0</span>], (<span class="hljs-type">void</span>*)pkt.data, pkt.size);<br>        <br>        <span class="hljs-comment">//重采样</span><br>        swr_convert(swr_ctx,                    <span class="hljs-comment">//重采样的上下文</span><br>                    dst_data,                   <span class="hljs-comment">//输出结果缓冲区</span><br>                    <span class="hljs-number">512</span>,                        <span class="hljs-comment">//每个通道的采样数</span><br>                    (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-comment">//输入缓冲区</span><br>                    <span class="hljs-number">512</span>);                       <span class="hljs-comment">//输入单个通道的采样数</span><br>        <br>        <span class="hljs-comment">//将重采样的数据拷贝到 frame 中</span><br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span> *)frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>        <br>        <span class="hljs-comment">//encode</span><br>        encode(c_ctx, frame, newpkt, outfile);<br>        <br>        <span class="hljs-comment">//</span><br>        av_packet_unref(&amp;pkt); <span class="hljs-comment">//release pkt</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//强制将编码器缓冲区中的音频进行编码输出</span><br>    encode(c_ctx, <span class="hljs-literal">NULL</span>, newpkt, outfile);<br><br>__ERROR:<br>    <span class="hljs-comment">//释放 AVFrame 和 AVPacket</span><br>    <span class="hljs-keyword">if</span>(frame)&#123;<br>        av_frame_free(&amp;frame);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(newpkt)&#123;<br>        av_packet_free(&amp;newpkt);<br>    &#125;<br>    <br>    <span class="hljs-comment">//释放重采样缓冲区</span><br>    free_data_4_resample(src_data, dst_data);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rec_audio</span><span class="hljs-params">()</span> &#123;<br>  <br>    <span class="hljs-comment">//context</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVCodecContext *c_ctx = <span class="hljs-literal">NULL</span>;<br>    SwrContext* swr_ctx = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//set log level</span><br>    av_log_set_level(AV_LOG_DEBUG);<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//start record</span><br>    rec_status = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//create file</span><br>    <span class="hljs-comment">//char *out = &quot;/Users/lichao/Downloads/av_base/audio.pcm&quot;;</span><br>    <span class="hljs-type">char</span> *out = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/audio.aac&quot;</span>;<br>    FILE *outfile = fopen(out, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!outfile)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to open file!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//打开设备</span><br>    fmt_ctx = open_dev();<br>    <span class="hljs-keyword">if</span>(!fmt_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to open device!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">//打开编码器上下文</span><br>    c_ctx = open_coder();<br>    <span class="hljs-keyword">if</span>(!c_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">//初始化重采样上下文</span><br>    swr_ctx = init_swr();<br>    <span class="hljs-keyword">if</span>(!swr_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//encode</span><br>    read_data_and_encode(fmt_ctx, c_ctx, swr_ctx, outfile);<br><br>__ERROR:<br>    <span class="hljs-comment">//释放重采样的上下文</span><br>    <span class="hljs-keyword">if</span>(swr_ctx)&#123;<br>        swr_free(&amp;swr_ctx);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(c_ctx)&#123;<br>        avcodec_free_context(&amp;c_ctx);<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    <span class="hljs-keyword">if</span>(fmt_ctx) &#123;<br>        avformat_close_input(&amp;fmt_ctx);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(outfile)&#123;<br>        <span class="hljs-comment">//close file</span><br>        fclose(outfile);<br>    &#125;<br><br>    av_log(<span class="hljs-literal">NULL</span>, AV_LOG_DEBUG, <span class="hljs-string">&quot;finish!\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    rec_audio();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><ul><li>播放上述录音</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay audio.aac<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频AAC编码理论(二)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频编码理论基础"><a href="#一、音频编码理论基础" class="headerlink" title="一、音频编码理论基础"></a>一、音频编码理论基础</h2><h3 id="1、音频有损压缩主要从哪些方面进行压缩？"><a href="#1、音频有损压缩主要从哪些方面进行压缩？" class="headerlink" title="1、音频有损压缩主要从哪些方面进行压缩？"></a>1、音频<code>有损压缩</code>主要从哪些方面进行压缩？</h3><ul><li>时域遮蔽、频域遮蔽</li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529103700600.png" class=""><h3 id="2、音频无损压缩有哪些有名的算法？"><a href="#2、音频无损压缩有哪些有名的算法？" class="headerlink" title="2、音频无损压缩有哪些有名的算法？"></a>2、音频<code>无损压缩</code>有哪些有名的算法？</h3><ul><li>哈夫曼算法</li><li>香农算法</li></ul><h3 id="3、常见的音频编码器？（例举三个）"><a href="#3、常见的音频编码器？（例举三个）" class="headerlink" title="3、常见的音频编码器？（例举三个）"></a>3、常见的音频编码器？（例举三个）</h3><ul><li>AAC：在直播系统中应用比较广泛</li><li>OPUS：是较新的音频编码器，WebRTC默认使用OPUS</li><li>G.711：一般在固话中使用</li></ul><h3 id="4、AAC有哪三种常见规格，简单描述下？"><a href="#4、AAC有哪三种常见规格，简单描述下？" class="headerlink" title="4、AAC有哪三种常见规格，简单描述下？"></a>4、AAC有哪三种常见规格，简单描述下？</h3><ul><li>AAC LC：<font color="red">(Low Complexity)</font> 低复杂度规格，<font color="blue">码流是128k左右</font>，音质好。</li><li>AAC HE：<font color="red">等于 AAC LC + SBR(Spectral Band Replication)</font>。其核心思想是按频谱保存。低频编码保存主要成分，高频单独放大编码保存音质。<font color="blue">码流在64k左右</font>。</li><li>AAC HE V2：等于<font color="red">AAC LC + SBR + PS(Parametric Stereo)</font>。其核心思想是双声道中的声音才在某种相似性，只需要存储一个声道的全部信息，然后花很少的字节用参数描述另一个声道和它不同的地方。<font color="blue">码流在48k左右。</font></li></ul><h3 id="5、AAC保存数据有两种格式，分别是什么？"><a href="#5、AAC保存数据有两种格式，分别是什么？" class="headerlink" title="5、AAC保存数据有两种格式，分别是什么？"></a>5、AAC保存数据有两种格式，分别是什么？</h3><ul><li>ADIF</li><li>ADTS</li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529105427279.png" class=""><h3 id="6、ADTS结构详解？"><a href="#6、ADTS结构详解？" class="headerlink" title="6、ADTS结构详解？"></a>6、ADTS结构详解？</h3><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529105523745.png" class=""><h3 id="7、通过ffmpeg命令生成aa文件"><a href="#7、通过ffmpeg命令生成aa文件" class="headerlink" title="7、通过ffmpeg命令生成aa文件"></a>7、通过ffmpeg命令生成aa文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw_xxx.mp4 -vn -c:a libfdk_aac -ar 44100 -channels 2 -profile:a aac_he dst_xxx.aac<br></code></pre></td></tr></table></figure><h3 id="8、借助网站分析生成的aac文件"><a href="#8、借助网站分析生成的aac文件" class="headerlink" title="8、借助网站分析生成的aac文件"></a>8、借助网站分析生成的aac文件</h3><ul><li><a href="https://www.p23.nl/projects/aac-header/">https://www.p23.nl/projects/aac-header/</a></li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529110152214.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频重采样(一)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频重采样"><a href="#一、音频重采样" class="headerlink" title="一、音频重采样"></a>一、音频重采样</h2><h3 id="1、什么是音频重采样？"><a href="#1、什么是音频重采样？" class="headerlink" title="1、什么是音频重采样？"></a>1、什么是音频重采样？</h3><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/image-20220529110421107.png" class=""><h3 id="2、什么情况下需要进行音频重采样？"><a href="#2、什么情况下需要进行音频重采样？" class="headerlink" title="2、什么情况下需要进行音频重采样？"></a>2、什么情况下需要进行音频重采样？</h3><ul><li>情况一：从设备采集的音频数据与编码器要求的数据不一致</li><li>情况二：播放器要求的音频数据与要播放的音频数据不一致</li><li>情况三：要方便某些运算的时候</li></ul><h3 id="3、简述音频重采样主要三个步骤？"><a href="#3、简述音频重采样主要三个步骤？" class="headerlink" title="3、简述音频重采样主要三个步骤？"></a>3、简述音频重采样主要三个步骤？</h3><ul><li>设置重采样参数，并初始化重采样上下文。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs C">swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                             AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                             AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                             <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>ret = swr_init(swr_ctx);<br></code></pre></td></tr></table></figure><ul><li>设置重采样的输入和输出数据存放区</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br><br>av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ul><li>进行重采样</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 进行内存拷贝</span><br><span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)src_data[<span class="hljs-number">0</span>], (<span class="hljs-type">void</span>*)pkt.data, pkt.size);<br><br><span class="hljs-comment">// 重采样</span><br>swr_convert(swr_ctx,                    <span class="hljs-comment">//重采样的上下文</span><br>            dst_data,                   <span class="hljs-comment">//输出结果缓冲区</span><br>            <span class="hljs-number">512</span>,                        <span class="hljs-comment">//输出单个通道的采样数</span><br>            (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-comment">//输入缓冲区</span><br>            <span class="hljs-number">512</span>);                       <span class="hljs-comment">//输入单个通道的采样数</span><br><br><br>fwrite(dst_data[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, dst_linesize, outFile);<br>fflush(outFile);<br></code></pre></td></tr></table></figure><h3 id="4、音频重采样完整代码如下"><a href="#4、音频重采样完整代码如下" class="headerlink" title="4、音频重采样完整代码如下"></a>4、音频重采样完整代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-comment">//录音</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (swr_ctx == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_alloc_set_opts error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    ret = swr_init(swr_ctx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_init error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br>    <br>    av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>    av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/swr_audio.pcm&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//进行内存拷贝</span><br>            <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>            <br>            <span class="hljs-comment">//重采样</span><br>            swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>            <br>            fwrite(dst_data[<span class="hljs-number">0</span>], dst_linesize, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、借助ffplay播放重采样的数据"><a href="#5、借助ffplay播放重采样的数据" class="headerlink" title="5、借助ffplay播放重采样的数据"></a>5、借助ffplay播放重采样的数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SH">ffplay -ar 44100 -f s16le -ac 2 swr_audio.pcm <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-ffmpeg集成、音频采集</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、集成FFmpeg到MacApp项目"><a href="#一、集成FFmpeg到MacApp项目" class="headerlink" title="一、集成FFmpeg到MacApp项目"></a>一、集成FFmpeg到MacApp项目</h2><h3 id="1、创建一个mac的App应用，语言选择swift。"><a href="#1、创建一个mac的App应用，语言选择swift。" class="headerlink" title="1、创建一个mac的App应用，语言选择swift。"></a>1、创建一个mac的App应用，语言选择swift。</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190434270.png" class="" title="image-20220528190917242"><h3 id="2、将ffmpeg目录下的-lib-和-include-拷贝到项目中。"><a href="#2、将ffmpeg目录下的-lib-和-include-拷贝到项目中。" class="headerlink" title="2、将ffmpeg目录下的 lib 和 include 拷贝到项目中。"></a>2、将ffmpeg目录下的 <code>lib</code> 和 <code>include</code> 拷贝到项目中。</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190702809.png" class="" title="image-20220528190917242"><h3 id="3、将ffmpeg库引入项目中"><a href="#3、将ffmpeg库引入项目中" class="headerlink" title="3、将ffmpeg库引入项目中"></a>3、将ffmpeg库引入项目中</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190917242.png" class="" title="image-20220528190917242"><h3 id="4、引入ffmpeg头文件"><a href="#4、引入ffmpeg头文件" class="headerlink" title="4、引入ffmpeg头文件"></a>4、引入ffmpeg头文件</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528192359166.png" class="" title="image-20220528192359166"><h3 id="5、加入代码测试"><a href="#5、加入代码测试" class="headerlink" title="5、加入代码测试"></a>5、加入代码测试</h3><ul><li>test.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> test_h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> test_h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* test_h */</span></span><br></code></pre></td></tr></table></figure><ul><li>test.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// set log level</span><br>    av_log_set_level(AV_LOG_DEBUG);<br>    <span class="hljs-comment">// test ffmpeg</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *info = av_version_info();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n&quot;</span>, info);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ViewController.swift</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Cocoa<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">NSViewController</span> &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br><br>        <span class="hljs-comment">// Do any additional setup after loading the view.</span><br>        <span class="hljs-keyword">self</span>.startRecordAudio();<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> representedObject: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span> &#123;<br>        <span class="hljs-keyword">didSet</span> &#123;<br>        <span class="hljs-comment">// Update the view, if already loaded.</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">startRecordAudio</span>() &#123;<br>        record_audio()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FFmpegLearn-Bridging-Header.h 桥接c和swift的文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#import <span class="hljs-string">&quot;test.h&quot;</span></span><br></code></pre></td></tr></table></figure><ul><li>打印出ffmpeg版本号</li></ul><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528192952597.png" class="" title="image-20220528192952597"><h2 id="二、通过代码采集音频"><a href="#二、通过代码采集音频" class="headerlink" title="二、通过代码采集音频"></a>二、通过代码采集音频</h2><h3 id="1、如何通过ffmpeg命令采集音频？"><a href="#1、如何通过ffmpeg命令采集音频？" class="headerlink" title="1、如何通过ffmpeg命令采集音频？"></a>1、如何通过ffmpeg命令采集音频？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ffmpeg -f avfoundation -i :0 out.wav<br>ffplay out.wav<br></code></pre></td></tr></table></figure><h3 id="2、通过ffmpeg代码采集音频的关键三个步骤是什么？"><a href="#2、通过ffmpeg代码采集音频的关键三个步骤是什么？" class="headerlink" title="2、通过ffmpeg代码采集音频的关键三个步骤是什么？"></a>2、通过ffmpeg代码采集音频的关键三个步骤是什么？</h3><ul><li><div class="code-wrapper"><pre><code class="sh"># 注册所有设备avdevice_register_all(); <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><br>- ```sh<br>  # 打开指定设备<br>  ret = avformat<span class="hljs-constructor">_open_input(&amp;<span class="hljs-params">fmt_ctx</span>, <span class="hljs-params">devicename</span>, <span class="hljs-params">iformat</span>, &amp;<span class="hljs-params">options</span>)</span>;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;sh</p><h1 id="循环从打开设备的上下文中读取数据"><a href="#循环从打开设备的上下文中读取数据" class="headerlink" title="循环从打开设备的上下文中读取数据"></a>循环从打开设备的上下文中读取数据</h1><p>while ((ret &#x3D; av_read_frame(fmt_ctx, &amp;pkt)) &#x3D;&#x3D; 0)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><br><br>### <span class="hljs-number">3</span>、在通过写代码采集音频之前，需要对macApp项目做如下两个配置<br><br>- 关闭沙箱`App Sanbox`功能，才能读取mac本地目录<br>- 在 `info.plist` 文件夹中，配置麦克风访问权限说明，才能打开麦克风<br><br>&#123;% asset_img image<span class="hljs-number">-20220529095509767.</span>png image<span class="hljs-number">-20220529095509767</span> %&#125;<br><br><br><br>### <span class="hljs-number">4</span>、完整代码<br><br>```c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    <span class="hljs-built_in">avdevice_register_all</span>();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = <span class="hljs-built_in">av_find_input_format</span>(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = <span class="hljs-built_in">avformat_open_input</span>(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">av_strerror</span>(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/audio.pcm&quot;</span>;<br>    FILE *outFile = <span class="hljs-built_in">fopen</span>(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = <span class="hljs-built_in">av_read_frame</span>(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        <span class="hljs-built_in">usleep</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fwrite</span>(pkt.data, pkt.size, <span class="hljs-number">1</span>, outFile);<br>            <span class="hljs-built_in">fflush</span>(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            <span class="hljs-built_in">av_packet_unref</span>(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    <span class="hljs-built_in">avformat_close_input</span>(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5、播放录制的pcm文件-MacBook-Pro-Retina-15-inch-Mid-2015"><a href="#5、播放录制的pcm文件-MacBook-Pro-Retina-15-inch-Mid-2015" class="headerlink" title="5、播放录制的pcm文件(MacBook Pro (Retina, 15-inch, Mid 2015))"></a>5、播放录制的pcm文件(MacBook Pro (Retina, 15-inch, Mid 2015))</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ffplay -ar <span class="hljs-number">44100</span> -f f32le -ac <span class="hljs-number">2</span> audio.pcm <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-ffmpeg编译</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手动编译ffmpeg"><a href="#一、手动编译ffmpeg" class="headerlink" title="一、手动编译ffmpeg"></a>一、手动编译ffmpeg</h2><h3 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h3><p>这里先提前说明一下，最后希望达到的效果：</p><ul><li>编译出ffmpeg、ffprobe、ffplay三个命令行工具</li><li>只产生动态库，不产生静态库</li><li>将 fdk-aac、x264、x265集成到FFmpeg中</li></ul><h3 id="2、下载源码"><a href="#2、下载源码" class="headerlink" title="2、下载源码"></a>2、下载源码</h3><p>下载源码<a href="https://ffmpeg.org/releases/ffmpeg-4.3.2.tar.xz">ffmpeg-4.3.2.tar.xz</a>，然后解压。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410211902005-744008601-20220528181822420.png" class="" title="FFmpeg源码结构"><h3 id="3、安装依赖库"><a href="#3、安装依赖库" class="headerlink" title="3、安装依赖库"></a>3、安装依赖库</h3><ul><li>brew install yasm<ul><li>ffmpeg的编译过程依赖yasm</li><li>若未安装yasm会出现错误：nasm&#x2F;yasm not found or too old. Use –disable-x86asm for a crippled build.</li></ul></li><li>brew install sdl2<ul><li>ffplay依赖于sdl2</li><li>如果缺少sdl2，就无法编译出ffplay</li></ul></li><li>brew install fdk-aac<ul><li>不然会出现错误：ERROR: libfdk_aac not found</li></ul></li><li>brew install x264<ul><li>不然会出现错误：ERROR: libx264 not found</li></ul></li><li>brew install x265<ul><li>不然会出现错误：ERROR: libx265 not found</li></ul></li></ul><p>其实x264、x265、sdl2都在曾经执行<em>brew install ffmpeg</em>的时候安装过了。</p><ul><li>可以通过 brew list 的结果查看是否安装过<ul><li><em>brew list | grep fdk</em></li><li><em>brew list | grep x26</em></li><li><em>brew list | grep -E ‘fdk|x26’</em></li></ul></li><li>如果已经安装过，可以不用再执行<em>brew install</em></li></ul><h4 id="4、configure"><a href="#4、configure" class="headerlink" title="4、configure"></a>4、configure</h4><p>首先进入源码目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 我的源码放在了Downloads目录下</span><br><span class="hljs-built_in">cd</span> ~/Downloads/ffmpeg-4.3.2<br></code></pre></td></tr></table></figure><p>然后执行源码目录下的<code>configure</code>脚本，设置一些编译参数，做一些编译前的准备工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl  --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br></code></pre></td></tr></table></figure><ul><li><em>–prefix</em><ul><li>用以指定编译好的FFmpeg安装到哪个目录</li><li>一般放到&#x2F;usr&#x2F;local&#x2F;ffmpeg中即可</li></ul></li><li><em>–enable-shared</em><ul><li>生成动态库</li></ul></li><li><em>–disable-static</em><ul><li>不生成静态库</li></ul></li><li><em>–enable-libfdk-aac</em><ul><li>将fdk-aac内置到FFmpeg中</li></ul></li><li><em>–enable-libx264</em><ul><li>将x264内置到FFmpeg中</li></ul></li><li><em>–enable-libx265</em><ul><li>将x265内置到FFmpeg中</li></ul></li><li><em>–enable-gpl</em><ul><li>x264、x265要求开启<a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL License</a></li></ul></li><li><em>–enable-nonfree</em><ul><li><a href="https://github.com/FFmpeg/FFmpeg/blob/master/LICENSE.md">fdk-aac与GPL不兼容</a>，需要通过开启nonfree进行配置</li></ul></li></ul><p>你可以通过<em>configure –help</em>命令查看每一个配置项的作用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --<span class="hljs-built_in">help</span> | grep static <br><br><span class="hljs-comment"># 结果如下所示</span><br>--disable-static         <span class="hljs-keyword">do</span> not build static libraries [no]<br></code></pre></td></tr></table></figure><h3 id="5、编译"><a href="#5、编译" class="headerlink" title="5、编译"></a>5、编译</h3><p>接下来开始解析源代码目录中的Makefile文件，进行编译。*-j8*表示允许同时执行8个编译任务。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j8<br></code></pre></td></tr></table></figure><p>对于经常在类Unix系统下接触C&#x2F;C++开发的小伙伴来说，Makefile必然是不陌生的。这里给不了解Makefile的小伙伴简单科普一下：</p><ul><li>Makefile描述了整个项目的编译和链接等规则<ul><li>比如哪些文件需要编译？哪些文件不需要编译？哪些文件需要先编译？哪些文件需要后编译？等等</li></ul></li><li>Makefile可以使项目的编译变得自动化，不需要每次都手动输入一堆源文件和参数<ul><li>比如原来需要这么写：<em>gcc test1.c test2.c test3.c -o test</em></li></ul></li></ul><h3 id="6、安装"><a href="#6、安装" class="headerlink" title="6、安装"></a>6、安装</h3><p>将编译好的库安装到指定的位置：&#x2F;usr&#x2F;local&#x2F;ffmpeg。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装完毕后，&#x2F;usr&#x2F;local&#x2F;ffmpeg的目录结构如下所示。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410215351652-254888592.png" class="" title="FFmpeg目录结构"><h3 id="7、配置PATH"><a href="#7、配置PATH" class="headerlink" title="7、配置PATH"></a>7、配置PATH</h3><p>为了让bin目录中的ffmpeg、ffprobe、ffplay在任意位置都能够使用，需要先将bin目录配置到环境变量PATH中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑.zprofile</span><br>vim ~/.zprofile <br><br><span class="hljs-comment"># .zprofile文件中写入以下内容</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/ffmpeg/bin:<span class="hljs-variable">$PATH</span> <br><br><span class="hljs-comment"># 让.zprofile生效</span><br><span class="hljs-built_in">source</span> ~/.zprofile<br></code></pre></td></tr></table></figure><p>如果你用的是bash，而不是zsh，只需要将上面的.zprofile换成.bash_profile。</p><h3 id="8、验证"><a href="#8、验证" class="headerlink" title="8、验证"></a>8、验证</h3><p>接下来，在命令行上进行验证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -version <br><br><span class="hljs-comment"># 结果如下所示</span><br><br>ffmpeg version 4.3.2 Copyright (c) 2000-2021 the FFmpeg developers<br>built with Apple clang version 12.0.0 (clang-1200.0.32.29)<br>configuration: --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br>libavutil      56. 51.100 / 56. 51.100<br>libavcodec     58. 91.100 / 58. 91.100<br>libavformat    58. 45.100 / 58. 45.100<br>libavdevice    58. 10.100 / 58. 10.100<br>libavfilter     7. 85.100 /  7. 85.100<br>libswscale      5.  7.100 /  5.  7.100<br>libswresample   3.  7.100 /  3.  7.100<br>libpostproc    55.  7.100 / 55.  7.100<br></code></pre></td></tr></table></figure><p>此时，你完全可以通过<code>brew uninstall ffmpeg</code>卸载以前安装的FFmpeg。</p>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day05-音频基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频基础知识"><a href="#一、音频基础知识" class="headerlink" title="一、音频基础知识"></a>一、音频基础知识</h2><h3 id="1、从共享端和观看端来大致分析直播流程？"><a href="#1、从共享端和观看端来大致分析直播流程？" class="headerlink" title="1、从共享端和观看端来大致分析直播流程？"></a>1、从共享端和观看端来大致分析直播流程？</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528172645179.png" class=""><h3 id="2、什么是赫兹？人类听觉范围是多少？"><a href="#2、什么是赫兹？人类听觉范围是多少？" class="headerlink" title="2、什么是赫兹？人类听觉范围是多少？"></a>2、什么是赫兹？人类听觉范围是多少？</h3><ul><li>声音一秒振动的次数叫做赫兹，英文简称 <font color="red">Hz</font></li><li>20Hz ~ 20000Hz</li></ul><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173322566.png" class=""><h3 id="3、分别解释音调、音量、音色分别由什么决定？"><a href="#3、分别解释音调、音量、音色分别由什么决定？" class="headerlink" title="3、分别解释音调、音量、音色分别由什么决定？"></a>3、分别解释音调、音量、音色分别由什么决定？</h3><ul><li>音调：声音频率的高低</li><li>音量：声音振幅的大小</li><li>音色：谐波组合而成</li></ul><h3 id="4、音频播放的三要素是什么？"><a href="#4、音频播放的三要素是什么？" class="headerlink" title="4、音频播放的三要素是什么？"></a>4、音频播放的三要素是什么？</h3><ul><li>采样率：采样频率8k、16k、32k、44.1k、48k</li><li>采样格式：一个采样用多少bit存放。通常是16bit</li><li>声道数：单声道、双声道、多声道</li></ul><h3 id="5、WAV头部信息分析？（TODO后面有空在回看）"><a href="#5、WAV头部信息分析？（TODO后面有空在回看）" class="headerlink" title="5、WAV头部信息分析？（TODO后面有空在回看）"></a>5、WAV头部信息分析？（TODO后面有空在回看）</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173749399.png" class=""><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173803520.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-入门基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Mac终端命令"><a href="#一、Mac终端命令" class="headerlink" title="一、Mac终端命令"></a>一、Mac终端命令</h2><h3 id="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"><a href="#1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？" class="headerlink" title="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"></a>1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？</h3><ul><li>借助 <font color="red">which</font> 命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">which</span> ffmpeg<br>/usr/local/ffmpeg/bin/ffmpeg<br></code></pre></td></tr></table></figure><h3 id="2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？"><a href="#2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？" class="headerlink" title="2、借助命令行如何知道C语言的函数，比如 malloc 函数属于哪个库？"></a>2、借助命令行如何知道C语言的函数，比如 <font color="red">malloc</font> 函数属于哪个库？</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ man malloc<br></code></pre></td></tr></table></figure><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E8%AF%BE/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528133251618.png" class="" title="image-20220528133251618"><h3 id="3、env-命令有什么用？"><a href="#3、env-命令有什么用？" class="headerlink" title="3、env 命令有什么用？"></a>3、<code>env</code> 命令有什么用？</h3><ul><li>可以查看当前mac电脑的环境变量</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">env</span> | grep PATH<br>MANPATH=/usr/local/share/man:<br>PATH=/usr/local/ffmpeg/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin<br>INFOPATH=/usr/local/share/info:<br></code></pre></td></tr></table></figure><h2 id="二、C语言回顾"><a href="#二、C语言回顾" class="headerlink" title="二、C语言回顾"></a>二、C语言回顾</h2><h3 id="1、C语言中的数组长度与其他高级语言有什么不同？"><a href="#1、C语言中的数组长度与其他高级语言有什么不同？" class="headerlink" title="1、C语言中的数组长度与其他高级语言有什么不同？"></a>1、C语言中的<font color="red">数组长度</font>与其他高级语言有什么不同？</h3><ul><li>C语言中的数组长度，必须指定，无法自动扩容。</li><li>C语言中的数组存储数据的长度，需要开发者自己维护，不可直接对数组进行获取。</li></ul><h3 id="2、指针的实际作用？"><a href="#2、指针的实际作用？" class="headerlink" title="2、指针的实际作用？"></a>2、指针的实际作用？</h3><ul><li>①在参数传递时，不需要真的带着一大堆的数据，可以传递指针，提高程序执行效率。</li><li>②指针可以指向任何地址，所以灵活性很高</li></ul><h3 id="3、指针的定义？"><a href="#3、指针的定义？" class="headerlink" title="3、指针的定义？"></a>3、指针的定义？</h3><ul><li>指向内存所在地址的变量，就是指针。</li></ul><h3 id="4、对指针的操作可以分为哪两大方向？"><a href="#4、对指针的操作可以分为哪两大方向？" class="headerlink" title="4、对指针的操作可以分为哪两大方向？"></a>4、对指针的操作可以分为哪两大方向？</h3><ul><li>对指针本身进行操作</li><li>对指针指向的内容操作</li></ul><h3 id="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"><a href="#5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？" class="headerlink" title="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"></a>5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-comment">// insert code here...</span><br>    <br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br>    *p = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    *(p+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    *(p+<span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    <span class="hljs-built_in">free</span>(p);<br><span class="hljs-comment">//    p = NULL; (如果没有这句代码的保护，接下来对p的使用就是野指针，容易造成不可预知的错误)</span><br>    *p = <span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、什么是函数？什么是函数指针？最好自己先代码练一下。"><a href="#6、什么是函数？什么是函数指针？最好自己先代码练一下。" class="headerlink" title="6、什么是函数？什么是函数指针？最好自己先代码练一下。"></a>6、什么是函数？什么是函数指针？最好自己先代码练一下。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;          <span class="hljs-comment">//函数声明</span><br>    <span class="hljs-type">int</span> (*func)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);      <span class="hljs-comment">//函数指针</span><br>    func = sum;<br>    <span class="hljs-type">int</span> result = func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i\n&quot;</span>, result);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、usleep函数的作用是什么？单位是什么？"><a href="#7、usleep函数的作用是什么？单位是什么？" class="headerlink" title="7、usleep函数的作用是什么？单位是什么？"></a>7、<font color="red">usleep</font>函数的作用是什么？单位是什么？</h3><ul><li>usleep的函数是让线程阻塞一段时间</li><li>usleep的单位是<font color="red">微秒</font></li><li><code>usleep(1000000); </code> 就是阻塞1s钟</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">10</span>) &#123;<br>        usleep(<span class="hljs-number">1000000</span>);<br>        count ++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i \n&quot;</span>, count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"><a href="#8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）" class="headerlink" title="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"></a>8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">size_t</span> wLen = fwrite(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (wLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入文件失败(%zu)\n&quot;</span>, wLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入成功\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">size_t</span> rLen = fread(data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (rLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取文件失败(%zu)\n&quot;</span>, rLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取成功（%s）\n&quot;</span>, data);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath = <span class="hljs-string">&quot;/Users/carrot/Documents/Code_Template_iOS/01_音视频/10_李超/01_第一季/CDemo/Data/readFileName.txt&quot;</span>;<br>    writeFile(filePath);<br>    readFile(filePath);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>Mac命令</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建个人博客</title>
    <link href="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、开启GitHub的homepage功能"><a href="#一、开启GitHub的homepage功能" class="headerlink" title="一、开启GitHub的homepage功能"></a>一、开启GitHub的homepage功能</h2><h3 id="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"><a href="#1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。" class="headerlink" title="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"></a>1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。</h3><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425074530893.png" class="" title="image-20220425074530893"><h3 id="2、在项目中创建一个-index-html-文件，并填入以下内容。"><a href="#2、在项目中创建一个-index-html-文件，并填入以下内容。" class="headerlink" title="2、在项目中创建一个 index.html 文件，并填入以下内容。"></a>2、在项目中创建一个 <code>index.html</code> 文件，并填入以下内容。</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    Hello World<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、访问页面，表示这个阶段成功了。"><a href="#3、访问页面，表示这个阶段成功了。" class="headerlink" title="3、访问页面，表示这个阶段成功了。"></a>3、访问页面，表示这个阶段成功了。</h3><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425075606389.png" class="" title="image-20220425075606389"><h2 id="二、本地搭建hexo博客"><a href="#二、本地搭建hexo博客" class="headerlink" title="二、本地搭建hexo博客"></a>二、本地搭建hexo博客</h2><h3 id="1、安装Hexo（依赖nodejs环境，自行安装）"><a href="#1、安装Hexo（依赖nodejs环境，自行安装）" class="headerlink" title="1、安装Hexo（依赖nodejs环境，自行安装）"></a>1、安装Hexo（依赖nodejs环境，自行安装）</h3><p> <a href="https://hexo.io/zh-cn/docs/">Hexo 官方安装文档</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个 <code>hexo-blog</code> 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，页面默认主图风格如下</p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70.png" class="" title="请添加图片描述"><h3 id="2、更换hexo主题（个人比较喜欢Fluid）"><a href="#2、更换hexo主题（个人比较喜欢Fluid）" class="headerlink" title="2、更换hexo主题（个人比较喜欢Fluid）"></a>2、更换hexo主题（个人比较喜欢Fluid）</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">官方安装文档</a></p><h3 id="1、方式一："><a href="#1、方式一：" class="headerlink" title="1、方式一："></a>1、<strong>方式一：</strong></h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h3 id="2、方式二："><a href="#2、方式二：" class="headerlink" title="2、方式二："></a>2、<strong>方式二：</strong></h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3、创建「关于页」"><a href="#3、创建「关于页」" class="headerlink" title="3、创建「关于页」"></a>3、<strong>创建「关于页」</strong></h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><h3 id="4、启动测试"><a href="#4、启动测试" class="headerlink" title="4、启动测试"></a>4、启动测试</h3><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a></p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70-20220426063940880.png" class="" title="请添加图片描述"><h3 id="5、创建文章"><a href="#5、创建文章" class="headerlink" title="5、创建文章"></a>5、创建文章</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">post_asset_folder: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-comment">--path 测试1/测试文章1</span><br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426064448766-0926693.png" class="" title="image-20220426064448766"><h3 id="6、借助-Typora-软件编写文章"><a href="#6、借助-Typora-软件编写文章" class="headerlink" title="6、借助 Typora 软件编写文章"></a>6、借助 Typora 软件编写文章</h3><p>对于图片资源的管理比较麻烦，这里 <a href="https://moeci.com/posts/hexo-typora/">推荐方案</a></p><p>配置typora，图片文件保存路径: <code>./$&#123;filename&#125;</code> 即保存到与 当前正在编辑的文件名 相同的同级文件夹下</p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093318078.png" class="" title="img"><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093433709.png" class="" title="img"><p>配置给hexo-blog项目配置插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><h2 id="三、发布到GitHub-Pages"><a href="#三、发布到GitHub-Pages" class="headerlink" title="三、发布到GitHub Pages"></a>三、发布到GitHub Pages</h2><h3 id="1、安装-hexo-deployer-git-发布插件"><a href="#1、安装-hexo-deployer-git-发布插件" class="headerlink" title="1、安装  hexo-deployer-git 发布插件"></a>1、安装  <code>hexo-deployer-git</code> 发布插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="2、修改根目录下的-config-yml，配置-GitHub-相关信息"><a href="#2、修改根目录下的-config-yml，配置-GitHub-相关信息" class="headerlink" title="2、修改根目录下的 _config.yml，配置 GitHub 相关信息"></a>2、修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># Deployment<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy<span class="hljs-punctuation">:</span><br>  type<span class="hljs-punctuation">:</span> git<br>  repo<span class="hljs-punctuation">:</span> git@github.com<span class="hljs-punctuation">:</span>carrotlsp/carrotlsp.github.io.git<br>  branch<span class="hljs-punctuation">:</span> main<br></code></pre></td></tr></table></figure><h3 id="3、配置建立本地电脑和GitHub的ssh-key连接"><a href="#3、配置建立本地电脑和GitHub的ssh-key连接" class="headerlink" title="3、配置建立本地电脑和GitHub的ssh-key连接"></a>3、配置建立本地电脑和GitHub的ssh-key连接</h3><p>就是把自己 <code>cd ~/.ssh/ </code> 目录下的公钥给到GitHub配置中</p><h3 id="4、发布"><a href="#4、发布" class="headerlink" title="4、发布"></a>4、发布</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>访问 <code>https://carrotlsp.github.io/</code> 即可看到效果</p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065418218.png" class="" title="image-20220426065418218"><h2 id="四、一些小技巧"><a href="#四、一些小技巧" class="headerlink" title="四、一些小技巧"></a>四、一些小技巧</h2><h3 id="1、如何把关键字标红？"><a href="#1、如何把关键字标红？" class="headerlink" title="1、如何把关键字标红？"></a>1、如何把关键字标红？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span>红色字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>但是每次敲这个HTML语法过于繁杂，我们可以借助 <code>输入法</code> 的快捷指令即可，如下图</p><img src="/2022/04/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065638524.png" class="" title="image-20220426065638524"><h3 id="2、平时写文章常用命令？"><a href="#2、平时写文章常用命令？" class="headerlink" title="2、平时写文章常用命令？"></a>2、平时写文章常用命令？</h3><ul><li>创建文件结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post --path 文章目录/文章名字<br></code></pre></td></tr></table></figure><ul><li>生成文章</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><ul><li>发布文章</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01指针关键知识点</title>
    <link href="/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/"/>
    <url>/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2><h3 id="1、什么是地址（如何定义）？"><a href="#1、什么是地址（如何定义）？" class="headerlink" title="1、什么是地址（如何定义）？"></a>1、什么是地址（如何定义）？</h3><ul><li>【定义】内存中字节的编号称为地址。</li></ul><h3 id="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"><a href="#2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？" class="headerlink" title="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"></a>2、变量名、函数名、字符串名、数组名，它们都是<font color="red">地址的助记符</font>，但是在<font color="red">编码</font>过程中，这些名字的含义分别是什么？</h3><ul><li>【变量名】在编码过程中，表示的是数据本身。</li><li>【函数名、字符串名、数组名】在编码过程中，表示的是代码块或数据块的首地址。</li></ul><h3 id="3、什么是指针变量？"><a href="#3、什么是指针变量？" class="headerlink" title="3、什么是指针变量？"></a>3、什么是指针变量？</h3><ul><li>数据在内存中的地址也称为指针，如果一个变量存储了一份数据的指针，我们就称它问指针变量。</li></ul><h3 id="4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号"><a href="#4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号" class="headerlink" title="4、使用指针变量的时候，什么时候需带*号？什么时候不能带*号?"></a>4、使用指针变量的时候，什么时候需带<font color="red">*号</font>？什么时候不能带<font color="red">*号</font>?</h3><ul><li>【需带<font color="red">*号</font>】① 在定义指针变量时，为了和普通变量区分开来，需要使用<font color="red">*号</font> ②获取指针变量所指向数据时，需要使用<font color="red">*号</font> </li><li>【不能带<font color="red">*号</font>】在非定义表达式中，对指针进行赋值，改变其指向时不能使用<font color="red">*号</font> 。</li></ul><h3 id="5、-号在定义和使用指针变量时，含义一样吗？"><a href="#5、-号在定义和使用指针变量时，含义一样吗？" class="headerlink" title="5、*号在定义和使用指针变量时，含义一样吗？"></a>5、<font color="red">*号</font>在定义和使用指针变量时，含义一样吗？</h3><ul><li>【<font color="red">*号</font>定义时】*号可以用在指针变量的定义中，表明这是一个指针变量，以和普通变量区分开</li><li>【<font color="red">*号</font>使用时】使用指针变量时再前面加*号，表示获取指针指向的数据，或者说表示的是指针指向的数据本身。</li><li>也就是说，<strong>定义指针变量时的*号</strong>和<strong>使用指针变量时的*号</strong>意义完全不同</li></ul><h3 id="6、-号总共有几种用法？"><a href="#6、-号总共有几种用法？" class="headerlink" title="6、*号总共有几种用法？"></a>6、<font color="red">*号</font>总共有几种用法？</h3><ul><li>①用于乘法表达式中</li><li>②用于定义指针变量</li><li>③用于获取指针变量所指向的数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指针</tag>
      
      <tag>地址</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
