<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>day11-【实战】视频编码/解码</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>test</p><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day11%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AE%9E%E6%88%98/image-20220604182333615.png" class="">]]></content>
    
    
    <categories>
      
      <category>文章类别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day10-认识H264、H264压缩技术、码流分层NALU</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认识H264"><a href="#一、认识H264" class="headerlink" title="一、认识H264"></a>一、认识H264</h2><h3 id="1、H264的压缩比是多少？"><a href="#1、H264的压缩比是多少？" class="headerlink" title="1、H264的压缩比是多少？"></a>1、H264的压缩比是多少？</h3><ul><li><p>约 <font color="red">1&#x2F;100</font></p></li><li><p>比如格式为YUV420、分辨率为640x480、帧率为15的码流是 <font color="red">55296kbps</font></p></li><li><p>经过H264压缩后，实际码流约：500kbps</p></li></ul><h3 id="2、比如720p，如何确定它的最近码流大概是多少？"><a href="#2、比如720p，如何确定它的最近码流大概是多少？" class="headerlink" title="2、比如720p，如何确定它的最近码流大概是多少？"></a>2、比如720p，如何确定它的最近码流大概是多少？</h3><ul><li>可以去 <font color="red">声网</font> 这种比较权威的网站查询，这些都是经验值，没有标准值。</li><li><a href="https://docs.agora.io/cn">https://docs.agora.io/cn</a></li></ul><h3 id="3、什么是GOP？一个GOP中可能存在多个I帧吗？"><a href="#3、什么是GOP？一个GOP中可能存在多个I帧吗？" class="headerlink" title="3、什么是GOP？一个GOP中可能存在多个I帧吗？"></a>3、什么是GOP？一个GOP中可能存在多个I帧吗？</h3><ul><li>GOP：Group Of Picture，图像组</li><li>在最新的H264标准中，一个GOP可以存在多个I帧。</li></ul><h4 id="4、什么是I帧？什么是IDR帧？"><a href="#4、什么是I帧？什么是IDR帧？" class="headerlink" title="4、什么是I帧？什么是IDR帧？"></a>4、什么是I帧？什么是IDR帧？</h4><ul><li><p>I帧，关键帧，采用帧内压缩技术，能独立解码出完整的一帧图片。</p></li><li><p>IDR，解码器立即刷新帧，清空参考帧队列，防止帧错误蔓延。</p></li><li><p><font color="red">IDR帧是特殊的I帧</font></p></li><li><p><font color="red">每个GOP中的第一帧就是IDR帧</font></p></li></ul><h3 id="5、什么是P帧？"><a href="#5、什么是P帧？" class="headerlink" title="5、什么是P帧？"></a>5、什么是P帧？</h3><ul><li>P帧，Forward Predicted Frame，向前参考帧，会参考前面的I帧或P帧。</li><li>采用帧间编码压缩技术。</li></ul><h3 id="6、什么是B帧？"><a href="#6、什么是B帧？" class="headerlink" title="6、什么是B帧？"></a>6、什么是B帧？</h3><ul><li>B帧，Bidirectionally predicted frame，双向参考帧。</li><li>会同时参考前面和后面的I帧或P帧。</li><li>采用帧间编码压缩技术。</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604173715150.png" class=""><h2 id="二、H264压缩技术"><a href="#二、H264压缩技术" class="headerlink" title="二、H264压缩技术"></a>二、H264压缩技术</h2><h3 id="1、H264压缩主要四大技术，分别目标是什么？"><a href="#1、H264压缩主要四大技术，分别目标是什么？" class="headerlink" title="1、H264压缩主要四大技术，分别目标是什么？"></a>1、H264压缩主要四大技术，分别目标是什么？</h3><ul><li><font color="red">帧内压缩</font>：解决的是空域数据冗余问题</li><li><font color="red">帧间压缩</font>：解决的是时域数据冗余问题</li><li><font color="red">DCT变化</font>：整数离散余弦变换（DCT），将离散数据聚合，方便后续压缩</li><li><font color="red">CABAC压缩</font>：熵编码，属于无损压缩</li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604174439133.png" class=""><h3 id="2、视频花屏和卡顿的原因是什么？"><a href="#2、视频花屏和卡顿的原因是什么？" class="headerlink" title="2、视频花屏和卡顿的原因是什么？"></a>2、视频花屏和卡顿的原因是什么？</h3><ul><li><p><font color="red">花屏</font>：如果GOP分组中有帧丢失，会造成解码端的图像发生错误，这会出现马赛克(花屏)</p></li><li><p><font color="red">卡顿</font>：如果GOP解析错误，要等待下一个I帧到来，图像就静止了，这就出现的所谓的卡顿</p></li></ul><h3 id="三、H264码流分层"><a href="#三、H264码流分层" class="headerlink" title="三、H264码流分层"></a>三、H264码流分层</h3><h3 id="1、为什么要出现NAL层？"><a href="#1、为什么要出现NAL层？" class="headerlink" title="1、为什么要出现NAL层？"></a>1、为什么要出现NAL层？</h3><ul><li><font color="red">NAL</font>，Network Abstract Layer，视频数据网络抽象层</li><li>是为了解决网络传输过程中的<font color="red">丢包、乱序</font>等问题</li></ul><h3 id="2、什么VCL层？"><a href="#2、什么VCL层？" class="headerlink" title="2、什么VCL层？"></a>2、什么VCL层？</h3><ul><li>VCL，Video Coding Layer，视频数据编码层</li><li>帧内编码、帧间编码、DCT变换、熵编码最后出来的数据，就是VCL层数据</li></ul><h3 id="3、VCL结构关系？（从帧、片、宏块、子块）"><a href="#3、VCL结构关系？（从帧、片、宏块、子块）" class="headerlink" title="3、VCL结构关系？（从帧、片、宏块、子块）"></a>3、VCL结构关系？（从帧、片、宏块、子块）</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604175228931.png" class=""><h3 id="4、SODB、RBSP、NALU-之间是什么关系？"><a href="#4、SODB、RBSP、NALU-之间是什么关系？" class="headerlink" title="4、SODB、RBSP、NALU 之间是什么关系？"></a>4、SODB、RBSP、NALU 之间是什么关系？</h3><ul><li><p><font color="red">SODB</font>，String Of Data BIts，原始数据<font color="blue">比特流</font>，长度不一定是8的倍数，故需要补齐</p></li><li><p><font color="red">RBSP</font>，Raw Byte Sequence Payload，是对SODB数据进行补齐后的<font color="blue">字节流</font>数据；RBSP &#x3D; SODB + trailing bits</p></li><li><p><font color="red">NALU</font>，Network Abstract Layer Unit，网络抽象层单元 &#x3D; NAL header + RBSP</p></li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604175734381.png" class=""><h3 id="5、整个码流分层图（本节最重要的图，要能默写）"><a href="#5、整个码流分层图（本节最重要的图，要能默写）" class="headerlink" title="5、整个码流分层图（本节最重要的图，要能默写）"></a>5、整个码流分层图（本节最重要的图，要能默写）</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day10H264%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20220604180020055.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day09-视频基础、认识YUV、采集摄像头YUV数据</title>
    <link href="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、视频基础知识"><a href="#一、视频基础知识" class="headerlink" title="一、视频基础知识"></a>一、视频基础知识</h2><h3 id="1、RGB888和RGBA分别占多少字节？"><a href="#1、RGB888和RGBA分别占多少字节？" class="headerlink" title="1、RGB888和RGBA分别占多少字节？"></a>1、RGB888和RGBA分别占多少字节？</h3><ul><li>RGB888 占 3个字节（24bit）</li><li>RGBA 占 4个字节（32bit）</li></ul><h3 id="2、RGB-和-BGR-是什么？"><a href="#2、RGB-和-BGR-是什么？" class="headerlink" title="2、RGB 和 BGR 是什么？"></a>2、RGB 和 BGR 是什么？</h3><ul><li>RGB 与 BGR 都是颜色格式，只是存储是R与B的位置不同。</li><li>BMP 使用的是BGR格式。</li></ul><h3 id="3、PPI是什么？DPI是什么？"><a href="#3、PPI是什么？DPI是什么？" class="headerlink" title="3、PPI是什么？DPI是什么？"></a>3、PPI是什么？DPI是什么？</h3><ul><li>PPI：Pixels per inch，每英寸展示的像素数</li><li>DPI：Dots per inch，每英寸展示的点数</li><li><font color="red">PPI &gt; 300 就属于视网膜级别</font></li><li><font color="red">基本上PPI就等于DPI</font></li></ul><h3 id="4、什么是分辨率？"><a href="#4、什么是分辨率？" class="headerlink" title="4、什么是分辨率？"></a>4、什么是分辨率？</h3><ul><li>X轴的像素个数  * Y轴的像素个数</li><li>常见的宽高比 16:9  、 4:3</li><li>360P&#x2F;720&#x2F;1K&#x2F;2K</li></ul><h3 id="5、什么是帧率？"><a href="#5、什么是帧率？" class="headerlink" title="5、什么是帧率？"></a>5、什么是帧率？</h3><ul><li><p>每秒钟采集&#x2F;播放图像的个数</p></li><li><p>动画的帧率是 25 帧&#x2F;s</p></li><li><p>常见的帧率是: 15帧&#x2F;s，30帧&#x2F;s，60帧&#x2F;s</p></li><li><p><font color="red">分辨率决定视频的清晰度，帧率决定视频的流畅度。</font></p></li></ul><h3 id="6、帧率25的720p视频，RGB码流是多少？"><a href="#6、帧率25的720p视频，RGB码流是多少？" class="headerlink" title="6、帧率25的720p视频，RGB码流是多少？"></a>6、帧率25的720p视频，RGB码流是多少？</h3><ul><li>25 * 720 *1280 * 3 * 8 &#x3D; 552.96Mbps</li></ul><h3 id="7、图像大小与显示区域大小有哪三种关系？（解决方案？）"><a href="#7、图像大小与显示区域大小有哪三种关系？（解决方案？）" class="headerlink" title="7、图像大小与显示区域大小有哪三种关系？（解决方案？）"></a>7、图像大小与显示区域大小有哪三种关系？（解决方案？）</h3><ul><li>图像等于显示区域，刚好展示。</li><li>图像小于显示区域，拉伸&#x2F;留白。</li><li>图像大于显示区域，缩小&#x2F;裁剪。</li></ul><h2 id="二、认识YUV"><a href="#二、认识YUV" class="headerlink" title="二、认识YUV"></a>二、认识YUV</h2><h3 id="1、YUV中的Y是什么？UV是什么？"><a href="#1、YUV中的Y是什么？UV是什么？" class="headerlink" title="1、YUV中的Y是什么？UV是什么？"></a>1、YUV中的Y是什么？UV是什么？</h3><ul><li>Y：表示明亮度。</li><li>UV：是描述影像色彩饱和度。</li><li>主要的采样格式有YUV420、YUV422、YUV444</li></ul><h3 id="2、RGB与YUV的关系是什么？"><a href="#2、RGB与YUV的关系是什么？" class="headerlink" title="2、RGB与YUV的关系是什么？"></a>2、RGB与YUV的关系是什么？</h3><ul><li><p>RGB和YUV都是颜色的存储方案，但是适用场景不相同</p></li><li><p>RGB：用于屏幕图像的展示</p></li><li><p>YUV：用于采集与编码</p></li></ul><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604103944297.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604103956016.png" class=""><h3 id="3、为什么要采用YUV这种颜色格式？"><a href="#3、为什么要采用YUV这种颜色格式？" class="headerlink" title="3、为什么要采用YUV这种颜色格式？"></a>3、为什么要采用YUV这种颜色格式？</h3><ul><li><p>①视频的发展历史是从黑白视频到彩色视频，这是历史原因的部分</p></li><li><p>②YUV由于人跟对Y分量敏感，对UV分量不敏感，所以YUV易于压缩。这是技术上的优势</p></li></ul><h3 id="4、YUV420p存储格式示意图"><a href="#4、YUV420p存储格式示意图" class="headerlink" title="4、YUV420p存储格式示意图"></a>4、YUV420p存储格式示意图</h3><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604105607839.png" class=""><img src="/2022/06/04/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day09%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80/image-20220604105638912.png" class=""><h3 id="5、我们口头上常说的1兆带宽，是什么含义？"><a href="#5、我们口头上常说的1兆带宽，是什么含义？" class="headerlink" title="5、我们口头上常说的1兆带宽，是什么含义？"></a>5、我们口头上常说的1兆带宽，是什么含义？</h3><ul><li>这里的说的是1兆比特位，并非字节数</li><li>比如1兆的带宽，理论下载速度是 125KB&#x2F;s</li><li>所以我们计算码流大小的时候，通常也是用比特位来计算，也就是 <font color="red">比特位 &#x3D; 字节数 * 8</font></li></ul><h2 id="三、提取-x2F-录制YUV数据"><a href="#三、提取-x2F-录制YUV数据" class="headerlink" title="三、提取&#x2F;录制YUV数据"></a>三、提取&#x2F;录制YUV数据</h2><h3 id="1、如何从MP4中，提取YUV数据？"><a href="#1、如何从MP4中，提取YUV数据？" class="headerlink" title="1、如何从MP4中，提取YUV数据？"></a>1、如何从MP4中，提取YUV数据？</h3><ul><li>提取数据</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw.mp4 -an -c:v rawvideo -pix_fmt yuv420p yuv420p.yuv<br></code></pre></td></tr></table></figure><ul><li>播放yuv</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format yuv420p -framerate 25 yuv420p.yuv<br></code></pre></td></tr></table></figure><ul><li>如果格式错误，会产生很有趣的现象，比如改成<font color="red">nv12</font>格式，会产生绿屏效果；如果尺寸错误，就会出现以前电视机的满屏马赛克，或者屏幕上或下移动的效果。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format nv12 yuv420p.yuv<br></code></pre></td></tr></table></figure><h3 id="2、如何从MP4中，提取分别提取Y、U、V数据？"><a href="#2、如何从MP4中，提取分别提取Y、U、V数据？" class="headerlink" title="2、如何从MP4中，提取分别提取Y、U、V数据？"></a>2、如何从MP4中，提取分别提取Y、U、V数据？</h3><ul><li>单独提取</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw.mp4 -filter_complex <span class="hljs-string">&#x27;extractplanes=y+u+v[y][u][v]&#x27;</span> -map <span class="hljs-string">&#x27;[y]&#x27;</span> y.yuv -map <span class="hljs-string">&#x27;[u]&#x27;</span> u.yuv -map <span class="hljs-string">&#x27;[v]&#x27;</span> v.yuv<br></code></pre></td></tr></table></figure><ul><li>单独播放Y数据</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 864x486 -pixel_format gray y.yuv<br></code></pre></td></tr></table></figure><h3 id="3、代码录制YUV数据（和音频录制几乎一模一样）"><a href="#3、代码录制YUV数据（和音频录制几乎一模一样）" class="headerlink" title="3、代码录制YUV数据（和音频录制几乎一模一样）"></a>3、代码录制YUV数据（和音频录制几乎一模一样）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><br><span class="hljs-comment">//录视频</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_video</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;video_size&quot;</span>, <span class="hljs-string">&quot;640x480&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;framerate&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>, <span class="hljs-number">0</span>);<br>    av_dict_set(&amp;options, <span class="hljs-string">&quot;pixel_format&quot;</span>, <span class="hljs-string">&quot;nv12&quot;</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/nv12.yuv&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">20000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// (宽 * 高) * （yuv420=1.5 或 yuv422=2 或 yuv444=3）；nv12属于yuv420</span><br>            <span class="hljs-comment">// 640*480*1.5 = 460800</span><br>            fwrite(pkt.data, <span class="hljs-number">460800</span>, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>播放刚刚录制的视频</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay -video_size 640x480 -pixel_format nv12 nv12.yuv<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频AAC编码实战(三)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81%E5%AE%9E%E6%88%98/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、AAC编码代码实战"><a href="#一、AAC编码代码实战" class="headerlink" title="一、AAC编码代码实战"></a>一、AAC编码代码实战</h2><h3 id="1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？"><a href="#1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？" class="headerlink" title="1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？"></a>1、AVPacket、AVFrame这两个重要结构体一般存放什么数据？</h3><ul><li><p><font color="blue">AVFrame</font>：一般存放编码前的数据，对于音频数据来说，大部分情况下是PCM数据。</p></li><li><p><font color="blue">AVPacket</font>：一般存放编码后的数据，对于音频数据来说，大部分情况是压缩数据。</p></li></ul><h3 id="2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？"><a href="#2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？" class="headerlink" title="2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？"></a>2、那为什么从麦克风读取的PCM数据，却是放在AVPacket呢？</h3><ul><li>因为ffmpeg认为麦克风是个外部多媒体文件（类似mp4），ffmpeg统一认为是编码后的AVPacket数据。</li></ul><h3 id="3、AAC编码的关键步骤"><a href="#3、AAC编码的关键步骤" class="headerlink" title="3、AAC编码的关键步骤"></a>3、AAC编码的关键步骤</h3><ul><li>找到编码器、创建上下文、打开编码器</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs C">    <span class="hljs-comment">//找到libfdk编码器</span><br>    <span class="hljs-type">const</span> AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <span class="hljs-keyword">if</span> (codec == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_find_encoder_by_name error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//创建编码上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br><span class="hljs-comment">//    codec_ctx-&gt;bit_rate = 0; //AAC_LC:128K, AAC HE:64K, AAC HE V2:32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE; <span class="hljs-comment">//阅读 ffmpeg 代码，可知bit_rate 和 profile之间的设计关系</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span> (avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_open2 error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>初始化输入和数据格式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//初始化AAC编码前的数据载体</span><br>AVFrame *aac_frame = av_frame_alloc();<br><span class="hljs-keyword">if</span> (!aac_frame) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_alloc 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>aac_frame-&gt;nb_samples           = <span class="hljs-number">512</span>;                  <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>aac_frame-&gt;format               = AV_SAMPLE_FMT_S16;    <span class="hljs-comment">//每个采样大小</span><br>aac_frame-&gt;channel_layout       = AV_CH_LAYOUT_STEREO;  <span class="hljs-comment">//channel layout</span><br>av_frame_get_buffer(aac_frame, <span class="hljs-number">0</span>);                      <span class="hljs-comment">//512 * 2 * 2 = 2048 AVFrame的大小</span><br><span class="hljs-keyword">if</span> (!aac_frame-&gt;buf[<span class="hljs-number">0</span>]) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_get_buffer 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化AAC编码后的数据载体</span><br>AVPacket *aac_packet = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br><span class="hljs-keyword">if</span> (!aac_packet) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_packet_alloc 失败&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>双重循环，从编码器中去除编码后的数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//read data from device</span><br><span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>    usleep(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>    <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//进行内存拷贝</span><br>        <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>        <br>        <span class="hljs-comment">//重采样</span><br>        swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>        <br>        <span class="hljs-comment">//将重采样的数据拷贝到frame中去</span><br>        <span class="hljs-built_in">memcpy</span>(aac_frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>        <br>        <span class="hljs-comment">//将数据送编码器</span><br>        ret = avcodec_send_frame(codec_ctx, aac_frame);<br>        <br>        <span class="hljs-comment">//如果ret &gt;= 0 说明数据设置成功</span><br>        <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//获取编码后的音频数据，如果成功，则需要重复获取，直到失败为止</span><br>            ret = avcodec_receive_packet(codec_ctx, aac_packet);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_receive_packet error&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>            <br>            fwrite(aac_packet-&gt;data, aac_packet-&gt;size, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>        av_packet_unref(&amp;pkt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、AAC编码的完整代码-还有bug"><a href="#4、AAC编码的完整代码-还有bug" class="headerlink" title="4、AAC编码的完整代码(还有bug)"></a>4、AAC编码的完整代码(还有bug)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-comment">//录音</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (swr_ctx == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_alloc_set_opts error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    ret = swr_init(swr_ctx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_init error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br>    <br>    av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>    av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/he_audio.aac&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//找到libfdk编码器</span><br>    <span class="hljs-type">const</span> AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <span class="hljs-keyword">if</span> (codec == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_find_encoder_by_name error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//创建编码上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br><span class="hljs-comment">//    codec_ctx-&gt;bit_rate = 0; //AAC_LC:128K, AAC HE:64K, AAC HE V2:32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE; <span class="hljs-comment">//阅读 ffmpeg 代码，可知bit_rate 和 profile之间的设计关系</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span> (avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_open2 error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化AAC编码前的数据载体</span><br>    AVFrame *aac_frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span> (!aac_frame) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_alloc 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    aac_frame-&gt;nb_samples           = <span class="hljs-number">512</span>;                  <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>    aac_frame-&gt;format               = AV_SAMPLE_FMT_S16;    <span class="hljs-comment">//每个采样大小</span><br>    aac_frame-&gt;channel_layout       = AV_CH_LAYOUT_STEREO;  <span class="hljs-comment">//channel layout</span><br>    av_frame_get_buffer(aac_frame, <span class="hljs-number">0</span>);                      <span class="hljs-comment">//512 * 2 * 2 = 2048 AVFrame的大小</span><br>    <span class="hljs-keyword">if</span> (!aac_frame-&gt;buf[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_frame_get_buffer 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化AAC编码后的数据载体</span><br>    AVPacket *aac_packet = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br>    <span class="hljs-keyword">if</span> (!aac_packet) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;av_packet_alloc 失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//进行内存拷贝</span><br>            <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>            <br>            <span class="hljs-comment">//重采样</span><br>            swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>            <br>            <span class="hljs-comment">//将重采样的数据拷贝到frame中去</span><br>            <span class="hljs-built_in">memcpy</span>(aac_frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>            <br>            <span class="hljs-comment">//将数据送编码器</span><br>            ret = avcodec_send_frame(codec_ctx, aac_frame);<br>            <br>            <span class="hljs-comment">//如果ret &gt;= 0 说明数据设置成功</span><br>            <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//获取编码后的音频数据，如果成功，则需要重复获取，直到失败为止</span><br>                ret = avcodec_receive_packet(codec_ctx, aac_packet);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avcodec_receive_packet error&quot;</span>);<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>                    &#125;<br>                &#125;<br>                <br>                fwrite(aac_packet-&gt;data, aac_packet-&gt;size, <span class="hljs-number">1</span>, outFile);<br>                fflush(outFile);<br>            &#125;<br>            <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、借助ffplay播放编码后的aac文件"><a href="#5、借助ffplay播放编码后的aac文件" class="headerlink" title="5、借助ffplay播放编码后的aac文件"></a>5、借助ffplay播放编码后的aac文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffplay he_audio.aac<br></code></pre></td></tr></table></figure><h2 id="二、录音、重采样、aac编码代码抽取优化、完整代码"><a href="#二、录音、重采样、aac编码代码抽取优化、完整代码" class="headerlink" title="二、录音、重采样、aac编码代码抽取优化、完整代码"></a>二、录音、重采样、aac编码代码抽取优化、完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;testc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libavformat/avformat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> rec_status = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_status</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span>&#123;<br>    rec_status = status;<br>&#125;<br><br><span class="hljs-comment">//[in]</span><br><span class="hljs-comment">//[out]</span><br><span class="hljs-comment">//ret</span><br><span class="hljs-comment">//@brief encode audio data</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(AVCodecContext *ctx,</span><br><span class="hljs-params">            AVFrame *frame,</span><br><span class="hljs-params">            AVPacket *pkt,</span><br><span class="hljs-params">            FILE *output)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//将数据送编码器</span><br>    ret = avcodec_send_frame(ctx, frame);<br>    <br>    <span class="hljs-comment">//如果ret&gt;=0说明数据设置成功</span><br>    <span class="hljs-keyword">while</span>(ret &gt;= <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//获取编码后的音频数据,如果成功，需要重复获取，直到失败为止</span><br>        ret = avcodec_receive_packet(ctx, pkt);<br>        <br>        <span class="hljs-keyword">if</span>(ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ret &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, encoding audio frame\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">//write file</span><br>        fwrite(pkt-&gt;data, <span class="hljs-number">1</span>, pkt-&gt;size, output);<br>        fflush(output);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//[in]</span><br><span class="hljs-comment">//[out]</span><br><span class="hljs-comment">//</span><br><span class="hljs-type">static</span> AVCodecContext* <span class="hljs-title function_">open_coder</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-comment">//avcodec_find_encoder(AV_CODEC_ID_AAC);</span><br>    AVCodec *codec = avcodec_find_encoder_by_name(<span class="hljs-string">&quot;libfdk_aac&quot;</span>);<br>    <br>    <span class="hljs-comment">//创建 codec 上下文</span><br>    AVCodecContext *codec_ctx = avcodec_alloc_context3(codec);<br>    <br>    codec_ctx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;          <span class="hljs-comment">//输入音频的采样大小</span><br>    codec_ctx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;    <span class="hljs-comment">//输入音频的channel layout</span><br>    codec_ctx-&gt;channels = <span class="hljs-number">2</span>;                            <span class="hljs-comment">//输入音频 channel 个数</span><br>    codec_ctx-&gt;sample_rate = <span class="hljs-number">44100</span>;                     <span class="hljs-comment">//输入音频的采样率</span><br>    codec_ctx-&gt;bit_rate = <span class="hljs-number">0</span>; <span class="hljs-comment">//AAC_LC: 128K, AAC HE: 64K, AAC HE V2: 32K</span><br>    codec_ctx-&gt;profile = FF_PROFILE_AAC_HE_V2; <span class="hljs-comment">//阅读 ffmpeg 代码</span><br>    <br>    <span class="hljs-comment">//打开编码器</span><br>    <span class="hljs-keyword">if</span>(avcodec_open2(codec_ctx, codec, <span class="hljs-literal">NULL</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> codec_ctx;<br>&#125;<br><br><span class="hljs-type">static</span><br>SwrContext* <span class="hljs-title function_">init_swr</span><span class="hljs-params">()</span>&#123;<br>    <br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//channel, number/</span><br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,                <span class="hljs-comment">//ctx</span><br>                                 AV_CH_LAYOUT_STEREO, <span class="hljs-comment">//输出channel布局</span><br>                                 AV_SAMPLE_FMT_S16,   <span class="hljs-comment">//输出的采样格式</span><br>                                 <span class="hljs-number">44100</span>,               <span class="hljs-comment">//采样率</span><br>                                 AV_CH_LAYOUT_STEREO, <span class="hljs-comment">//输入channel布局</span><br>                                 AV_SAMPLE_FMT_FLT,   <span class="hljs-comment">//输入的采样格式</span><br>                                 <span class="hljs-number">44100</span>,               <span class="hljs-comment">//输入的采样率</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-keyword">if</span>(!swr_ctx)&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(swr_init(swr_ctx) &lt; <span class="hljs-number">0</span>)&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> swr_ctx;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief open audio device</span><br><span class="hljs-comment">  * @return succ: AVFormatContext*, fail: NULL</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">static</span><br>AVFormatContext* <span class="hljs-title function_">open_dev</span><span class="hljs-params">()</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//[[video device]:[audio device]]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//get format</span><br>    AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    <span class="hljs-keyword">if</span>((ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options)) &lt; <span class="hljs-number">0</span> )&#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to open audio device, [%d]%s\n&quot;</span>, ret, errors);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> fmt_ctx;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief xxxx</span><br><span class="hljs-comment"> * @return xxx</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br>AVFrame* <span class="hljs-title function_">create_frame</span><span class="hljs-params">()</span>&#123;<br>    <br>    AVFrame *frame = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//音频输入数据</span><br>    frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span>(!frame)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, No Memory!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//set parameters</span><br>    frame-&gt;nb_samples     = <span class="hljs-number">512</span>;                <span class="hljs-comment">//单通道一个音频帧的采样数</span><br>    frame-&gt;format         = AV_SAMPLE_FMT_S16;  <span class="hljs-comment">//每个采样的大小</span><br>    frame-&gt;channel_layout = AV_CH_LAYOUT_STEREO; <span class="hljs-comment">//channel layout</span><br>    <br>    <span class="hljs-comment">//alloc inner memory</span><br>    av_frame_get_buffer(frame, <span class="hljs-number">0</span>); <span class="hljs-comment">// 512 * 2 * = 2048</span><br>    <span class="hljs-keyword">if</span>(!frame-&gt;data[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-comment">//内存泄漏</span><br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> frame;<br>    <br>__ERROR:<br>    <span class="hljs-keyword">if</span>(frame)&#123;<br>        av_frame_free(&amp;frame);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">alloc_data_4_resample</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> ***src_data,</span><br><span class="hljs-params">                           <span class="hljs-type">int</span> *src_linesize,</span><br><span class="hljs-params">                           <span class="hljs-type">uint8_t</span> *** dst_data,</span><br><span class="hljs-params">                           <span class="hljs-type">int</span> *dst_linesize)</span>&#123;<br>    <span class="hljs-comment">//4096/4=1024/2=512</span><br>    <span class="hljs-comment">//创建输入缓冲区</span><br>    av_samples_alloc_array_and_samples(src_data,         <span class="hljs-comment">//输出缓冲区地址</span><br>                                       src_linesize,     <span class="hljs-comment">//缓冲区的大小</span><br>                                       <span class="hljs-number">2</span>,                 <span class="hljs-comment">//通道个数</span><br>                                       <span class="hljs-number">512</span>,               <span class="hljs-comment">//单通道采样个数</span><br>                                       AV_SAMPLE_FMT_FLT, <span class="hljs-comment">//采样格式</span><br>                                       <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//创建输出缓冲区</span><br>    av_samples_alloc_array_and_samples(dst_data,         <span class="hljs-comment">//输出缓冲区地址</span><br>                                       dst_linesize,     <span class="hljs-comment">//缓冲区的大小</span><br>                                       <span class="hljs-number">2</span>,                 <span class="hljs-comment">//通道个数</span><br>                                       <span class="hljs-number">512</span>,               <span class="hljs-comment">//单通道采样个数</span><br>                                       AV_SAMPLE_FMT_S16, <span class="hljs-comment">//采样格式</span><br>                                       <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free_data_4_resample</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> **src_data, <span class="hljs-type">uint8_t</span> **dst_data)</span>&#123;<br>    <span class="hljs-comment">//释放输入输出缓冲区</span><br>    <span class="hljs-keyword">if</span>(src_data)&#123;<br>        av_freep(&amp;src_data[<span class="hljs-number">0</span>]);<br>    &#125;<br>    av_freep(&amp;src_data);<br>    <br>    <span class="hljs-keyword">if</span>(dst_data)&#123;<br>        av_freep(&amp;dst_data[<span class="hljs-number">0</span>]);<br>    &#125;<br>    av_freep(&amp;dst_data);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_data_and_encode</span><span class="hljs-params">(AVFormatContext *fmt_ctx, <span class="hljs-comment">//</span></span><br><span class="hljs-params">                          AVCodecContext *c_ctx,</span><br><span class="hljs-params">                          SwrContext* swr_ctx,</span><br><span class="hljs-params">                          FILE *outfile)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//pakcet</span><br>    AVPacket pkt;<br>    AVFrame *frame = <span class="hljs-literal">NULL</span>;<br>    AVPacket *newpkt = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//重采样缓冲区</span><br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br><br>    frame = create_frame();<br>    <span class="hljs-keyword">if</span>(!frame)&#123;<br>        <span class="hljs-comment">//printf(...)</span><br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    newpkt = av_packet_alloc(); <span class="hljs-comment">//分配编码后的数据空间</span><br>    <span class="hljs-keyword">if</span>(!newpkt)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//分配重采样输入/输出缓冲区</span><br>    alloc_data_4_resample(&amp;src_data, &amp;src_linesize, &amp;dst_data, &amp;dst_linesize);<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span>((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> &amp;&amp; rec_status) &#123;<br>        <br>        <span class="hljs-comment">//进行内存拷贝，按字节拷贝的</span><br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)src_data[<span class="hljs-number">0</span>], (<span class="hljs-type">void</span>*)pkt.data, pkt.size);<br>        <br>        <span class="hljs-comment">//重采样</span><br>        swr_convert(swr_ctx,                    <span class="hljs-comment">//重采样的上下文</span><br>                    dst_data,                   <span class="hljs-comment">//输出结果缓冲区</span><br>                    <span class="hljs-number">512</span>,                        <span class="hljs-comment">//每个通道的采样数</span><br>                    (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-comment">//输入缓冲区</span><br>                    <span class="hljs-number">512</span>);                       <span class="hljs-comment">//输入单个通道的采样数</span><br>        <br>        <span class="hljs-comment">//将重采样的数据拷贝到 frame 中</span><br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span> *)frame-&gt;data[<span class="hljs-number">0</span>], dst_data[<span class="hljs-number">0</span>], dst_linesize);<br>        <br>        <span class="hljs-comment">//encode</span><br>        encode(c_ctx, frame, newpkt, outfile);<br>        <br>        <span class="hljs-comment">//</span><br>        av_packet_unref(&amp;pkt); <span class="hljs-comment">//release pkt</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//强制将编码器缓冲区中的音频进行编码输出</span><br>    encode(c_ctx, <span class="hljs-literal">NULL</span>, newpkt, outfile);<br><br>__ERROR:<br>    <span class="hljs-comment">//释放 AVFrame 和 AVPacket</span><br>    <span class="hljs-keyword">if</span>(frame)&#123;<br>        av_frame_free(&amp;frame);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(newpkt)&#123;<br>        av_packet_free(&amp;newpkt);<br>    &#125;<br>    <br>    <span class="hljs-comment">//释放重采样缓冲区</span><br>    free_data_4_resample(src_data, dst_data);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rec_audio</span><span class="hljs-params">()</span> &#123;<br>  <br>    <span class="hljs-comment">//context</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVCodecContext *c_ctx = <span class="hljs-literal">NULL</span>;<br>    SwrContext* swr_ctx = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//set log level</span><br>    av_log_set_level(AV_LOG_DEBUG);<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//start record</span><br>    rec_status = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//create file</span><br>    <span class="hljs-comment">//char *out = &quot;/Users/lichao/Downloads/av_base/audio.pcm&quot;;</span><br>    <span class="hljs-type">char</span> *out = <span class="hljs-string">&quot;/Users/lichao/Downloads/av_base/audio.aac&quot;</span>;<br>    FILE *outfile = fopen(out, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!outfile)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to open file!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//打开设备</span><br>    fmt_ctx = open_dev();<br>    <span class="hljs-keyword">if</span>(!fmt_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to open device!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">//打开编码器上下文</span><br>    c_ctx = open_coder();<br>    <span class="hljs-keyword">if</span>(!c_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">//初始化重采样上下文</span><br>    swr_ctx = init_swr();<br>    <span class="hljs-keyword">if</span>(!swr_ctx)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, Failed to alloc buf in frame!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> __ERROR;<br>    &#125;<br>    <br>    <span class="hljs-comment">//encode</span><br>    read_data_and_encode(fmt_ctx, c_ctx, swr_ctx, outfile);<br><br>__ERROR:<br>    <span class="hljs-comment">//释放重采样的上下文</span><br>    <span class="hljs-keyword">if</span>(swr_ctx)&#123;<br>        swr_free(&amp;swr_ctx);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(c_ctx)&#123;<br>        avcodec_free_context(&amp;c_ctx);<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    <span class="hljs-keyword">if</span>(fmt_ctx) &#123;<br>        avformat_close_input(&amp;fmt_ctx);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(outfile)&#123;<br>        <span class="hljs-comment">//close file</span><br>        fclose(outfile);<br>    &#125;<br><br>    av_log(<span class="hljs-literal">NULL</span>, AV_LOG_DEBUG, <span class="hljs-string">&quot;finish!\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    rec_audio();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频AAC编码理论(二)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频编码理论基础"><a href="#一、音频编码理论基础" class="headerlink" title="一、音频编码理论基础"></a>一、音频编码理论基础</h2><h3 id="1、音频有损压缩主要从哪些方面进行压缩？"><a href="#1、音频有损压缩主要从哪些方面进行压缩？" class="headerlink" title="1、音频有损压缩主要从哪些方面进行压缩？"></a>1、音频<code>有损压缩</code>主要从哪些方面进行压缩？</h3><ul><li>时域遮蔽、频域遮蔽</li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529103700600.png" class=""><h3 id="2、音频无损压缩有哪些有名的算法？"><a href="#2、音频无损压缩有哪些有名的算法？" class="headerlink" title="2、音频无损压缩有哪些有名的算法？"></a>2、音频<code>无损压缩</code>有哪些有名的算法？</h3><ul><li>哈夫曼算法</li><li>香农算法</li></ul><h3 id="3、常见的音频编码器？（例举三个）"><a href="#3、常见的音频编码器？（例举三个）" class="headerlink" title="3、常见的音频编码器？（例举三个）"></a>3、常见的音频编码器？（例举三个）</h3><ul><li>AAC：在直播系统中应用比较广泛</li><li>OPUS：是较新的音频编码器，WebRTC默认使用OPUS</li><li>G.711：一般在固话中使用</li></ul><h3 id="4、AAC有哪三种常见规格，简单描述下？"><a href="#4、AAC有哪三种常见规格，简单描述下？" class="headerlink" title="4、AAC有哪三种常见规格，简单描述下？"></a>4、AAC有哪三种常见规格，简单描述下？</h3><ul><li>AAC LC：<font color="red">(Low Complexity)</font> 低复杂度规格，<font color="blue">码流是128k左右</font>，音质好。</li><li>AAC HE：<font color="red">等于 AAC LC + SBR(Spectral Band Replication)</font>。其核心思想是按频谱保存。低频编码保存主要成分，高频单独放大编码保存音质。<font color="blue">码流在64k左右</font>。</li><li>AAC HE V2：等于<font color="red">AAC LC + SBR + PS(Parametric Stereo)</font>。其核心思想是双声道中的声音才在某种相似性，只需要存储一个声道的全部信息，然后花很少的字节用参数描述另一个声道和它不同的地方。<font color="blue">码流在48k左右。</font></li></ul><h3 id="5、AAC保存数据有两种格式，分别是什么？"><a href="#5、AAC保存数据有两种格式，分别是什么？" class="headerlink" title="5、AAC保存数据有两种格式，分别是什么？"></a>5、AAC保存数据有两种格式，分别是什么？</h3><ul><li>ADIF</li><li>ADTS</li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529105427279.png" class=""><h3 id="6、ADTS结构详解？"><a href="#6、ADTS结构详解？" class="headerlink" title="6、ADTS结构详解？"></a>6、ADTS结构详解？</h3><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529105523745.png" class=""><h3 id="7、通过ffmpeg命令生成aa文件"><a href="#7、通过ffmpeg命令生成aa文件" class="headerlink" title="7、通过ffmpeg命令生成aa文件"></a>7、通过ffmpeg命令生成aa文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">ffmpeg -i raw_xxx.mp4 -vn -c:a libfdk_aac -ar 44100 -channels 2 -profile:a aac_he dst_xxx.aac<br></code></pre></td></tr></table></figure><h3 id="8、借助网站分析生成的aac文件"><a href="#8、借助网站分析生成的aac文件" class="headerlink" title="8、借助网站分析生成的aac文件"></a>8、借助网站分析生成的aac文件</h3><ul><li><a href="https://www.p23.nl/projects/aac-header/">https://www.p23.nl/projects/aac-header/</a></li></ul><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91AAC%E7%BC%96%E7%A0%81/image-20220529110152214.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day08-音频重采样(一)</title>
    <link href="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/"/>
    <url>/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频重采样"><a href="#一、音频重采样" class="headerlink" title="一、音频重采样"></a>一、音频重采样</h2><h3 id="1、什么是音频重采样？"><a href="#1、什么是音频重采样？" class="headerlink" title="1、什么是音频重采样？"></a>1、什么是音频重采样？</h3><img src="/2022/05/29/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day08%E9%9F%B3%E9%A2%91%E9%87%8D%E9%87%87%E6%A0%B7/image-20220529110421107.png" class=""><h3 id="2、什么情况下需要进行音频重采样？"><a href="#2、什么情况下需要进行音频重采样？" class="headerlink" title="2、什么情况下需要进行音频重采样？"></a>2、什么情况下需要进行音频重采样？</h3><ul><li>情况一：从设备采集的音频数据与编码器要求的数据不一致</li><li>情况二：播放器要求的音频数据与要播放的音频数据不一致</li><li>情况三：要方便某些运算的时候</li></ul><h3 id="3、简述音频重采样主要三个步骤？"><a href="#3、简述音频重采样主要三个步骤？" class="headerlink" title="3、简述音频重采样主要三个步骤？"></a>3、简述音频重采样主要三个步骤？</h3><ul><li>设置重采样参数，并初始化重采样上下文。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs C">swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                             AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                             AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                             <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>ret = swr_init(swr_ctx);<br></code></pre></td></tr></table></figure><ul><li>设置重采样的输入和输出数据存放区</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br><br>av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ul><li>进行重采样</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 进行内存拷贝</span><br><span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)src_data[<span class="hljs-number">0</span>], (<span class="hljs-type">void</span>*)pkt.data, pkt.size);<br><br><span class="hljs-comment">// 重采样</span><br>swr_convert(swr_ctx,                    <span class="hljs-comment">//重采样的上下文</span><br>            dst_data,                   <span class="hljs-comment">//输出结果缓冲区</span><br>            <span class="hljs-number">512</span>,                        <span class="hljs-comment">//输出单个通道的采样数</span><br>            (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-comment">//输入缓冲区</span><br>            <span class="hljs-number">512</span>);                       <span class="hljs-comment">//输入单个通道的采样数</span><br><br><br>fwrite(dst_data[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, dst_linesize, outFile);<br>fflush(outFile);<br></code></pre></td></tr></table></figure><h3 id="4、音频重采样完整代码如下"><a href="#4、音频重采样完整代码如下" class="headerlink" title="4、音频重采样完整代码如下"></a>4、音频重采样完整代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libswresample/swresample.h&quot;</span></span><br><br><span class="hljs-comment">//录音</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    SwrContext *swr_ctx = <span class="hljs-literal">NULL</span>;<br>    <br>    swr_ctx = swr_alloc_set_opts(<span class="hljs-literal">NULL</span>,<br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_S16, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输出音频三要素</span><br>                                 AV_CH_LAYOUT_STEREO, AV_SAMPLE_FMT_FLT, <span class="hljs-number">44100</span>,  <span class="hljs-comment">// 重采样输入音频三要数</span><br>                                 <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (swr_ctx == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_alloc_set_opts error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    ret = swr_init(swr_ctx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;swr_init error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">uint8_t</span> **src_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> src_linesize = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> **dst_data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> dst_linesize = <span class="hljs-number">0</span>;<br>    <br>    av_samples_alloc_array_and_samples(&amp;src_data, &amp;src_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_FLT, <span class="hljs-number">0</span>);<br>    av_samples_alloc_array_and_samples(&amp;dst_data, &amp;dst_linesize, <span class="hljs-number">2</span>, <span class="hljs-number">512</span>, AV_SAMPLE_FMT_S16, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    avdevice_register_all();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = av_find_input_format(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = avformat_open_input(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_strerror(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/swr_audio.pcm&quot;</span>;<br>    FILE *outFile = fopen(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = av_read_frame(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        usleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//进行内存拷贝</span><br>            <span class="hljs-built_in">memcpy</span>(src_data[<span class="hljs-number">0</span>], pkt.data, pkt.size);<br>            <br>            <span class="hljs-comment">//重采样</span><br>            swr_convert(swr_ctx, dst_data, <span class="hljs-number">512</span>, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)src_data, <span class="hljs-number">512</span>);<br>            <br>            fwrite(dst_data[<span class="hljs-number">0</span>], dst_linesize, <span class="hljs-number">1</span>, outFile);<br>            fflush(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            av_packet_unref(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    avformat_close_input(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、借助ffplay播放重采样的数据"><a href="#5、借助ffplay播放重采样的数据" class="headerlink" title="5、借助ffplay播放重采样的数据"></a>5、借助ffplay播放重采样的数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SH">ffplay -ar 44100 -f s16le -ac 2 swr_audio.pcm <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day07-ffmpeg集成、音频采集</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、集成FFmpeg到MacApp项目"><a href="#一、集成FFmpeg到MacApp项目" class="headerlink" title="一、集成FFmpeg到MacApp项目"></a>一、集成FFmpeg到MacApp项目</h2><h3 id="1、创建一个mac的App应用，语言选择swift。"><a href="#1、创建一个mac的App应用，语言选择swift。" class="headerlink" title="1、创建一个mac的App应用，语言选择swift。"></a>1、创建一个mac的App应用，语言选择swift。</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190434270.png" class="" title="image-20220528190917242"><h3 id="2、将ffmpeg目录下的-lib-和-include-拷贝到项目中。"><a href="#2、将ffmpeg目录下的-lib-和-include-拷贝到项目中。" class="headerlink" title="2、将ffmpeg目录下的 lib 和 include 拷贝到项目中。"></a>2、将ffmpeg目录下的 <code>lib</code> 和 <code>include</code> 拷贝到项目中。</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190702809.png" class="" title="image-20220528190917242"><h3 id="3、将ffmpeg库引入项目中"><a href="#3、将ffmpeg库引入项目中" class="headerlink" title="3、将ffmpeg库引入项目中"></a>3、将ffmpeg库引入项目中</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528190917242.png" class="" title="image-20220528190917242"><h3 id="4、引入ffmpeg头文件"><a href="#4、引入ffmpeg头文件" class="headerlink" title="4、引入ffmpeg头文件"></a>4、引入ffmpeg头文件</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528192359166.png" class="" title="image-20220528192359166"><h3 id="5、加入代码测试"><a href="#5、加入代码测试" class="headerlink" title="5、加入代码测试"></a>5、加入代码测试</h3><ul><li>test.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> test_h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> test_h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* test_h */</span></span><br></code></pre></td></tr></table></figure><ul><li>test.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// set log level</span><br>    av_log_set_level(AV_LOG_DEBUG);<br>    <span class="hljs-comment">// test ffmpeg</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *info = av_version_info();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n&quot;</span>, info);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ViewController.swift</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Cocoa<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">NSViewController</span> &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br><br>        <span class="hljs-comment">// Do any additional setup after loading the view.</span><br>        <span class="hljs-keyword">self</span>.startRecordAudio();<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> representedObject: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span> &#123;<br>        <span class="hljs-keyword">didSet</span> &#123;<br>        <span class="hljs-comment">// Update the view, if already loaded.</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">startRecordAudio</span>() &#123;<br>        record_audio()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FFmpegLearn-Bridging-Header.h 桥接c和swift的文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#import <span class="hljs-string">&quot;test.h&quot;</span></span><br></code></pre></td></tr></table></figure><ul><li>打印出ffmpeg版本号</li></ul><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day07%E9%9F%B3%E9%A2%91%E9%87%87%E9%9B%86/image-20220528192952597.png" class="" title="image-20220528192952597"><h2 id="二、通过代码采集音频"><a href="#二、通过代码采集音频" class="headerlink" title="二、通过代码采集音频"></a>二、通过代码采集音频</h2><h3 id="1、如何通过ffmpeg命令采集音频？"><a href="#1、如何通过ffmpeg命令采集音频？" class="headerlink" title="1、如何通过ffmpeg命令采集音频？"></a>1、如何通过ffmpeg命令采集音频？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ffmpeg -f avfoundation -i :0 out.wav<br>ffplay out.wav<br></code></pre></td></tr></table></figure><h3 id="2、通过ffmpeg代码采集音频的关键三个步骤是什么？"><a href="#2、通过ffmpeg代码采集音频的关键三个步骤是什么？" class="headerlink" title="2、通过ffmpeg代码采集音频的关键三个步骤是什么？"></a>2、通过ffmpeg代码采集音频的关键三个步骤是什么？</h3><ul><li><div class="code-wrapper"><pre><code class="sh"># 注册所有设备avdevice_register_all(); <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><br>- ```sh<br>  # 打开指定设备<br>  ret = avformat<span class="hljs-constructor">_open_input(&amp;<span class="hljs-params">fmt_ctx</span>, <span class="hljs-params">devicename</span>, <span class="hljs-params">iformat</span>, &amp;<span class="hljs-params">options</span>)</span>;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;sh</p><h1 id="循环从打开设备的上下文中读取数据"><a href="#循环从打开设备的上下文中读取数据" class="headerlink" title="循环从打开设备的上下文中读取数据"></a>循环从打开设备的上下文中读取数据</h1><p>while ((ret &#x3D; av_read_frame(fmt_ctx, &amp;pkt)) &#x3D;&#x3D; 0)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><br><br>### <span class="hljs-number">3</span>、在通过写代码采集音频之前，需要对macApp项目做如下两个配置<br><br>- 关闭沙箱`App Sanbox`功能，才能读取mac本地目录<br>- 在 `info.plist` 文件夹中，配置麦克风访问权限说明，才能打开麦克风<br><br>&#123;% asset_img image<span class="hljs-number">-20220529095509767.</span>png image<span class="hljs-number">-20220529095509767</span> %&#125;<br><br><br><br>### <span class="hljs-number">4</span>、完整代码<br><br>```c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavutil/avutil.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavdevice/avdevice.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libavcodec/avcodec.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">record_audio</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> errors[<span class="hljs-number">1024</span>];<br>    <br>    <span class="hljs-comment">//ctx</span><br>    AVFormatContext *fmt_ctx = <span class="hljs-literal">NULL</span>;<br>    AVDictionary *options = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-comment">//packet</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    AVPacket pkt;<br>    <br>    <span class="hljs-comment">// [video device]:[aduio device]</span><br>    <span class="hljs-type">char</span> *devicename = <span class="hljs-string">&quot;:0&quot;</span>;<br>    <br>    <span class="hljs-comment">//register audio device</span><br>    <span class="hljs-built_in">avdevice_register_all</span>();<br>    <br>    <span class="hljs-comment">//get format</span><br>    <span class="hljs-type">const</span> AVInputFormat *iformat = <span class="hljs-built_in">av_find_input_format</span>(<span class="hljs-string">&quot;avfoundation&quot;</span>);<br>    <br>    <span class="hljs-comment">//open device</span><br>    ret = <span class="hljs-built_in">avformat_open_input</span>(&amp;fmt_ctx, devicename, iformat, &amp;options);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">av_strerror</span>(ret, errors, <span class="hljs-number">1024</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;avformat_open_input error&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//crate file</span><br>    <span class="hljs-type">char</span> *outPath = <span class="hljs-string">&quot;/Users/carrot/Desktop/MyCode/audio.pcm&quot;</span>;<br>    FILE *outFile = <span class="hljs-built_in">fopen</span>(outPath, <span class="hljs-string">&quot;wb+&quot;</span>);<br>    <span class="hljs-keyword">if</span> (outFile == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;outFile fopen failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//read data from device</span><br>    <span class="hljs-keyword">while</span> ((ret = <span class="hljs-built_in">av_read_frame</span>(fmt_ctx, &amp;pkt)) == <span class="hljs-number">0</span> || count++ &lt; <span class="hljs-number">50000</span>) &#123;<br>        <span class="hljs-built_in">usleep</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret %d&quot;</span>, ret);<br>        <span class="hljs-keyword">if</span> (pkt.size &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fwrite</span>(pkt.data, pkt.size, <span class="hljs-number">1</span>, outFile);<br>            <span class="hljs-built_in">fflush</span>(outFile);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;packet size is %d(%p), count=%d \n&quot;</span>, pkt.size, pkt.data, count);<br>            <span class="hljs-built_in">av_packet_unref</span>(&amp;pkt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//close device and release ctx</span><br>    <span class="hljs-built_in">avformat_close_input</span>(&amp;fmt_ctx);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行结束\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5、播放录制的pcm文件-MacBook-Pro-Retina-15-inch-Mid-2015"><a href="#5、播放录制的pcm文件-MacBook-Pro-Retina-15-inch-Mid-2015" class="headerlink" title="5、播放录制的pcm文件(MacBook Pro (Retina, 15-inch, Mid 2015))"></a>5、播放录制的pcm文件(MacBook Pro (Retina, 15-inch, Mid 2015))</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ffplay -ar <span class="hljs-number">44100</span> -f f32le -ac <span class="hljs-number">2</span> audio.pcm <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day06-ffmpeg编译</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手动编译ffmpeg"><a href="#一、手动编译ffmpeg" class="headerlink" title="一、手动编译ffmpeg"></a>一、手动编译ffmpeg</h2><h3 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h3><p>这里先提前说明一下，最后希望达到的效果：</p><ul><li>编译出ffmpeg、ffprobe、ffplay三个命令行工具</li><li>只产生动态库，不产生静态库</li><li>将 fdk-aac、x264、x265集成到FFmpeg中</li></ul><h3 id="2、下载源码"><a href="#2、下载源码" class="headerlink" title="2、下载源码"></a>2、下载源码</h3><p>下载源码<a href="https://ffmpeg.org/releases/ffmpeg-4.3.2.tar.xz">ffmpeg-4.3.2.tar.xz</a>，然后解压。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410211902005-744008601-20220528181822420.png" class="" title="FFmpeg源码结构"><h3 id="3、安装依赖库"><a href="#3、安装依赖库" class="headerlink" title="3、安装依赖库"></a>3、安装依赖库</h3><ul><li>brew install yasm<ul><li>ffmpeg的编译过程依赖yasm</li><li>若未安装yasm会出现错误：nasm&#x2F;yasm not found or too old. Use –disable-x86asm for a crippled build.</li></ul></li><li>brew install sdl2<ul><li>ffplay依赖于sdl2</li><li>如果缺少sdl2，就无法编译出ffplay</li></ul></li><li>brew install fdk-aac<ul><li>不然会出现错误：ERROR: libfdk_aac not found</li></ul></li><li>brew install x264<ul><li>不然会出现错误：ERROR: libx264 not found</li></ul></li><li>brew install x265<ul><li>不然会出现错误：ERROR: libx265 not found</li></ul></li></ul><p>其实x264、x265、sdl2都在曾经执行<em>brew install ffmpeg</em>的时候安装过了。</p><ul><li>可以通过 brew list 的结果查看是否安装过<ul><li><em>brew list | grep fdk</em></li><li><em>brew list | grep x26</em></li><li><em>brew list | grep -E ‘fdk|x26’</em></li></ul></li><li>如果已经安装过，可以不用再执行<em>brew install</em></li></ul><h4 id="4、configure"><a href="#4、configure" class="headerlink" title="4、configure"></a>4、configure</h4><p>首先进入源码目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 我的源码放在了Downloads目录下</span><br><span class="hljs-built_in">cd</span> ~/Downloads/ffmpeg-4.3.2<br></code></pre></td></tr></table></figure><p>然后执行源码目录下的<code>configure</code>脚本，设置一些编译参数，做一些编译前的准备工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl  --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br></code></pre></td></tr></table></figure><ul><li><em>–prefix</em><ul><li>用以指定编译好的FFmpeg安装到哪个目录</li><li>一般放到&#x2F;usr&#x2F;local&#x2F;ffmpeg中即可</li></ul></li><li><em>–enable-shared</em><ul><li>生成动态库</li></ul></li><li><em>–disable-static</em><ul><li>不生成静态库</li></ul></li><li><em>–enable-libfdk-aac</em><ul><li>将fdk-aac内置到FFmpeg中</li></ul></li><li><em>–enable-libx264</em><ul><li>将x264内置到FFmpeg中</li></ul></li><li><em>–enable-libx265</em><ul><li>将x265内置到FFmpeg中</li></ul></li><li><em>–enable-gpl</em><ul><li>x264、x265要求开启<a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL License</a></li></ul></li><li><em>–enable-nonfree</em><ul><li><a href="https://github.com/FFmpeg/FFmpeg/blob/master/LICENSE.md">fdk-aac与GPL不兼容</a>，需要通过开启nonfree进行配置</li></ul></li></ul><p>你可以通过<em>configure –help</em>命令查看每一个配置项的作用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --<span class="hljs-built_in">help</span> | grep static <br><br><span class="hljs-comment"># 结果如下所示</span><br>--disable-static         <span class="hljs-keyword">do</span> not build static libraries [no]<br></code></pre></td></tr></table></figure><h3 id="5、编译"><a href="#5、编译" class="headerlink" title="5、编译"></a>5、编译</h3><p>接下来开始解析源代码目录中的Makefile文件，进行编译。*-j8*表示允许同时执行8个编译任务。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j8<br></code></pre></td></tr></table></figure><p>对于经常在类Unix系统下接触C&#x2F;C++开发的小伙伴来说，Makefile必然是不陌生的。这里给不了解Makefile的小伙伴简单科普一下：</p><ul><li>Makefile描述了整个项目的编译和链接等规则<ul><li>比如哪些文件需要编译？哪些文件不需要编译？哪些文件需要先编译？哪些文件需要后编译？等等</li></ul></li><li>Makefile可以使项目的编译变得自动化，不需要每次都手动输入一堆源文件和参数<ul><li>比如原来需要这么写：<em>gcc test1.c test2.c test3.c -o test</em></li></ul></li></ul><h3 id="6、安装"><a href="#6、安装" class="headerlink" title="6、安装"></a>6、安装</h3><p>将编译好的库安装到指定的位置：&#x2F;usr&#x2F;local&#x2F;ffmpeg。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装完毕后，&#x2F;usr&#x2F;local&#x2F;ffmpeg的目录结构如下所示。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410215351652-254888592.png" class="" title="FFmpeg目录结构"><h3 id="7、配置PATH"><a href="#7、配置PATH" class="headerlink" title="7、配置PATH"></a>7、配置PATH</h3><p>为了让bin目录中的ffmpeg、ffprobe、ffplay在任意位置都能够使用，需要先将bin目录配置到环境变量PATH中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑.zprofile</span><br>vim ~/.zprofile <br><br><span class="hljs-comment"># .zprofile文件中写入以下内容</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/ffmpeg/bin:<span class="hljs-variable">$PATH</span> <br><br><span class="hljs-comment"># 让.zprofile生效</span><br><span class="hljs-built_in">source</span> ~/.zprofile<br></code></pre></td></tr></table></figure><p>如果你用的是bash，而不是zsh，只需要将上面的.zprofile换成.bash_profile。</p><h3 id="8、验证"><a href="#8、验证" class="headerlink" title="8、验证"></a>8、验证</h3><p>接下来，在命令行上进行验证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -version <br><br><span class="hljs-comment"># 结果如下所示</span><br><br>ffmpeg version 4.3.2 Copyright (c) 2000-2021 the FFmpeg developers<br>built with Apple clang version 12.0.0 (clang-1200.0.32.29)<br>configuration: --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br>libavutil      56. 51.100 / 56. 51.100<br>libavcodec     58. 91.100 / 58. 91.100<br>libavformat    58. 45.100 / 58. 45.100<br>libavdevice    58. 10.100 / 58. 10.100<br>libavfilter     7. 85.100 /  7. 85.100<br>libswscale      5.  7.100 /  5.  7.100<br>libswresample   3.  7.100 /  3.  7.100<br>libpostproc    55.  7.100 / 55.  7.100<br></code></pre></td></tr></table></figure><p>此时，你完全可以通过<code>brew uninstall ffmpeg</code>卸载以前安装的FFmpeg。</p>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day05-音频基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频基础知识"><a href="#一、音频基础知识" class="headerlink" title="一、音频基础知识"></a>一、音频基础知识</h2><h3 id="1、从共享端和观看端来大致分析直播流程？"><a href="#1、从共享端和观看端来大致分析直播流程？" class="headerlink" title="1、从共享端和观看端来大致分析直播流程？"></a>1、从共享端和观看端来大致分析直播流程？</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528172645179.png" class=""><h3 id="2、什么是赫兹？人类听觉范围是多少？"><a href="#2、什么是赫兹？人类听觉范围是多少？" class="headerlink" title="2、什么是赫兹？人类听觉范围是多少？"></a>2、什么是赫兹？人类听觉范围是多少？</h3><ul><li>声音一秒振动的次数叫做赫兹，英文简称 <font color="red">Hz</font></li><li>20Hz ~ 20000Hz</li></ul><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173322566.png" class=""><h3 id="3、分别解释音调、音量、音色分别由什么决定？"><a href="#3、分别解释音调、音量、音色分别由什么决定？" class="headerlink" title="3、分别解释音调、音量、音色分别由什么决定？"></a>3、分别解释音调、音量、音色分别由什么决定？</h3><ul><li>音调：声音频率的高低</li><li>音量：声音振幅的大小</li><li>音色：谐波组合而成</li></ul><h3 id="4、音频播放的三要素是什么？"><a href="#4、音频播放的三要素是什么？" class="headerlink" title="4、音频播放的三要素是什么？"></a>4、音频播放的三要素是什么？</h3><ul><li>采样率：采样频率8k、16k、32k、44.1k、48k</li><li>采样格式：一个采样用多少bit存放。通常是16bit</li><li>声道数：单声道、双声道、多声道</li></ul><h3 id="5、WAV头部信息分析？（TODO后面有空在回看）"><a href="#5、WAV头部信息分析？（TODO后面有空在回看）" class="headerlink" title="5、WAV头部信息分析？（TODO后面有空在回看）"></a>5、WAV头部信息分析？（TODO后面有空在回看）</h3><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173749399.png" class=""><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528173803520.png" class="">]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-入门基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Mac终端命令"><a href="#一、Mac终端命令" class="headerlink" title="一、Mac终端命令"></a>一、Mac终端命令</h2><h3 id="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"><a href="#1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？" class="headerlink" title="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"></a>1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？</h3><ul><li>借助 <font color="red">which</font> 命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">which</span> ffmpeg<br>/usr/local/ffmpeg/bin/ffmpeg<br></code></pre></td></tr></table></figure><h3 id="2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？"><a href="#2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？" class="headerlink" title="2、借助命令行如何知道C语言的函数，比如 malloc 函数属于哪个库？"></a>2、借助命令行如何知道C语言的函数，比如 <font color="red">malloc</font> 函数属于哪个库？</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ man malloc<br></code></pre></td></tr></table></figure><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528133251618.png" class="" title="image-20220528133251618"><h3 id="3、env-命令有什么用？"><a href="#3、env-命令有什么用？" class="headerlink" title="3、env 命令有什么用？"></a>3、<code>env</code> 命令有什么用？</h3><ul><li>可以查看当前mac电脑的环境变量</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">env</span> | grep PATH<br>MANPATH=/usr/local/share/man:<br>PATH=/usr/local/ffmpeg/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin<br>INFOPATH=/usr/local/share/info:<br></code></pre></td></tr></table></figure><h2 id="二、C语言回顾"><a href="#二、C语言回顾" class="headerlink" title="二、C语言回顾"></a>二、C语言回顾</h2><h3 id="1、C语言中的数组长度与其他高级语言有什么不同？"><a href="#1、C语言中的数组长度与其他高级语言有什么不同？" class="headerlink" title="1、C语言中的数组长度与其他高级语言有什么不同？"></a>1、C语言中的<font color="red">数组长度</font>与其他高级语言有什么不同？</h3><ul><li>C语言中的数组长度，必须指定，无法自动扩容。</li><li>C语言中的数组存储数据的长度，需要开发者自己维护，不可直接对数组进行获取。</li></ul><h3 id="2、指针的实际作用？"><a href="#2、指针的实际作用？" class="headerlink" title="2、指针的实际作用？"></a>2、指针的实际作用？</h3><ul><li>①在参数传递时，不需要真的带着一大堆的数据，可以传递指针，提高程序执行效率。</li><li>②指针可以指向任何地址，所以灵活性很高</li></ul><h3 id="3、指针的定义？"><a href="#3、指针的定义？" class="headerlink" title="3、指针的定义？"></a>3、指针的定义？</h3><ul><li>指向内存所在地址的变量，就是指针。</li></ul><h3 id="4、对指针的操作可以分为哪两大方向？"><a href="#4、对指针的操作可以分为哪两大方向？" class="headerlink" title="4、对指针的操作可以分为哪两大方向？"></a>4、对指针的操作可以分为哪两大方向？</h3><ul><li>对指针本身进行操作</li><li>对指针指向的内容操作</li></ul><h3 id="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"><a href="#5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？" class="headerlink" title="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"></a>5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-comment">// insert code here...</span><br>    <br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br>    *p = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    *(p+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    *(p+<span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    <span class="hljs-built_in">free</span>(p);<br><span class="hljs-comment">//    p = NULL; (如果没有这句代码的保护，接下来对p的使用就是野指针，容易造成不可预知的错误)</span><br>    *p = <span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、什么是函数？什么是函数指针？最好自己先代码练一下。"><a href="#6、什么是函数？什么是函数指针？最好自己先代码练一下。" class="headerlink" title="6、什么是函数？什么是函数指针？最好自己先代码练一下。"></a>6、什么是函数？什么是函数指针？最好自己先代码练一下。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;          <span class="hljs-comment">//函数声明</span><br>    <span class="hljs-type">int</span> (*func)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);      <span class="hljs-comment">//函数指针</span><br>    func = sum;<br>    <span class="hljs-type">int</span> result = func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i\n&quot;</span>, result);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、usleep函数的作用是什么？单位是什么？"><a href="#7、usleep函数的作用是什么？单位是什么？" class="headerlink" title="7、usleep函数的作用是什么？单位是什么？"></a>7、<font color="red">usleep</font>函数的作用是什么？单位是什么？</h3><ul><li>usleep的函数是让线程阻塞一段时间</li><li>usleep的单位是<font color="red">微秒</font></li><li><code>usleep(1000000); </code> 就是阻塞1s钟</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">10</span>) &#123;<br>        usleep(<span class="hljs-number">1000000</span>);<br>        count ++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i \n&quot;</span>, count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"><a href="#8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）" class="headerlink" title="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"></a>8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">size_t</span> wLen = fwrite(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (wLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入文件失败(%zu)\n&quot;</span>, wLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入成功\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">size_t</span> rLen = fread(data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (rLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取文件失败(%zu)\n&quot;</span>, rLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取成功（%s）\n&quot;</span>, data);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath = <span class="hljs-string">&quot;/Users/carrot/Documents/Code_Template_iOS/01_音视频/10_李超/01_第一季/CDemo/Data/readFileName.txt&quot;</span>;<br>    writeFile(filePath);<br>    readFile(filePath);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频入门课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>Mac命令</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建个人博客</title>
    <link href="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、开启GitHub的homepage功能"><a href="#一、开启GitHub的homepage功能" class="headerlink" title="一、开启GitHub的homepage功能"></a>一、开启GitHub的homepage功能</h2><h3 id="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"><a href="#1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。" class="headerlink" title="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"></a>1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。</h3><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425074530893.png" class="" title="image-20220425074530893"><h3 id="2、在项目中创建一个-index-html-文件，并填入以下内容。"><a href="#2、在项目中创建一个-index-html-文件，并填入以下内容。" class="headerlink" title="2、在项目中创建一个 index.html 文件，并填入以下内容。"></a>2、在项目中创建一个 <code>index.html</code> 文件，并填入以下内容。</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    Hello World<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、访问页面，表示这个阶段成功了。"><a href="#3、访问页面，表示这个阶段成功了。" class="headerlink" title="3、访问页面，表示这个阶段成功了。"></a>3、访问页面，表示这个阶段成功了。</h3><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425075606389.png" class="" title="image-20220425075606389"><h2 id="二、本地搭建hexo博客"><a href="#二、本地搭建hexo博客" class="headerlink" title="二、本地搭建hexo博客"></a>二、本地搭建hexo博客</h2><h3 id="1、安装Hexo（依赖nodejs环境，自行安装）"><a href="#1、安装Hexo（依赖nodejs环境，自行安装）" class="headerlink" title="1、安装Hexo（依赖nodejs环境，自行安装）"></a>1、安装Hexo（依赖nodejs环境，自行安装）</h3><p> <a href="https://hexo.io/zh-cn/docs/">Hexo 官方安装文档</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个 <code>hexo-blog</code> 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，页面默认主图风格如下</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70.png" class="" title="请添加图片描述"><h3 id="2、更换hexo主题（个人比较喜欢Fluid）"><a href="#2、更换hexo主题（个人比较喜欢Fluid）" class="headerlink" title="2、更换hexo主题（个人比较喜欢Fluid）"></a>2、更换hexo主题（个人比较喜欢Fluid）</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">官方安装文档</a></p><h3 id="1、方式一："><a href="#1、方式一：" class="headerlink" title="1、方式一："></a>1、<strong>方式一：</strong></h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h3 id="2、方式二："><a href="#2、方式二：" class="headerlink" title="2、方式二："></a>2、<strong>方式二：</strong></h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3、创建「关于页」"><a href="#3、创建「关于页」" class="headerlink" title="3、创建「关于页」"></a>3、<strong>创建「关于页」</strong></h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><h3 id="4、启动测试"><a href="#4、启动测试" class="headerlink" title="4、启动测试"></a>4、启动测试</h3><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a></p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70-20220426063940880.png" class="" title="请添加图片描述"><h3 id="5、创建文章"><a href="#5、创建文章" class="headerlink" title="5、创建文章"></a>5、创建文章</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">post_asset_folder: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-comment">--path 测试1/测试文章1</span><br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426064448766-0926693.png" class="" title="image-20220426064448766"><h3 id="6、借助-Typora-软件编写文章"><a href="#6、借助-Typora-软件编写文章" class="headerlink" title="6、借助 Typora 软件编写文章"></a>6、借助 Typora 软件编写文章</h3><p>对于图片资源的管理比较麻烦，这里 <a href="https://moeci.com/posts/hexo-typora/">推荐方案</a></p><p>配置typora，图片文件保存路径: <code>./$&#123;filename&#125;</code> 即保存到与 当前正在编辑的文件名 相同的同级文件夹下</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093318078.png" class="" title="img"><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093433709.png" class="" title="img"><p>配置给hexo-blog项目配置插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><h2 id="三、发布到GitHub-Pages"><a href="#三、发布到GitHub-Pages" class="headerlink" title="三、发布到GitHub Pages"></a>三、发布到GitHub Pages</h2><h3 id="1、安装-hexo-deployer-git-发布插件"><a href="#1、安装-hexo-deployer-git-发布插件" class="headerlink" title="1、安装  hexo-deployer-git 发布插件"></a>1、安装  <code>hexo-deployer-git</code> 发布插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="2、修改根目录下的-config-yml，配置-GitHub-相关信息"><a href="#2、修改根目录下的-config-yml，配置-GitHub-相关信息" class="headerlink" title="2、修改根目录下的 _config.yml，配置 GitHub 相关信息"></a>2、修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># Deployment<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy<span class="hljs-punctuation">:</span><br>  type<span class="hljs-punctuation">:</span> git<br>  repo<span class="hljs-punctuation">:</span> git@github.com<span class="hljs-punctuation">:</span>carrotlsp/carrotlsp.github.io.git<br>  branch<span class="hljs-punctuation">:</span> main<br></code></pre></td></tr></table></figure><h3 id="3、配置建立本地电脑和GitHub的ssh-key连接"><a href="#3、配置建立本地电脑和GitHub的ssh-key连接" class="headerlink" title="3、配置建立本地电脑和GitHub的ssh-key连接"></a>3、配置建立本地电脑和GitHub的ssh-key连接</h3><p>就是把自己 <code>cd ~/.ssh/ </code> 目录下的公钥给到GitHub配置中</p><h3 id="4、发布"><a href="#4、发布" class="headerlink" title="4、发布"></a>4、发布</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>访问 <code>https://carrotlsp.github.io/</code> 即可看到效果</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065418218.png" class="" title="image-20220426065418218"><h2 id="四、一些小技巧"><a href="#四、一些小技巧" class="headerlink" title="四、一些小技巧"></a>四、一些小技巧</h2><h3 id="1、如何把关键字标红？"><a href="#1、如何把关键字标红？" class="headerlink" title="1、如何把关键字标红？"></a>1、如何把关键字标红？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span>红色字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>但是每次敲这个HTML语法过于繁杂，我们可以借助 <code>输入法</code> 的快捷指令即可，如下图</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065638524.png" class="" title="image-20220426065638524"><h3 id="2、平时写文章常用命令？"><a href="#2、平时写文章常用命令？" class="headerlink" title="2、平时写文章常用命令？"></a>2、平时写文章常用命令？</h3><ul><li>创建文件结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post --path 文章目录/文章名字<br></code></pre></td></tr></table></figure><ul><li>生成文章</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><ul><li>发布文章</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01指针关键知识点</title>
    <link href="/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/"/>
    <url>/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2><h3 id="1、什么是地址（如何定义）？"><a href="#1、什么是地址（如何定义）？" class="headerlink" title="1、什么是地址（如何定义）？"></a>1、什么是地址（如何定义）？</h3><ul><li>【定义】内存中字节的编号称为地址。</li></ul><h3 id="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"><a href="#2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？" class="headerlink" title="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"></a>2、变量名、函数名、字符串名、数组名，它们都是<font color="red">地址的助记符</font>，但是在<font color="red">编码</font>过程中，这些名字的含义分别是什么？</h3><ul><li>【变量名】在编码过程中，表示的是数据本身。</li><li>【函数名、字符串名、数组名】在编码过程中，表示的是代码块或数据块的首地址。</li></ul><h3 id="3、什么是指针变量？"><a href="#3、什么是指针变量？" class="headerlink" title="3、什么是指针变量？"></a>3、什么是指针变量？</h3><ul><li>数据在内存中的地址也称为指针，如果一个变量存储了一份数据的指针，我们就称它问指针变量。</li></ul><h3 id="4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号"><a href="#4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号" class="headerlink" title="4、使用指针变量的时候，什么时候需带*号？什么时候不能带*号?"></a>4、使用指针变量的时候，什么时候需带<font color="red">*号</font>？什么时候不能带<font color="red">*号</font>?</h3><ul><li>【需带<font color="red">*号</font>】① 在定义指针变量时，为了和普通变量区分开来，需要使用<font color="red">*号</font> ②获取指针变量所指向数据时，需要使用<font color="red">*号</font> </li><li>【不能带<font color="red">*号</font>】在非定义表达式中，对指针进行赋值，改变其指向时不能使用<font color="red">*号</font> 。</li></ul><h3 id="5、-号在定义和使用指针变量时，含义一样吗？"><a href="#5、-号在定义和使用指针变量时，含义一样吗？" class="headerlink" title="5、*号在定义和使用指针变量时，含义一样吗？"></a>5、<font color="red">*号</font>在定义和使用指针变量时，含义一样吗？</h3><ul><li>【<font color="red">*号</font>定义时】*号可以用在指针变量的定义中，表明这是一个指针变量，以和普通变量区分开</li><li>【<font color="red">*号</font>使用时】使用指针变量时再前面加*号，表示获取指针指向的数据，或者说表示的是指针指向的数据本身。</li><li>也就是说，<strong>定义指针变量时的*号</strong>和<strong>使用指针变量时的*号</strong>意义完全不同</li></ul><h3 id="6、-号总共有几种用法？"><a href="#6、-号总共有几种用法？" class="headerlink" title="6、*号总共有几种用法？"></a>6、<font color="red">*号</font>总共有几种用法？</h3><ul><li>①用于乘法表达式中</li><li>②用于定义指针变量</li><li>③用于获取指针变量所指向的数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指针</tag>
      
      <tag>地址</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
