<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>day06-ffmpeg编译</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手动编译ffmpeg"><a href="#一、手动编译ffmpeg" class="headerlink" title="一、手动编译ffmpeg"></a>一、手动编译ffmpeg</h2><h3 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h3><p>这里先提前说明一下，最后希望达到的效果：</p><ul><li>编译出ffmpeg、ffprobe、ffplay三个命令行工具</li><li>只产生动态库，不产生静态库</li><li>将 fdk-aac、x264、x265集成到FFmpeg中</li></ul><h3 id="2、下载源码"><a href="#2、下载源码" class="headerlink" title="2、下载源码"></a>2、下载源码</h3><p>下载源码<a href="https://ffmpeg.org/releases/ffmpeg-4.3.2.tar.xz">ffmpeg-4.3.2.tar.xz</a>，然后解压。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410211902005-744008601-20220528181822420.png" class="" title="FFmpeg源码结构"><h3 id="3、安装依赖库"><a href="#3、安装依赖库" class="headerlink" title="3、安装依赖库"></a>3、安装依赖库</h3><ul><li>brew install yasm<ul><li>ffmpeg的编译过程依赖yasm</li><li>若未安装yasm会出现错误：nasm&#x2F;yasm not found or too old. Use –disable-x86asm for a crippled build.</li></ul></li><li>brew install sdl2<ul><li>ffplay依赖于sdl2</li><li>如果缺少sdl2，就无法编译出ffplay</li></ul></li><li>brew install fdk-aac<ul><li>不然会出现错误：ERROR: libfdk_aac not found</li></ul></li><li>brew install x264<ul><li>不然会出现错误：ERROR: libx264 not found</li></ul></li><li>brew install x265<ul><li>不然会出现错误：ERROR: libx265 not found</li></ul></li></ul><p>其实x264、x265、sdl2都在曾经执行<em>brew install ffmpeg</em>的时候安装过了。</p><ul><li>可以通过 brew list 的结果查看是否安装过<ul><li><em>brew list | grep fdk</em></li><li><em>brew list | grep x26</em></li><li><em>brew list | grep -E ‘fdk|x26’</em></li></ul></li><li>如果已经安装过，可以不用再执行<em>brew install</em></li></ul><h4 id="4、configure"><a href="#4、configure" class="headerlink" title="4、configure"></a>4、configure</h4><p>首先进入源码目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 我的源码放在了Downloads目录下</span><br><span class="hljs-built_in">cd</span> ~/Downloads/ffmpeg-4.3.2<br></code></pre></td></tr></table></figure><p>然后执行源码目录下的<code>configure</code>脚本，设置一些编译参数，做一些编译前的准备工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl  --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br></code></pre></td></tr></table></figure><ul><li><em>–prefix</em><ul><li>用以指定编译好的FFmpeg安装到哪个目录</li><li>一般放到&#x2F;usr&#x2F;local&#x2F;ffmpeg中即可</li></ul></li><li><em>–enable-shared</em><ul><li>生成动态库</li></ul></li><li><em>–disable-static</em><ul><li>不生成静态库</li></ul></li><li><em>–enable-libfdk-aac</em><ul><li>将fdk-aac内置到FFmpeg中</li></ul></li><li><em>–enable-libx264</em><ul><li>将x264内置到FFmpeg中</li></ul></li><li><em>–enable-libx265</em><ul><li>将x265内置到FFmpeg中</li></ul></li><li><em>–enable-gpl</em><ul><li>x264、x265要求开启<a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL License</a></li></ul></li><li><em>–enable-nonfree</em><ul><li><a href="https://github.com/FFmpeg/FFmpeg/blob/master/LICENSE.md">fdk-aac与GPL不兼容</a>，需要通过开启nonfree进行配置</li></ul></li></ul><p>你可以通过<em>configure –help</em>命令查看每一个配置项的作用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure --<span class="hljs-built_in">help</span> | grep static <br><br><span class="hljs-comment"># 结果如下所示</span><br>--disable-static         <span class="hljs-keyword">do</span> not build static libraries [no]<br></code></pre></td></tr></table></figure><h3 id="5、编译"><a href="#5、编译" class="headerlink" title="5、编译"></a>5、编译</h3><p>接下来开始解析源代码目录中的Makefile文件，进行编译。*-j8*表示允许同时执行8个编译任务。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j8<br></code></pre></td></tr></table></figure><p>对于经常在类Unix系统下接触C&#x2F;C++开发的小伙伴来说，Makefile必然是不陌生的。这里给不了解Makefile的小伙伴简单科普一下：</p><ul><li>Makefile描述了整个项目的编译和链接等规则<ul><li>比如哪些文件需要编译？哪些文件不需要编译？哪些文件需要先编译？哪些文件需要后编译？等等</li></ul></li><li>Makefile可以使项目的编译变得自动化，不需要每次都手动输入一堆源文件和参数<ul><li>比如原来需要这么写：<em>gcc test1.c test2.c test3.c -o test</em></li></ul></li></ul><h3 id="6、安装"><a href="#6、安装" class="headerlink" title="6、安装"></a>6、安装</h3><p>将编译好的库安装到指定的位置：&#x2F;usr&#x2F;local&#x2F;ffmpeg。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装完毕后，&#x2F;usr&#x2F;local&#x2F;ffmpeg的目录结构如下所示。</p><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day06%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91ffmpeg/497279-20210410215351652-254888592.png" class="" title="FFmpeg目录结构"><h3 id="7、配置PATH"><a href="#7、配置PATH" class="headerlink" title="7、配置PATH"></a>7、配置PATH</h3><p>为了让bin目录中的ffmpeg、ffprobe、ffplay在任意位置都能够使用，需要先将bin目录配置到环境变量PATH中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑.zprofile</span><br>vim ~/.zprofile <br><br><span class="hljs-comment"># .zprofile文件中写入以下内容</span><br><span class="hljs-built_in">export</span> PATH=/usr/local/ffmpeg/bin:<span class="hljs-variable">$PATH</span> <br><br><span class="hljs-comment"># 让.zprofile生效</span><br><span class="hljs-built_in">source</span> ~/.zprofile<br></code></pre></td></tr></table></figure><p>如果你用的是bash，而不是zsh，只需要将上面的.zprofile换成.bash_profile。</p><h3 id="8、验证"><a href="#8、验证" class="headerlink" title="8、验证"></a>8、验证</h3><p>接下来，在命令行上进行验证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">ffmpeg -version <br><br><span class="hljs-comment"># 结果如下所示</span><br><br>ffmpeg version 4.3.2 Copyright (c) 2000-2021 the FFmpeg developers<br>built with Apple clang version 12.0.0 (clang-1200.0.32.29)<br>configuration: --prefix=/usr/local/ffmpeg --enable-shared --disable-static --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265<br>libavutil      56. 51.100 / 56. 51.100<br>libavcodec     58. 91.100 / 58. 91.100<br>libavformat    58. 45.100 / 58. 45.100<br>libavdevice    58. 10.100 / 58. 10.100<br>libavfilter     7. 85.100 /  7. 85.100<br>libswscale      5.  7.100 /  5.  7.100<br>libswresample   3.  7.100 /  3.  7.100<br>libpostproc    55.  7.100 / 55.  7.100<br></code></pre></td></tr></table></figure><p>此时，你完全可以通过<code>brew uninstall ffmpeg</code>卸载以前安装的FFmpeg。</p>]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day05-音频基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day05%E9%9F%B3%E9%A2%91%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、音频基础知识"><a href="#一、音频基础知识" class="headerlink" title="一、音频基础知识"></a>一、音频基础知识</h2><h3 id="1、从共享端和观看端来大致分析直播流程？"><a href="#1、从共享端和观看端来大致分析直播流程？" class="headerlink" title="1、从共享端和观看端来大致分析直播流程？"></a>1、从共享端和观看端来大致分析直播流程？</h3><img src="day05音频基础篇/image-20220528172645179.png" alt="image-20220528172645179" style="zoom: 25%;" /><h3 id="2、什么是赫兹？人类听觉范围是多少？"><a href="#2、什么是赫兹？人类听觉范围是多少？" class="headerlink" title="2、什么是赫兹？人类听觉范围是多少？"></a>2、什么是赫兹？人类听觉范围是多少？</h3><ul><li>声音一秒振动的次数叫做赫兹，英文简称 <font color="red">Hz</font></li><li>20Hz ~ 20000Hz</li></ul><img src="day05音频基础篇/image-20220528173322566.png" alt="image-20220528173322566" style="zoom: 25%;" /><h3 id="3、分别解释音调、音量、音色分别由什么决定？"><a href="#3、分别解释音调、音量、音色分别由什么决定？" class="headerlink" title="3、分别解释音调、音量、音色分别由什么决定？"></a>3、分别解释音调、音量、音色分别由什么决定？</h3><ul><li>音调：声音频率的高低</li><li>音量：声音振幅的大小</li><li>音色：谐波组合而成</li></ul><h3 id="4、音频播放的三要素是什么？"><a href="#4、音频播放的三要素是什么？" class="headerlink" title="4、音频播放的三要素是什么？"></a>4、音频播放的三要素是什么？</h3><ul><li>采样率：采样频率8k、16k、32k、44.1k、48k</li><li>采样格式：一个采样用多少bit存放。通常是16bit</li><li>声道数：单声道、双声道、多声道</li></ul><h3 id="5、WAV头部信息分析？（TODO后面有空在回看）"><a href="#5、WAV头部信息分析？（TODO后面有空在回看）" class="headerlink" title="5、WAV头部信息分析？（TODO后面有空在回看）"></a>5、WAV头部信息分析？（TODO后面有空在回看）</h3><img src="day05音频基础篇/image-20220528173749399.png" alt="image-20220528173749399" style="zoom:50%;" /><img src="day05音频基础篇/image-20220528173803520.png" alt="image-20220528173803520" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01-入门基础篇</title>
    <link href="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Mac终端命令"><a href="#一、Mac终端命令" class="headerlink" title="一、Mac终端命令"></a>一、Mac终端命令</h2><h3 id="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"><a href="#1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？" class="headerlink" title="1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？"></a>1、如果电脑上有多个ffmpeg，如何知道当前执行的ffmpeg命令是哪个安装包下的？</h3><ul><li>借助 <font color="red">which</font> 命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">which</span> ffmpeg<br>/usr/local/ffmpeg/bin/ffmpeg<br></code></pre></td></tr></table></figure><h3 id="2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？"><a href="#2、借助命令行如何知道C语言的函数，比如-malloc-函数属于哪个库？" class="headerlink" title="2、借助命令行如何知道C语言的函数，比如 malloc 函数属于哪个库？"></a>2、借助命令行如何知道C语言的函数，比如 <font color="red">malloc</font> 函数属于哪个库？</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ man malloc<br></code></pre></td></tr></table></figure><img src="/2022/05/28/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%AD%A3/day01%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220528133251618.png" class="" title="image-20220528133251618"><h3 id="3、env-命令有什么用？"><a href="#3、env-命令有什么用？" class="headerlink" title="3、env 命令有什么用？"></a>3、<code>env</code> 命令有什么用？</h3><ul><li>可以查看当前mac电脑的环境变量</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">env</span> | grep PATH<br>MANPATH=/usr/local/share/man:<br>PATH=/usr/local/ffmpeg/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin<br>INFOPATH=/usr/local/share/info:<br></code></pre></td></tr></table></figure><h2 id="二、C语言回顾"><a href="#二、C语言回顾" class="headerlink" title="二、C语言回顾"></a>二、C语言回顾</h2><h3 id="1、C语言中的数组长度与其他高级语言有什么不同？"><a href="#1、C语言中的数组长度与其他高级语言有什么不同？" class="headerlink" title="1、C语言中的数组长度与其他高级语言有什么不同？"></a>1、C语言中的<font color="red">数组长度</font>与其他高级语言有什么不同？</h3><ul><li>C语言中的数组长度，必须指定，无法自动扩容。</li><li>C语言中的数组存储数据的长度，需要开发者自己维护，不可直接对数组进行获取。</li></ul><h3 id="2、指针的实际作用？"><a href="#2、指针的实际作用？" class="headerlink" title="2、指针的实际作用？"></a>2、指针的实际作用？</h3><ul><li>①在参数传递时，不需要真的带着一大堆的数据，可以传递指针，提高程序执行效率。</li><li>②指针可以指向任何地址，所以灵活性很高</li></ul><h3 id="3、指针的定义？"><a href="#3、指针的定义？" class="headerlink" title="3、指针的定义？"></a>3、指针的定义？</h3><ul><li>指向内存所在地址的变量，就是指针。</li></ul><h3 id="4、对指针的操作可以分为哪两大方向？"><a href="#4、对指针的操作可以分为哪两大方向？" class="headerlink" title="4、对指针的操作可以分为哪两大方向？"></a>4、对指针的操作可以分为哪两大方向？</h3><ul><li>对指针本身进行操作</li><li>对指针指向的内容操作</li></ul><h3 id="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"><a href="#5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？" class="headerlink" title="5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？"></a>5、借助以下代码，思考为什么要养成指针释放后需要置空的编码好习惯？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-comment">// insert code here...</span><br>    <br>    <span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br>    *p = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    *(p+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    *(p+<span class="hljs-number">2</span>) = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    <span class="hljs-built_in">free</span>(p);<br><span class="hljs-comment">//    p = NULL; (如果没有这句代码的保护，接下来对p的使用就是野指针，容易造成不可预知的错误)</span><br>    *p = <span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、什么是函数？什么是函数指针？最好自己先代码练一下。"><a href="#6、什么是函数？什么是函数指针？最好自己先代码练一下。" class="headerlink" title="6、什么是函数？什么是函数指针？最好自己先代码练一下。"></a>6、什么是函数？什么是函数指针？最好自己先代码练一下。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;          <span class="hljs-comment">//函数声明</span><br>    <span class="hljs-type">int</span> (*func)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);      <span class="hljs-comment">//函数指针</span><br>    func = sum;<br>    <span class="hljs-type">int</span> result = func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i\n&quot;</span>, result);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、usleep函数的作用是什么？单位是什么？"><a href="#7、usleep函数的作用是什么？单位是什么？" class="headerlink" title="7、usleep函数的作用是什么？单位是什么？"></a>7、<font color="red">usleep</font>函数的作用是什么？单位是什么？</h3><ul><li>usleep的函数是让线程阻塞一段时间</li><li>usleep的单位是<font color="red">微秒</font></li><li><code>usleep(1000000); </code> 就是阻塞1s钟</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">10</span>) &#123;<br>        usleep(<span class="hljs-number">1000000</span>);<br>        count ++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i \n&quot;</span>, count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"><a href="#8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）" class="headerlink" title="8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）"></a>8、C语言中如何打开一个文件，如何读取文件，如何关闭文件？（一定要多代码练习）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">size_t</span> wLen = fwrite(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (wLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入文件失败(%zu)\n&quot;</span>, wLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;写入成功\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath)</span> &#123;<br>    FILE *file = fopen(filePath, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开文件失败(%s)\n&quot;</span>, filePath);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">size_t</span> rLen = fread(data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), <span class="hljs-number">10</span>, file);<br>    <span class="hljs-keyword">if</span> (rLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取文件失败(%zu)\n&quot;</span>, rLen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    fclose(file);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读取成功（%s）\n&quot;</span>, data);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* filePath = <span class="hljs-string">&quot;/Users/carrot/Documents/Code_Template_iOS/01_音视频/10_李超/01_第一季/CDemo/Data/readFileName.txt&quot;</span>;<br>    writeFile(filePath);<br>    readFile(filePath);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>Mac命令</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建个人博客</title>
    <link href="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、开启GitHub的homepage功能"><a href="#一、开启GitHub的homepage功能" class="headerlink" title="一、开启GitHub的homepage功能"></a>一、开启GitHub的homepage功能</h2><h3 id="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"><a href="#1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。" class="headerlink" title="1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。"></a>1、注册GitHub账号，并创建一个项目，对仓库名字有严格要求。</h3><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425074530893.png" class="" title="image-20220425074530893"><h3 id="2、在项目中创建一个-index-html-文件，并填入以下内容。"><a href="#2、在项目中创建一个-index-html-文件，并填入以下内容。" class="headerlink" title="2、在项目中创建一个 index.html 文件，并填入以下内容。"></a>2、在项目中创建一个 <code>index.html</code> 文件，并填入以下内容。</h3><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    Hello World<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、访问页面，表示这个阶段成功了。"><a href="#3、访问页面，表示这个阶段成功了。" class="headerlink" title="3、访问页面，表示这个阶段成功了。"></a>3、访问页面，表示这个阶段成功了。</h3><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220425075606389.png" class="" title="image-20220425075606389"><h2 id="二、本地搭建hexo博客"><a href="#二、本地搭建hexo博客" class="headerlink" title="二、本地搭建hexo博客"></a>二、本地搭建hexo博客</h2><h3 id="1、安装Hexo（依赖nodejs环境，自行安装）"><a href="#1、安装Hexo（依赖nodejs环境，自行安装）" class="headerlink" title="1、安装Hexo（依赖nodejs环境，自行安装）"></a>1、安装Hexo（依赖nodejs环境，自行安装）</h3><p> <a href="https://hexo.io/zh-cn/docs/">Hexo 官方安装文档</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个 <code>hexo-blog</code> 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，页面默认主图风格如下</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70.png" class="" title="请添加图片描述"><h3 id="2、更换hexo主题（个人比较喜欢Fluid）"><a href="#2、更换hexo主题（个人比较喜欢Fluid）" class="headerlink" title="2、更换hexo主题（个人比较喜欢Fluid）"></a>2、更换hexo主题（个人比较喜欢Fluid）</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">官方安装文档</a></p><h3 id="1、方式一："><a href="#1、方式一：" class="headerlink" title="1、方式一："></a>1、<strong>方式一：</strong></h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h3 id="2、方式二："><a href="#2、方式二：" class="headerlink" title="2、方式二："></a>2、<strong>方式二：</strong></h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3、创建「关于页」"><a href="#3、创建「关于页」" class="headerlink" title="3、创建「关于页」"></a>3、<strong>创建「关于页」</strong></h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><h3 id="4、启动测试"><a href="#4、启动测试" class="headerlink" title="4、启动测试"></a>4、启动测试</h3><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a></p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb3JvbmdrZQ==,size_16,color_FFFFFF,t_70-20220426063940880.png" class="" title="请添加图片描述"><h3 id="5、创建文章"><a href="#5、创建文章" class="headerlink" title="5、创建文章"></a>5、创建文章</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">post_asset_folder: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-comment">--path 测试1/测试文章1</span><br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426064448766-0926693.png" class="" title="image-20220426064448766"><h3 id="6、借助-Typora-软件编写文章"><a href="#6、借助-Typora-软件编写文章" class="headerlink" title="6、借助 Typora 软件编写文章"></a>6、借助 Typora 软件编写文章</h3><p>对于图片资源的管理比较麻烦，这里 <a href="https://moeci.com/posts/hexo-typora/">推荐方案</a></p><p>配置typora，图片文件保存路径: <code>./$&#123;filename&#125;</code> 即保存到与 当前正在编辑的文件名 相同的同级文件夹下</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093318078.png" class="" title="img"><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20201128093433709.png" class="" title="img"><p>配置给hexo-blog项目配置插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><h2 id="三、发布到GitHub-Pages"><a href="#三、发布到GitHub-Pages" class="headerlink" title="三、发布到GitHub Pages"></a>三、发布到GitHub Pages</h2><h3 id="1、安装-hexo-deployer-git-发布插件"><a href="#1、安装-hexo-deployer-git-发布插件" class="headerlink" title="1、安装  hexo-deployer-git 发布插件"></a>1、安装  <code>hexo-deployer-git</code> 发布插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="2、修改根目录下的-config-yml，配置-GitHub-相关信息"><a href="#2、修改根目录下的-config-yml，配置-GitHub-相关信息" class="headerlink" title="2、修改根目录下的 _config.yml，配置 GitHub 相关信息"></a>2、修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># Deployment<br>## Docs<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy<span class="hljs-punctuation">:</span><br>  type<span class="hljs-punctuation">:</span> git<br>  repo<span class="hljs-punctuation">:</span> git@github.com<span class="hljs-punctuation">:</span>carrotlsp/carrotlsp.github.io.git<br>  branch<span class="hljs-punctuation">:</span> main<br></code></pre></td></tr></table></figure><h3 id="3、配置建立本地电脑和GitHub的ssh-key连接"><a href="#3、配置建立本地电脑和GitHub的ssh-key连接" class="headerlink" title="3、配置建立本地电脑和GitHub的ssh-key连接"></a>3、配置建立本地电脑和GitHub的ssh-key连接</h3><p>就是把自己 <code>cd ~/.ssh/ </code> 目录下的公钥给到GitHub配置中</p><h3 id="4、发布"><a href="#4、发布" class="headerlink" title="4、发布"></a>4、发布</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>访问 <code>https://carrotlsp.github.io/</code> 即可看到效果</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065418218.png" class="" title="image-20220426065418218"><h2 id="四、一些小技巧"><a href="#四、一些小技巧" class="headerlink" title="四、一些小技巧"></a>四、一些小技巧</h2><h3 id="1、如何把关键字标红？"><a href="#1、如何把关键字标红？" class="headerlink" title="1、如何把关键字标红？"></a>1、如何把关键字标红？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span></span>红色字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>但是每次敲这个HTML语法过于繁杂，我们可以借助 <code>输入法</code> 的快捷指令即可，如下图</p><img src="/2022/04/25/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20220426065638524.png" class="" title="image-20220426065638524"><h3 id="2、平时写文章常用命令？"><a href="#2、平时写文章常用命令？" class="headerlink" title="2、平时写文章常用命令？"></a>2、平时写文章常用命令？</h3><ul><li>创建文件结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post --path 文章目录/文章名字<br></code></pre></td></tr></table></figure><ul><li>生成文章</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><ul><li>发布文章</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day01指针关键知识点</title>
    <link href="/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/"/>
    <url>/2022/04/25/C%E8%AF%AD%E8%A8%80/day01/</url>
    
    <content type="html"><![CDATA[<h2 id="day01指针关键知识点"><a href="#day01指针关键知识点" class="headerlink" title="day01指针关键知识点"></a>day01指针关键知识点</h2><h3 id="1、什么是地址（如何定义）？"><a href="#1、什么是地址（如何定义）？" class="headerlink" title="1、什么是地址（如何定义）？"></a>1、什么是地址（如何定义）？</h3><ul><li>【定义】内存中字节的编号称为地址。</li></ul><h3 id="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"><a href="#2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？" class="headerlink" title="2、变量名、函数名、字符串名、数组名，它们都是地址的助记符，但是在编码过程中，这些名字的含义分别是什么？"></a>2、变量名、函数名、字符串名、数组名，它们都是<font color="red">地址的助记符</font>，但是在<font color="red">编码</font>过程中，这些名字的含义分别是什么？</h3><ul><li>【变量名】在编码过程中，表示的是数据本身。</li><li>【函数名、字符串名、数组名】在编码过程中，表示的是代码块或数据块的首地址。</li></ul><h3 id="3、什么是指针变量？"><a href="#3、什么是指针变量？" class="headerlink" title="3、什么是指针变量？"></a>3、什么是指针变量？</h3><ul><li>数据在内存中的地址也称为指针，如果一个变量存储了一份数据的指针，我们就称它问指针变量。</li></ul><h3 id="4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号"><a href="#4、使用指针变量的时候，什么时候需带-号？什么时候不能带-号" class="headerlink" title="4、使用指针变量的时候，什么时候需带*号？什么时候不能带*号?"></a>4、使用指针变量的时候，什么时候需带<font color="red">*号</font>？什么时候不能带<font color="red">*号</font>?</h3><ul><li>【需带<font color="red">*号</font>】① 在定义指针变量时，为了和普通变量区分开来，需要使用<font color="red">*号</font> ②获取指针变量所指向数据时，需要使用<font color="red">*号</font> </li><li>【不能带<font color="red">*号</font>】在非定义表达式中，对指针进行赋值，改变其指向时不能使用<font color="red">*号</font> 。</li></ul><h3 id="5、-号在定义和使用指针变量时，含义一样吗？"><a href="#5、-号在定义和使用指针变量时，含义一样吗？" class="headerlink" title="5、*号在定义和使用指针变量时，含义一样吗？"></a>5、<font color="red">*号</font>在定义和使用指针变量时，含义一样吗？</h3><ul><li>【<font color="red">*号</font>定义时】*号可以用在指针变量的定义中，表明这是一个指针变量，以和普通变量区分开</li><li>【<font color="red">*号</font>使用时】使用指针变量时再前面加*号，表示获取指针指向的数据，或者说表示的是指针指向的数据本身。</li><li>也就是说，<strong>定义指针变量时的*号</strong>和<strong>使用指针变量时的*号</strong>意义完全不同</li></ul><h3 id="6、-号总共有几种用法？"><a href="#6、-号总共有几种用法？" class="headerlink" title="6、*号总共有几种用法？"></a>6、<font color="red">*号</font>总共有几种用法？</h3><ul><li>①用于乘法表达式中</li><li>②用于定义指针变量</li><li>③用于获取指针变量所指向的数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指针</tag>
      
      <tag>地址</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
